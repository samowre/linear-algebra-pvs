(more_sigma_vector
 (SigmaV_scal_TCC1 0
  (SigmaV_scal_TCC1-1 nil 3583935726 ("" (subtype-tcc) nil nil) nil
   nil))
 (SigmaV_scal_TCC2 0
  (SigmaV_scal_TCC2-1 nil 3583935726 ("" (subtype-tcc) nil nil) nil
   nil))
 (SigmaV_scal_TCC3 0
  (SigmaV_scal_TCC3-1 nil 3583935726 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (SigmaV_scal 0
  (SigmaV_scal-1 nil 3583935841
   ("" (skosimp)
    (("" (expand "SigmaV")
      (("" (apply-extensionality)
        (("1" (hide 2)
          (("1" (expand "*")
            (("1" (lemma "sigma_scal[below[m!1]]")
              (("1"
                (inst -1 " LAMBDA (j: below[m!1]): F!1(j)(x!1)" "r!1"
                 "j!1" "i!1")
                (("1" (grind) nil nil)) nil)
               ("2" (hide 2)
                (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (skosimp) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((SigmaV const-decl "Vector[n]" sigma_vector "linear_algebra/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_scal formula-decl nil sigma "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "[real, [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector "linear_algebra/")
    (* const-decl "Vector" vectors "vectors/")
    (below type-eq-decl nil nat_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (SigmaV_eq 0
  (SigmaV_eq-1 nil 3583926749
   ("" (skosimp)
    (("" (expand "SigmaV")
      (("" (apply-extensionality)
        (("1" (hide 2)
          (("1" (lemma "sigma_restrict_eq[below[n!1]]")
            (("1" (inst -1 "_" "_" "j!1" "i!1")
              (("1"
                (inst -1 " LAMBDA (j: below[n!1]): a!1(j)(x!1)"
                 " LAMBDA (j: below[n!1]): b!1(j)(x!1)")
                (("1"
                  (case " restrict(LAMBDA (j: below[n!1]): a!1(j)(x!1), i!1, j!1) =
       restrict(LAMBDA (j: below[n!1]): b!1(j)(x!1), i!1, j!1)")
                  (("1" (assert) nil nil)
                   ("2" (hide -1 2)
                    (("2" (expand "restrict")
                      (("2" (apply-extensionality)
                        (("2" (hide 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp) (("2" (skosimp) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SigmaV const-decl "Vector[n]" sigma_vector "linear_algebra/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (restrict const-decl "[T -> real]" sigma "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma_restrict_eq formula-decl nil sigma "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (below type-eq-decl nil nat_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (SigmaV_eq_gen_TCC1 0
  (thm "fin" 3584516196
   ("" (skosimp) (("" (inst 2 "0") (("" (assert) nil nil)) nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)
  (SigmaV_eq_gen_TCC1-1 nil 3584516011 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (SigmaV_eq_gen_TCC2 0
  (SigmaV_eq_gen_TCC2-1 nil 3584516011 ("" (subtype-tcc) nil nil) nil
   nil))
 (SigmaV_eq_gen_TCC3 0
  (SigmaV_eq_gen_TCC3-1 nil 3584517171 ("" (subtype-tcc) nil nil) nil
   nil))
 (SigmaV_eq_gen 0
  (SigmaV_eq_gen-1 nil 3584517573
   ("" (skosimp)
    (("" (expand "SigmaV")
      (("" (apply-extensionality)
        (("1" (hide 2)
          (("1" (lemma "sigma_restrict_eq[below[m!1]]")
            (("1" (inst -1 "_" "_" "j!1" "i!1")
              (("1"
                (inst -1 " LAMBDA (j: below[m!1]): F!1(j)(x!1)"
                 " LAMBDA (j: below[m!1]): G!1(j)(x!1)")
                (("1" (expand "restrict")
                  (("1" (hide 2)
                    (("1" (apply-extensionality)
                      (("1" (hide 2)
                        (("1" (lift-if) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (skosimp) (("2" (skosimp) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((SigmaV const-decl "Vector[n]" sigma_vector "linear_algebra/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restrict const-decl "[T -> real]" sigma "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subrange type-eq-decl nil subrange_type nil)
    (sigma_restrict_eq formula-decl nil sigma "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (m!1 skolem-const-decl "posnat" more_sigma_vector nil)
    (n!1 skolem-const-decl "posnat" more_sigma_vector nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (below type-eq-decl nil nat_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (SigmaV_split_TCC1 0
  (SigmaV_split_TCC1-1 nil 3584474266 ("" (subtype-tcc) nil nil) nil
   nil))
 (SigmaV_split_TCC2 0
  (thm "fin" 3584516059
   ("" (skosimp) (("" (inst 2 "k!1") (("" (assert) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)
  (SigmaV_split_TCC2-1 nil 3584474266 ("" (subtype-tcc) nil nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (SigmaV_split_TCC3 0
  (SigmaV_split_TCC3-1 nil 3584516138 ("" (subtype-tcc) nil nil) nil
   nil))
 (SigmaV_split_TCC4 0
  (thm "fin" 3584516172
   ("" (skosimp) (("" (inst 2 "0") (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak)
  (SigmaV_split_TCC4-1 nil 3584516138 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (SigmaV_split 0
  (SigmaV_split-1 nil 3584474358
   ("" (skosimp)
    (("" (lemma "sigma_split[below[m!1]]")
      (("1" (expand "SigmaV")
        (("1" (apply-extensionality)
          (("1" (hide 2)
            (("1" (expand "+")
              (("1" (inst -1 "_" "j!1" "i!1" "k!1")
                (("1" (inst -1 "LAMBDA (j: below[m!1]): F!1(j)(x!1)")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide -1 2)
            (("2" (skosimp)
              (("2" (inst 2 "k!1") (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("3" (skosimp)
            (("3" (hide -1 2)
              (("3" (skosimp) (("3" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skosimp) (("2" (hide 2) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_split formula-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "real" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (SigmaV const-decl "Vector[n]" sigma_vector "linear_algebra/"))
   shostak))
 (SigmaV_middle_TCC1 0
  (thm "fin" 3584516085
   ("" (subtype-tcc) (("" (inst 2 "0") nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil))
   shostak)
  (SigmaV_middle_TCC1-1 nil 3584474957 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (SigmaV_middle 0
  (thm "fin" 3584480716
   ("" (skosimp)
    (("" (lemma "SigmaV_split")
      (("" (inst -1 "n!1" "m!1" "i!1" "j!1" "k!1" "F!1")
        (("" (assert)
          (("" (replace -1)
            (("" (hide -1)
              (("" (lemma "SigmaV_split")
                (("" (case "k!1=0")
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (expand "SigmaV" 1 1)
                        (("1" (expand "SigmaV" 1 2)
                          (("1" (expand "sigma")
                            (("1" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand "+")
                                  (("1"
                                    (expand "sigma")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2"
                                  (hide -2 2)
                                  (("2"
                                    (skosimp)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3" (inst 1 "0") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "k!1/=0")
                    (("1"
                      (inst -2 "n!1" "m!1" "i!1" "k!1" "k!1-1" "F!1")
                      (("1" (assert)
                        (("1" (case "i!1=k!1")
                          (("1" (hide 1)
                            (("1" (replace -1)
                              (("1"
                                (expand "SigmaV" 1 1)
                                (("1"
                                  (expand "SigmaV" 1 2)
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (apply-extensionality)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (expand "+")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2"
                                          (skosimp)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "i!1<k!1")
                            (("1" (assert)
                              (("1"
                                (replace -3)
                                (("1"
                                  (case
                                   "  SigmaV[below[m!1], n!1](k!1, k!1, F!1)=F!1(k!1)")
                                  (("1"
                                    (replace -1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide -3 4)
                                    (("2"
                                      (expand "SigmaV")
                                      (("2"
                                        (expand "sigma")
                                        (("2"
                                          (expand "sigma")
                                          (("2"
                                            (apply-extensionality)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (quedauna "quedauna" 3584480562
   ("" (skosimp)
    (("" (lemma "SigmaV_split")
      (("" (inst -1 "n!1" "m!1" "i!1" "j!1" "k!1" "F!1")
        (("" (assert)
          (("" (replace -1)
            (("" (hide -1)
              (("" (lemma "SigmaV_split")
                (("" (case "k!1=0")
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (expand "SigmaV" 1 1)
                        (("1" (expand "SigmaV" 1 2)
                          (("1" (expand "sigma")
                            (("1" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand "+")
                                  (("1"
                                    (expand "sigma")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2"
                                  (hide -2 2)
                                  (("2"
                                    (skosimp)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3" (inst 1 "0") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "k!1/=0")
                    (("1"
                      (inst -2 "n!1" "m!1" "i!1" "k!1" "k!1-1" "F!1")
                      (("1" (assert)
                        (("1" (case "i!1=k!1")
                          (("1" (hide 1)
                            (("1" (replace -1)
                              (("1"
                                (expand "SigmaV" 1 1)
                                (("1"
                                  (expand "SigmaV" 1 2)
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (apply-extensionality)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (expand "+")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp)
                                        (("2"
                                          (skosimp)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "i!1<k!1")
                            (("1" (assert)
                              (("1"
                                (replace -3)
                                (("1" (postpone) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (SigmaV const-decl "Vector[n]" sigma_vector "linear_algebra/")
    (sigma def-decl "real" sigma "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "real" vectors "vectors/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (SigmaV_split formula-decl nil more_sigma_vector nil))
   shostak)
  (quedandos "quedandos" 3584480440
   ("" (skosimp)
    (("" (lemma "SigmaV_split")
      (("" (inst -1 "n!1" "m!1" "i!1" "j!1" "k!1" "F!1")
        (("" (assert)
          (("" (replace -1)
            (("" (hide -1)
              (("" (lemma "SigmaV_split")
                (("" (case "k!1=0")
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (expand "SigmaV" 1 1)
                        (("1" (expand "SigmaV" 1 2)
                          (("1" (expand "sigma")
                            (("1" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand "+")
                                  (("1"
                                    (expand "sigma")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2"
                                  (hide -2 2)
                                  (("2"
                                    (skosimp)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp)
                                (("3" (inst 1 "0") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "k!1/=0")
                    (("1"
                      (inst -2 "n!1" "m!1" "i!1" "k!1" "k!1-1" "F!1")
                      (("1" (assert)
                        (("1" (case "i!1=k!1")
                          (("1" (postpone) nil nil)
                           ("2" (case "i!1<k!1")
                            (("1" (assert)
                              (("1"
                                (replace -3)
                                (("1" (postpone) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (encamino "encamino" 3584480302
   ("" (skosimp)
    (("" (lemma "SigmaV_split")
      (("" (inst -1 "n!1" "m!1" "i!1" "j!1" "k!1" "F!1")
        (("" (assert)
          (("" (replace -1)
            (("" (hide -1)
              (("" (lemma "SigmaV_split")
                (("" (case "k!1=0")
                  (("1" (postpone) nil nil)
                   ("2" (case "k!1/=0")
                    (("1"
                      (inst -2 "n!1" "m!1" "i!1" "k!1" "k!1-1" "F!1")
                      (("1" (assert)
                        (("1" (case "i!1=k!1")
                          (("1" (postpone) nil nil)
                           ("2" (case "i!1<k!1")
                            (("1" (assert)
                              (("1"
                                (replace -3)
                                (("1" (postpone) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (SigmaV_middle-1 nil 3584475031
   ("" (skosimp)
    (("" (lemma "SigmaV_split")
      (("" (inst -1 "n!1" "m!1" "i!1" "j!1" "k!1" "F!1")
        (("" (assert)
          (("" (replace -1)
            (("" (hide -1)
              (("" (lemma "SigmaV_split") (("" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (SigmaV_plus_TCC1 0
  (SigmaV_plus_TCC1-1 nil 3584516138 ("" (subtype-tcc) nil nil) nil
   nil))
 (SigmaV_plus_TCC2 0
  (SigmaV_plus_TCC2-1 nil 3584516138 ("" (subtype-tcc) nil nil) nil
   nil))
 (SigmaV_plus 0
  (SigmaV_plus-1 nil 3583936280
   ("" (skosimp)
    (("" (expand "SigmaV")
      (("" (apply-extensionality)
        (("1" (hide 2)
          (("1" (expand "+")
            (("1" (lemma "sigma_sum[below[n!1]]")
              (("1" (inst -1 "_" "_" "j!1" "i!1")
                (("1"
                  (inst -1 " LAMBDA (j: below[n!1]): a!1(j)(x!1)"
                   " LAMBDA (j: below[n!1]): b!1(j)(x!1)")
                  (("1" (swap-rel -1) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (skosimp) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((SigmaV const-decl "Vector[n]" sigma_vector "linear_algebra/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_sum formula-decl nil sigma "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (+ const-decl "real" vectors "vectors/")
    (below type-eq-decl nil nat_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (SigmaV_minus 0
  (thm "fin" 3583936179
   ("" (skosimp)
    (("" (lemma "SigmaV_plus")
      ((""
        (case "SigmaV(i!1, j!1, a!1) - SigmaV(i!1, j!1, b!1) = SigmaV(i!1, j!1, a!1) + (- SigmaV(i!1, j!1, b!1))")
        (("1" (replace -1)
          (("1" (hide -1)
            (("1"
              (case "-SigmaV(i!1, j!1, b!1) = SigmaV(i!1, j!1, -b!1)")
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1"
                    (inst -1 "n!1" "i!1" "j!1"
                     " LAMBDA (k: below[n!1]): a!1(k)"
                     " LAMBDA (k: below[n!1]): -b!1(k)")
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (lemma "SigmaV_eq")
                            (("1" (copy -1)
                              (("1"
                                (inst
                                 -1
                                 "n!1"
                                 "i!1"
                                 "j!1"
                                 " LAMBDA (k: below[n!1]): a!1(k)"
                                 "a!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (inst
                                         -1
                                         "n!1"
                                         "i!1"
                                         "j!1"
                                         "LAMBDA (k: below[n!1]): -b!1(k)"
                                         "-b!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (skosimp)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2" (lemma "SigmaV_scal")
                  (("2" (inst -1 "n!1" "-1" "n!1" "i!1" "j!1" "b!1")
                    (("2" (swap-rel -1)
                      (("2"
                        (case " -1 * SigmaV[below[n!1], n!1](i!1, j!1, b!1) =  -SigmaV(i!1, j!1, b!1)")
                        (("1" (replace -1)
                          (("1" (replace -2)
                            (("1" (hide -1 -2)
                              (("1"
                                (lemma "SigmaV_eq")
                                (("1"
                                  (inst
                                   -1
                                   "n!1"
                                   "i!1"
                                   "j!1"
                                   "-1*b!1"
                                   "-b!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (expand "*")
                                          (("1"
                                            (assert)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (casi "casi" 3583926730
   ("" (skosimp)
    (("" (lemma "SigmaV_plus")
      ((""
        (case "SigmaV(i!1, j!1, a!1) - SigmaV(i!1, j!1, b!1) = SigmaV(i!1, j!1, a!1) + (- SigmaV(i!1, j!1, b!1))")
        (("1" (replace -1)
          (("1" (hide -1)
            (("1"
              (case "-SigmaV(i!1, j!1, b!1) = SigmaV(i!1, j!1, -b!1)")
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1"
                    (inst -1 "n!1" "i!1" "j!1"
                     " LAMBDA (k: below[n!1]): a!1(k)"
                     " LAMBDA (k: below[n!1]): -b!1(k)")
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (lemma "SigmaV_eq")
                            (("1" (copy -1)
                              (("1"
                                (inst
                                 -1
                                 "n!1"
                                 "i!1"
                                 "j!1"
                                 " LAMBDA (k: below[n!1]): a!1(k)"
                                 "a!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (inst
                                         -1
                                         "n!1"
                                         "i!1"
                                         "j!1"
                                         "LAMBDA (k: below[n!1]): -b!1(k)"
                                         "-b!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (skosimp)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2) (("2" (postpone) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 2) (("2" (grind) nil nil)) nil)
         ("3" (hide -1 2) (("3" (skosimp) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors "vectors/")
    (+ const-decl "real" vectors "vectors/")
    (SigmaV const-decl "Vector[n]" sigma_vector "linear_algebra/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "real" vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Index type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (scal_neg_1 formula-decl nil vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[real, [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector "linear_algebra/")
    (* const-decl "Vector" vectors "vectors/")
    (SigmaV_scal formula-decl nil more_sigma_vector nil)
    (SigmaV_eq formula-decl nil more_sigma_vector nil)
    (add_neg_sub formula-decl nil vectors "vectors/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vector_of_Vectors type-eq-decl nil vect_of_vect "linear_algebra/")
    (- const-decl "Vector_of_Vectors[n, m]" more_vect_of_vect nil)
    (SigmaV_plus formula-decl nil more_sigma_vector nil))
   shostak)
  (vamos_bien "vamos_bien" 3583926415
   ("" (skosimp)
    (("" (lemma "SigmaV_plus")
      ((""
        (case "SigmaV(i!1, j!1, a!1) - SigmaV(i!1, j!1, b!1) = SigmaV(i!1, j!1, a!1) + (- SigmaV(i!1, j!1, b!1))")
        (("1" (replace -1)
          (("1" (hide -1)
            (("1"
              (case "-SigmaV(i!1, j!1, b!1) = SigmaV(i!1, j!1, -b!1)")
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1"
                    (inst -1 "n!1" "i!1" "j!1"
                     " LAMBDA (k: below[n!1]): a!1(k)"
                     " LAMBDA (k: below[n!1]): -b!1(k)")
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (hide -1) (("1" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2) (("2" (postpone) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 2) (("2" (postpone) nil nil)) nil)
         ("3" (hide -1 2) (("3" (skosimp) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (encamino "encamino" 3583926222
   ("" (skosimp)
    (("" (lemma "SigmaV_plus")
      ((""
        (case "SigmaV(i!1, j!1, a!1) - SigmaV(i!1, j!1, b!1) = SigmaV(i!1, j!1, a!1) + (- SigmaV(i!1, j!1, b!1))")
        (("1" (replace -1)
          (("1" (hide -1)
            (("1"
              (case "-SigmaV(i!1, j!1, b!1) = SigmaV(i!1, j!1, -b!1)")
              (("1" (replace -1)
                (("1" (hide -1) (("1" (postpone) nil nil)) nil)) nil)
               ("2" (hide -1 2) (("2" (postpone) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide -1 2) (("2" (postpone) nil nil)) nil)
         ("3" (hide -1 2) (("3" (skosimp) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (SigmaV_minus-1 nil 3583925316
   ("" (skosimp)
    (("" (lemma "SigmaV_plus")
      ((""
        (case "SigmaV(i!1, j!1, a!1) - SigmaV(i!1, j!1, b!1) = SigmaV(i!1, j!1, a!1) + (- SigmaV(i!1, j!1, b!1))")
        (("1" (replace -1)
          (("1" (hide -1) (("1" (postpone) nil nil)) nil)) nil)
         ("2" (hide -1 2) (("2" (postpone) nil nil)) nil)
         ("3" (hide -1 2) (("3" (skosimp) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

