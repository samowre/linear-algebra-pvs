(bilinear
 (Base_unique_TCC1 0
  (Base_unique_TCC1-1 nil 3582705374 ("" (subtype-tcc) nil nil) nil
   nil))
 (Base_unique_TCC2 0
  (Base_unique_TCC2-1 nil 3582705374 ("" (subtype-tcc) nil nil) nil
   nil))
 (Base_unique_TCC3 0
  (Base_unique_TCC3-1 nil 3582705374 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (BaseOrder? const-decl "bool" bilinear nil)
    (Base type-eq-decl nil bilinear nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Base_unique 0
  (Base_unique-1 nil 3582705468
   ("" (skosimp)
    (("" (typepred "e!1") (("" (grind) (("" (postpone) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (Lb_TCC1 0
  (Lb_TCC1-1 nil 3582705374 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors "vectors/") nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bilinear? const-decl "bool" bilinear nil) nil
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (Tb_TCC1 0
  (Tb_TCC1-1 nil 3582705374 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices "linear_algebra/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices "linear_algebra/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (Tb_TCC2 0
  (Tb_TCC2-1 nil 3582705374 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices "linear_algebra/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices "linear_algebra/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (Tb_TCC3 0
  (Tb_TCC3-1 nil 3582705374 ("" (subtype-tcc) nil nil) nil nil))
 (Lb_Tb 0
  (Lb_Tb-1 nil 3582708992
   ("" (skosimp)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (apply-extensionality)
          (("" (hide 2)
            (("" (expand "Lb") (("" (postpone) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (Iso_Lb 0
  (Iso_Lb-1 nil 3582709272
   ("" (skosimp)
    (("" (expand "bijective?")
      (("" (split)
        (("1" (expand "injective?")
          (("1" (skosimp)
            (("1" (apply-extensionality) (("1" (postpone) nil nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (Lb_inverse_TCC1 0
  (thm "finished" 3582706339
   ("" (skosimp)
    (("" (inst 1 "(# dim := n!1,h := LAMBDA(x,y:Vector[n!1]): 0 #)")
      (("" (expand "bilinear?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (real nonempty-type-from-decl nil reals nil) nil
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bilinear? const-decl "bool" bilinear nil) nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/") nil)
   shostak)
  (Lb_inverse_TCC1-1 nil 3582706101 ("" (existence-tcc) nil nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bilinear? const-decl "bool" bilinear nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/"))
   nil))
 (Lb_inverse 0
  (thm "finished" 3582708871
   ("" (skosimp)
    (("" (apply-extensionality)
      (("" (lemma "bijective_inverse[Bilinear(n!1),Mat(n!1,n!1)]")
        (("" (hide 2)
          (("" (inst -1 "Tb(n!1)(x!1)" "x!1" "Lb(n!1)")
            (("1" (assert)
              (("1" (lemma "Lb_Tb")
                (("1" (inst?) (("1" (swap-rel -1) nil nil)) nil)) nil))
              nil)
             ("2" (lemma "Iso_Lb") (("2" (inst -1 "n!1") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (encamino "encamino" 3582708828
   ("" (skosimp)
    (("" (apply-extensionality)
      (("" (lemma "bijective_inverse[Bilinear(n!1),Mat(n!1,n!1)]")
        (("" (hide 2)
          (("" (inst -1 "Tb(n!1)(x!1)" "x!1" "Lb(n!1)")
            (("1" (assert)
              (("1" (lemma "Lb_Tb")
                (("1" (inst?) (("1" (swap-rel -1) nil nil)) nil)) nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective_inverse formula-decl nil function_inverse nil)
    (n!1 skolem-const-decl "posnat" bilinear nil)
    (bijective? const-decl "bool" functions nil)
    (Lb_Tb formula-decl nil bilinear nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Iso_Lb formula-decl nil bilinear nil)
    (inverse const-decl "D" function_inverse nil)
    (Lb const-decl "[Bilinear(n) -> Mat(n, n)]" bilinear nil)
    (Tb const-decl "[Mat(n, n) -> Bilinear(n)]" bilinear nil)
    (Bilinear type-eq-decl nil bilinear nil)
    (bilinear? const-decl "bool" bilinear nil)
    (Bilinear type-eq-decl nil bilinear nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Mat type-eq-decl nil matrices "linear_algebra/")
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices "linear_algebra/")
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (Lb_inverse-1 nil 3582706967
   ("" (skosimp)
    (("" (apply-extensionality)
      (("" (lemma "bijective_inverse[Bilinear(n!1),Mat(n!1,n!1)]")
        (("" (hide 2)
          (("" (inst -1 "Tb(n!1)(x!1)" "x!1" "Lb(n!1)")
            (("1" (assert) (("1" (postpone) nil nil)) nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (Iso_Tb 0
  (Iso_Tb-1 nil 3582706361
   ("" (skosimp)
    (("" (lemma "Iso_Lb")
      (("" (inst -1 "n!1")
        (("" (lemma "bij_inv_is_bij[Bilinear(n!1),Mat(n!1,n!1)]")
          (("" (inst?)
            (("" (assert)
              (("" (lemma "Lb_inverse")
                (("" (inst -1 "n!1")
                  (("" (replace -1) (("" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Iso_Lb formula-decl nil bilinear nil)
    (Mat type-eq-decl nil matrices "linear_algebra/")
    (Matrix type-eq-decl nil matrices "linear_algebra/")
    (below type-eq-decl nil naturalnumbers nil)
    (bilinear? const-decl "bool" bilinear nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (Lb_inverse formula-decl nil bilinear nil)
    (Lb const-decl "[Bilinear(n) -> Mat(n, n)]" bilinear nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

