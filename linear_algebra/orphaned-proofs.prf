("sig" sigma_vector additive_TCC1 0 (additive_TCC1-1 nil 3518275428 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (posnat nonempty-type-eq-decl nil integers nil) (Vector type-eq-decl nil vectors "vectors/") (Maping type-eq-decl nil linear_map nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (n formal-const-decl "posnat" sigma_vector nil) (map type-eq-decl nil linear_map nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (T formal-subtype-decl nil sigma_vector nil) (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma "reals/") (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (T_high type-eq-decl nil sigma "reals/")) nil))("sig" sigma_vector additive_prep_TCC4 0 (additive_prep_TCC4-1 nil 3518275428 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (posnat nonempty-type-eq-decl nil integers nil) (Vector type-eq-decl nil vectors "vectors/") (Maping type-eq-decl nil linear_map nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (n formal-const-decl "posnat" sigma_vector nil) (map type-eq-decl nil linear_map nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (T formal-subtype-decl nil sigma_vector nil) (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma "reals/") (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator equa_sol_TCC7 0 (equa_sol_TCC7-1 nil 3520675951 ("" (subtype-tcc) nil nil) ((squareMat? const-decl "bool" matrices nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator equa_sol_TCC6 0 (equa_sol_TCC6-1 nil 3520675951 ("" (subtype-tcc) nil nil) ((squareMat? const-decl "bool" matrices nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator map_matrix_bij_inv_TCC2 0 (map_matrix_bij_inv_TCC2-1 nil 3520675951 ("" (subtype-tcc) nil nil) ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator bijec_prod_TCC4 0 (bijec_prod_TCC4-1 nil 3520675951 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (* const-decl "Matrix" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator bijec_prod_TCC3 0 (bijec_prod_TCC3-1 nil 3520675951 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator inv_mat_TCC1 0 (inv_mat_TCC1-1 nil 3520675951 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (square? const-decl "bool" matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (I const-decl "(identity?)" matrices nil) (* const-decl "Matrix" matrices nil) (= const-decl "[T, T -> boolean]" equalities nil) (inverse? const-decl "bool" matrices nil) (squareMat? const-decl "bool" matrices nil) (invertible? const-decl "bool" matrices nil)) nil))("matrix_operator" matrix_operator one_to_one_TCC2 0 (one_to_one_TCC2-1 nil 3520675951 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil)) nil))("matrices" matrices sigma_lem_TCC3 0 (sigma_lem_TCC3-1 nil 3519904271 ("" (assuming-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (integer nonempty-type-from-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("matrices" matrices times_TCC6 0 (times_TCC6-1 nil 3519904271 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (Matrix type-eq-decl nil matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("linear_map_def" linear_map_def vec_expan?_TCC3 0 (vec_expan?_TCC3-1 nil 3519739481 ("" (assuming-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (Index type-eq-decl nil vectors "vectors/") (integer nonempty-type-from-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("linear_map_def" linear_map_def linear_0 0 (linear_0-1 nil 3478860004 ("" (skosimp) (("" (lemma "sub_eq_args[m]") (("" (inst -1 "f!1(zero[n])") (("" (expand "linear_map?") (("" (flatten) (("" (expand "homogeneous?") (("" (expand "additive?") (("" (inst -2 "zero[n]" "zero[n]") (("" (move-terms -2 r 2) (("1" (assert) nil nil) ("2" (lemma "sub_eq_args[m]") (("2" (lemma "add_move_left [m]") (("2" (inst -1 "f!1(zero[n])" "f!1(zero[n])" "f!1(zero[n])") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (sub_eq_args formula-decl nil vectors "vectors/") (linear_map? const-decl "bool" linear_map_def nil) (homogeneous? const-decl "bool" linear_map_def nil) (add_zero_left formula-decl nil vectors "vectors/") (real_plus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_minus_real_is_real application-judgement "real" reals nil) (add_cancel formula-decl nil vectors "vectors/") (TRUE const-decl "bool" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (- const-decl "real" vectors "vectors/") (+ const-decl "real" vectors "vectors/") (= const-decl "[T, T -> boolean]" equalities nil) (IFF const-decl "[bool, bool -> bool]" booleans nil) (additive? const-decl "bool" linear_map_def nil) (zero const-decl "Vector" vectors "vectors/") (Vector type-eq-decl nil vectors "vectors/") (Index type-eq-decl nil vectors "vectors/") (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) shostak))("linear_map_def" linear_map_def inverse_func 0 (thm "thm" 3483354918 ("" (skosimp) (("" (lemma "bijective_inverse[Vector[n],Vector[n]]") (("" (lemma "extensionality[Vector[n],Vector[n]]") (("" (inst -1 "inverse(h!1)" "inverse(k!1)") (("" (case "FORALL (x: Vector[n]): inverse(h!1)(x) = inverse(k!1)(x)") (("1" (assert) (("1" (name "ff" "FORALL (x: Vector[n]): inverse(h!1)(x) = inverse(k!1)(x)") (("1" (replace -1) (("1" (assert) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (name "a1" "inverse(h!1)(x!1)") (("2" (copy -3) (("2" (inst -1 "a1" "x!1" "h!1") (("2" (assert) (("2" (name "a2" "inverse(k!1)(x!1)") (("2" (inst -4 "a2" "x!1" "k!1") (("2" (assert) (("2" (replace -2 -4) (("2" (lemma "extensionality_postulate[Vector[n],Vector[n]]") (("2" (inst -1 "h!1" "k!1") (("2" (assert) (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((Vector type-eq-decl nil vectors "vectors/") (Index type-eq-decl nil vectors "vectors/") (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bijective_inverse formula-decl nil function_inverse nil) (inverse const-decl "D" function_inverse nil) (extensionality_postulate formula-decl nil functions nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (= const-decl "[T, T -> boolean]" equalities nil) (extensionality formula-decl nil functions nil)) shostak) (inverse_func-1 nil 3482662212 ("" (skosimp) (("" (lemma "bijecti_fun_equa") (("" (inst -1 "h!1" "k!1") (("" (assert) (("" (swap-rel -2) (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ((Vector type-eq-decl nil vectors "vectors/") (Index type-eq-decl nil vectors "vectors/") (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (bijective_inverse formula-decl nil function_inverse nil) (inverse const-decl "D" function_inverse nil) (extensionality_postulate formula-decl nil functions nil) (bijective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (injective? const-decl "bool" functions nil) (= const-decl "[T, T -> boolean]" equalities nil) (extensionality formula-decl nil functions nil)) shostak))("sig" sigma_vector additive 0 (thm "thm" 3490033398 ("" (skolem!) (("" (flatten) (("" (lemma "additive_prep") (("" (skosimp) (("" (assert) (("" (lemma "T_pred_lem[T]") (("" (inst -1 "high!1" "low!1" "high!1") (("" (assert) (("" (inst -2 "F!1" "h!1" "low!1" "high!1-low!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((T formal-subtype-decl nil sigma_vector nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (T_pred_lem formula-decl nil sigma "reals/") (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (Map type-eq-decl nil linear_map nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (Maping type-eq-decl nil linear_map nil) (Vector type-eq-decl nil vectors "vectors/") (Index type-eq-decl nil vectors "vectors/") (n formal-const-decl "posnat" sigma_vector nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (T_low type-eq-decl nil sigma "reals/") (T_high type-eq-decl nil sigma "reals/") (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (additive_prep formula-decl nil sigma_vector nil)) shostak) (thm "yhm" 3490011562 ("" (skolem!) (("" (flatten) (("" (lemma "additive_prep") (("" (skosimp) (("" (inst -1 "F!1" "low!1" "high!1-low!1") (("1" (assert) (("1" (name "dd" "(FORALL x, y: h(x + y) = h(x) + h(y))") (("1" (replace -1) (("1" (assert) (("1" (lemma "T_pred_lem[T]") (("1" (inst -1 "high!1" "low!1" "high!1") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ((additive_prep formula-decl nil sigma_vector nil) (int_plus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma "reals/") (T_low type-eq-decl nil sigma "reals/") (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (n formal-const-decl "posnat" sigma_vector nil) (Index type-eq-decl nil vectors "vectors/") (Vector type-eq-decl nil vectors "vectors/") nil (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (T_pred_lem formula-decl nil sigma "reals/") (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (T formal-subtype-decl nil sigma_vector nil)) shostak) (additive-1 nil 3489920633 ("" (skolem!) (("" (flatten) (("" (lemma "additive_prep") (("" (skosimp) (("" (inst -1 "F!1" "low!1" "high!1-low!1") (("1" (assert) (("1" (name "dd" "(FORALL x, y: h(x + y) = h(x) + h(y))") (("1" (replace -1) (("1" (assert) (("1" (lemma "T_pred_lem[T]") (("1" (inst -1 "high!1" "low!1" "high!1") (("1" (assert) (("1" (grind) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (grind) (("2" (typepred "high!1") (("2" (typepred "low!1") (("2" (grind) (("1" (grind) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((additive_prep formula-decl nil sigma_vector nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (T_low type-eq-decl nil sigma "reals/") (T_high type-eq-decl nil sigma "reals/") (<= const-decl "bool" reals nil) (T formal-subtype-decl nil sigma_vector nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (n formal-const-decl "posnat" sigma_vector nil) (Index type-eq-decl nil vectors "vectors/") (Vector type-eq-decl nil vectors "vectors/") (= const-decl "[T, T -> boolean]" equalities nil) nil (+ const-decl "real" vectors "vectors/") (T_pred_lem formula-decl nil sigma "reals/") (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_plus_int_is_int application-judgement "int" integers nil)) shostak))("sig" sigma_vector additive_prep 0 (thm "thm" 3490033266 ("" (induct "m") (("1" (skosimp*) (("1" (grind) (("1" (expand "SigmaV") (("1" (assert) (("1" (apply-extensionality 1 :hide? t) (("1" (case-replace "(LAMBDA (i: below[n]): F!1(low!1)(i)) = F!1(low!1)") (("1" (apply-extensionality 1 :hide? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "SigmaV_last") (("2" (inst -1 "F!1" "low!1+(j!1+1)" "low!1") (("2" (assert) (("2" (replace -1) (("2" (copy -3) (("2" (inst -1 "SigmaV(low!1, j!1 + low!1, F!1)" "F!1(1 + j!1 + low!1)") (("2" (replace -1) (("2" (hide -1) (("2" (assert) (("2" (lemma "T_pred_lem[T]") (("2" (inst -1 "1+j!1+low!1" "low!1" "j!1+low!1") (("2" (assert) (("2" (lemma "SigmaV_last") (("2" (assert) (("2" (expand "o" 1) (("2" (inst -4 "F!1" "h!1" "low!1") (("2" (name "dd" " FORALL x, y: h!1(x + y) = h!1(x) + h!1(y)") (("2" (replace -1) (("2" (assert) (("2" (replace -5) (("2" (inst -2 " LAMBDA (i: T): h!1(F!1(i))" " 1 + j!1 + low!1" "low!1") (("2" (assert) (("2" (replace -2) (("2" (expand "o" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp) nil nil)) nil) ((T_pred_lem formula-decl nil sigma "reals/") (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (SigmaV_last formula-decl nil sigma_vector nil) (below type-eq-decl nil nat_types nil) (sigma def-decl "real" sigma "reals/") (nat_induction formula-decl nil naturalnumbers nil) (O const-decl "[Map(n, n), [T -> Vector[n]] -> [T -> Vector[n]]]" sigma_vector nil) (SigmaV const-decl "Vector[n]" sigma_vector nil) (T_high type-eq-decl nil sigma "reals/") (pred type-eq-decl nil defined_types nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (n formal-const-decl "posnat" sigma_vector nil) (Index type-eq-decl nil vectors "vectors/") (Vector type-eq-decl nil vectors "vectors/") nil (OR const-decl "[bool, bool -> bool]" booleans nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (T formal-subtype-decl nil sigma_vector nil) (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma "reals/") (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (+ const-decl "real" vectors "vectors/") (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (int_plus_int_is_int application-judgement "int" integers nil)) shostak) (thm "thm" 3490010525 ("" (induct "m") (("1" (skosimp*) (("1" (grind) (("1" (expand "SigmaV") (("1" (assert) (("1" (apply-extensionality 1 :hide? t) (("1" (case-replace "(LAMBDA (i: below[n]): F!1(low!1)(i)) = F!1(low!1)") (("1" (apply-extensionality 1 :hide? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (lemma "SigmaV_last") (("2" (inst -1 "F!1" "low!1+(j!1+1)" "low!1") (("2" (assert) (("2" (replace -1) (("2" (copy -3) (("2" (inst -1 "SigmaV(low!1, j!1 + low!1, F!1)" "F!1(1 + j!1 + low!1)") (("2" (replace -1) (("2" (hide -1) (("2" (inst -2 "F!1" "low!1") (("2" (assert) (("2" (name "dd" "(FORALL x, y: h(x + y) = h(x) + h(y))") (("2" (replace -1) (("2" (assert) (("2" (lemma "T_pred_lem[T]") (("2" (inst -1 "1+j!1+low!1" "low!1" "j!1+low!1") (("2" (assert) (("2" (replace -4) (("2" (lemma "SigmaV_last") (("2" (inst -1 "h o F!1" "1+j!1+low!1" "low!1") (("2" (assert) (("2" (replace -1) (("2" (expand "o" 1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp) nil nil)) nil) ((int_plus_int_is_int application-judgement "int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "real" vectors "vectors/") (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (T_low type-eq-decl nil sigma "reals/") (<= const-decl "bool" reals nil) (T formal-subtype-decl nil sigma_vector nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (OR const-decl "[bool, bool -> bool]" booleans nil) nil (Vector type-eq-decl nil vectors "vectors/") (Index type-eq-decl nil vectors "vectors/") (n formal-const-decl "posnat" sigma_vector nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pred type-eq-decl nil defined_types nil) (T_high type-eq-decl nil sigma "reals/") (SigmaV const-decl "Vector[n]" sigma_vector nil) (O const-decl "[Map(n, n), [T -> Vector[n]] -> [T -> Vector[n]]]" sigma_vector nil) (nat_induction formula-decl nil naturalnumbers nil) (sigma def-decl "real" sigma "reals/") (below type-eq-decl nil nat_types nil) (SigmaV_last formula-decl nil sigma_vector nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (T_pred_lem formula-decl nil sigma "reals/") (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (additive_prep-1 nil 3489937537 ("" (induct "m") (("1" (skosimp*) (("1" (grind) (("1" (expand "SigmaV") (("1" (assert) (("1" (apply-extensionality 1 :hide? t) (("1" (case-replace "(LAMBDA (i: below[n]): F!1(low!1)(i)) = F!1(low!1)") (("1" (apply-extensionality 1 :hide? t) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (expand "SigmaV" +) (("2" (expand "o ") (("2" (expand "sigma" +) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil) ("3" (postpone) nil nil)) nil) ((int_plus_int_is_int application-judgement "int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "real" vectors "vectors/") nil (= const-decl "[T, T -> boolean]" equalities nil) (Vector type-eq-decl nil vectors "vectors/") (Index type-eq-decl nil vectors "vectors/") (n formal-const-decl "posnat" sigma_vector nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (T_low type-eq-decl nil sigma "reals/") (<= const-decl "bool" reals nil) (T formal-subtype-decl nil sigma_vector nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (pred type-eq-decl nil defined_types nil) (T_high type-eq-decl nil sigma "reals/") (SigmaV const-decl "Vector[n]" sigma_vector nil) (O const-decl "[Map(n, n), [T -> Vector[n]] -> [T -> Vector[n]]]" sigma_vector nil) (nat_induction formula-decl nil naturalnumbers nil) (sigma def-decl "real" sigma "reals/") (below type-eq-decl nil nat_types nil) (SigmaV_last formula-decl nil sigma_vector nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (T_pred_lem formula-decl nil sigma "reals/")) shostak))("sig" sigma_vector additive_prep_TCC3 0 (additive_prep_TCC3-1 nil 3518275428 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (posnat nonempty-type-eq-decl nil integers nil) (Vector type-eq-decl nil vectors "vectors/") (Maping type-eq-decl nil linear_map nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (n formal-const-decl "posnat" sigma_vector nil) (Map type-eq-decl nil linear_map nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat nonempty-type-eq-decl nil naturalnumbers nil)) nil))("sig" sigma_vector additive_prep_TCC2 0 (additive_prep_TCC2-1 nil 3518275428 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (posnat nonempty-type-eq-decl nil integers nil) (Vector type-eq-decl nil vectors "vectors/") (Maping type-eq-decl nil linear_map nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (n formal-const-decl "posnat" sigma_vector nil) nil (OR const-decl "[bool, bool -> bool]" booleans nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (T formal-subtype-decl nil sigma_vector nil) (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma "reals/") (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_plus_int_is_int application-judgement "int" integers nil)) nil))("sig" sigma_vector additive_prep_TCC1 0 (additive_prep_TCC1-1 nil 3489937527 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (posnat nonempty-type-eq-decl nil integers nil) (Vector type-eq-decl nil vectors "vectors/") (Maping type-eq-decl nil linear_map nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (n formal-const-decl "posnat" sigma_vector nil) (Map type-eq-decl nil linear_map nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("ellipsoid" ellipsoid ellipsoid_TCC6 0 (ellipsoid_TCC6-1 nil 3508764162 ("" (subtype-tcc) nil nil) ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (- const-decl "real" vectors "vectors/") (* const-decl "Vector[n]" ellipsoid nil) (* const-decl "real" vectors "vectors/") (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (transpose const-decl "Matrix" matrices nil) (* const-decl "Matrix" matrices nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("ellipsoid" ellipsoid mult_assoc_vect_n_TCC2 0 (mult_assoc_vect_n_TCC2-1 nil 3520597202 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (* const-decl "Matrix" matrices nil)) nil))("matrices" matrices mult_assoc_vect 0 (thm "thm" 3519907836 ("" (skosimp) (("" (expand "*") (("" (apply-extensionality) (("1" (hide 2) (("1" (lemma "sigma_prop") (("1" (inst?) (("1" (replace -1) (("1" (assert) (("1" (hide -1) (("1" (lemma "sigma_comm") (("1" (inst?) (("1" (replace -1) (("1" (assert) (("1" (hide -1) (("1" (name "aa" "LAMBDA (j_1: below(N!1`cols)):
              sigma(0, M!1`cols - 1,
                    LAMBDA (i_1: below(M!1`cols)):
                      M!1`matrix(x!1, i_1) *
                       (N!1`matrix(i_1, j_1) * V!1(j_1)))") (("1" (replace -1) (("1" (name "bb" "LAMBDA (k_1: below(N!1`cols)):
               sigma(0, M!1`cols - 1,
                     LAMBDA (k: below(M!1`cols)):
                       M!1`matrix(x!1, k) * N!1`matrix(k, k_1))
                * V!1(k_1)") (("1" (replace -1) (("1" (hide -1) (("1" (lemma "sigma_eq[below[N!1`cols]]") (("1" (inst -1 "aa" "bb" "N!1`cols-1" "0") (("1" (case "(FORALL (n: subrange(0, N!1`cols - 1)): aa(n) = bb(n))") (("1" (assert) nil nil) ("2" (skosimp) (("2" (hide -1 -2 2) (("2" (expand "aa") (("2" (expand "bb") (("2" (lemma "sigma_eq[below[M!1`cols]]") (("2" (lemma "sigma_scal[below[M!1`cols]]") (("2" (inst -1 "LAMBDA (k: below(M!1`cols)):
               M!1`matrix(x!1, k) * N!1`matrix(k, n!1)" "V!1(n!1)" "M!1`cols-1" "0") (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (assert) nil nil)) nil) ("3" (skosimp) (("3" (assert) nil nil)) nil) ("4" (skosimp) (("4" (assert) nil nil)) nil) ("5" (skosimp) (("5" (assert) nil nil)) nil) ("6" (skosimp) (("6" (assert) nil nil)) nil) ("7" (skosimp) (("7" (assert) nil nil)) nil) ("8" (skosimp) (("8" (assert) nil nil)) nil) ("9" (skosimp) (("9" (assert) nil nil)) nil)) nil)) nil)) nil) ((* const-decl "Matrix" matrices nil) (* const-decl "Vector[M`rows]" matrices nil) (posint nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (sigma_comm formula-decl nil matrices nil) (sigma_eq formula-decl nil sigma "reals/") (below type-eq-decl nil nat_types nil) (subrange type-eq-decl nil integers nil) (bb skolem-const-decl "[below(N!1`cols) -> real]" matrices nil) (sigma_scal formula-decl nil sigma "reals/") (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (aa skolem-const-decl "[below(N!1`cols) -> real]" matrices nil) (sigma_prop formula-decl nil matrices nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil) (<= const-decl "bool" reals nil) (N!1 skolem-const-decl "{N | M!1`cols = N`rows}" matrices nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (M!1 skolem-const-decl "Matrix" matrices nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (T_low type-eq-decl nil sigma "reals/") (T_high type-eq-decl nil sigma "reals/") (sigma def-decl "real" sigma "reals/") (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (Index type-eq-decl nil vectors "vectors/") (Vector type-eq-decl nil vectors "vectors/") (Matrix type-eq-decl nil matrices nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak) (mult_assoc_vect-1 nil 3519904272 ("" (skosimp) (("" (expand "*") (("" (apply-extensionality 1) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil) ("4" (postpone) nil nil) ("5" (postpone) nil nil) ("6" (postpone) nil nil) ("7" (postpone) nil nil) ("8" (postpone) nil nil) ("9" (postpone) nil nil)) nil)) nil)) nil) ((* const-decl "Vector[M`rows]" matrices nil) (posint nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (sigma_comm formula-decl nil matrices nil) (sigma_eq formula-decl nil sigma "reals/") (below type-eq-decl nil nat_types nil) (subrange type-eq-decl nil integers nil) (sigma_scal formula-decl nil sigma "reals/") (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_prop formula-decl nil matrices nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (T_low type-eq-decl nil sigma "reals/") (T_high type-eq-decl nil sigma "reals/") (sigma def-decl "real" sigma "reals/") (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (Index type-eq-decl nil vectors "vectors/") (Vector type-eq-decl nil vectors "vectors/") (Matrix type-eq-decl nil matrices nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("matrices" matrices mult_assoc_vect_TCC3 0 (mult_assoc_vect_TCC3-1 nil 3519735992 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (* const-decl "Matrix" matrices nil)) nil))("matrices" matrices mult_assoc_vect_TCC2 0 (mult_assoc_vect_TCC2-1 nil 3519735992 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("matrices" matrices mult_assoc_vect_TCC1 0 (mult_assoc_vect_TCC1-1 nil 3519735992 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (* const-decl "Matrix" matrices nil)) nil))("ellipsoid" ellipsoid mult_assoc_vect_n 0 (mult_assoc_vect_n-1 nil 3520614572 ("" (skosimp) (("" (apply-extensionality) (("" (expand "*" 1) (("" (assert) (("" (hide 2) (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("ellipsoid" ellipsoid mult_assoc_vect_n_TCC1 0 (mult_assoc_vect_n_TCC1-1 nil 3520597202 ("" (subtype-tcc) nil nil) nil nil))("ellipsoid" ellipsoid left_distributive_vect_n 0 (thm "thm" 3520697394 ("" (skosimp) (("" (apply-extensionality) (("" (case "(M!1 * v1!1 - M!1 * v2!1)(x!1)=(M!1 * v1!1)(x!1) - (M!1 * v2!1)(x!1)") (("1" (replace -1) (("1" (assert) (("1" (hide -1) (("1" (hide 2) (("1" (expand "*") (("1" (assert) (("1" (lemma "sigma_eq[below[n]]") (("1" (inst -1 "LAMBDA (k: below(n)): M!1`matrix(x!1, k) * (v1!1 - v2!1)(k)" "LAMBDA (k: below(n)): M!1`matrix(x!1, k) * v1!1(k) -M!1`matrix(x!1,k)* v2!1(k)" "n-1" "0") (("1" (case "(FORALL (n1: subrange(0, n - 1)):
         M!1`matrix(x!1, n1) * (v1!1 - v2!1)(n1) =
          M!1`matrix(x!1, n1) * v1!1(n1) - M!1`matrix(x!1, n1) * v2!1(n1))") (("1" (assert) (("1" (name "ff" " (FORALL (n1: subrange(0, n - 1)):
         M!1`matrix(x!1, n1) * (v1!1 - v2!1)(n1) =
          M!1`matrix(x!1, n1) * v1!1(n1) - M!1`matrix(x!1, n1) * v2!1(n1))") (("1" (replace -1) (("1" (assert) (("1" (replace -3) (("1" (hide -1 -2 -3) (("1" (lemma "sigma_minus[below[n]]") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (hide 2) (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2 3) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (left_distributive_vect_n-1 nil 3520614738 ("" (skosimp) (("" (apply-extensionality) (("" (expand "*" 1) (("" (hide 2) (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) ((- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil) (T_low type-eq-decl nil sigma "reals/") (T_high type-eq-decl nil sigma "reals/") (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (sigma_minus formula-decl nil sigma "reals/") (subrange type-eq-decl nil integers nil) (below type-eq-decl nil nat_types nil) (sigma_eq formula-decl nil sigma "reals/") (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (sigma def-decl "real" sigma "reals/") (below type-eq-decl nil naturalnumbers nil) (Matrix type-eq-decl nil matrices nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (Mat type-eq-decl nil matrices nil) (Vector type-eq-decl nil vectors "vectors/") (* const-decl "Vector[n]" ellipsoid nil) (- const-decl "real" vectors "vectors/") (Index type-eq-decl nil vectors "vectors/") (n formal-const-decl "posnat" ellipsoid nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) shostak))("matrices" matrices transpose_product_n_TCC2 0 (transpose_product_n_TCC2-1 nil 3520614891 ("" (subtype-tcc) nil nil) ((transpose const-decl "Matrix" matrices nil)) nil))("matrix_operator" matrix_operator inv_mat 0 (inv_mat-1 nil 3520163847 ("" (skosimp) (("" (lemma "map_matrix_bij") (("" (inst?) (("" (swap-rel -1) (("" (replace -1 -2) (("" (expand "invertible?") (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("matrix_operator" matrix_operator one_to_one 0 (one_to_one-1 nil 3520676541 ("" (skosimp) (("" (split) (("1" (flatten) (("1" (postpone) nil nil)) nil) ("2" (flatten) (("2" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("matrix_operator" matrix_operator one_to_one_TCC1 0 (one_to_one_TCC1-1 nil 3520675951 ("" (subtype-tcc) nil nil) ((int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil)) nil))("matrix_operator" matrix_operator equa_sol_TCC7 0 (equa_sol_TCC7-1 nil 3520766497 ("" (subtype-tcc) nil nil) ((squareMat? const-decl "bool" matrices nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator equa_sol_TCC6 0 (equa_sol_TCC6-1 nil 3520766497 ("" (subtype-tcc) nil nil) ((squareMat? const-decl "bool" matrices nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator map_matrix_bij_inv_TCC2 0 (map_matrix_bij_inv_TCC2-1 nil 3520766497 ("" (subtype-tcc) nil nil) ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator bijec_prod_TCC4 0 (bijec_prod_TCC4-1 nil 3520766497 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (* const-decl "Matrix" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator bijec_prod_TCC3 0 (bijec_prod_TCC3-1 nil 3520766497 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator equa_sol_TCC7 0 (equa_sol_TCC7-1 nil 3520849535 ("" (subtype-tcc) nil nil) ((squareMat? const-decl "bool" matrices nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator equa_sol_TCC6 0 (equa_sol_TCC6-1 nil 3520849535 ("" (subtype-tcc) nil nil) ((squareMat? const-decl "bool" matrices nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator map_matrix_bij_inv_TCC2 0 (map_matrix_bij_inv_TCC2-1 nil 3520849535 ("" (subtype-tcc) nil nil) ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator bijec_prod_TCC4 0 (bijec_prod_TCC4-1 nil 3520849535 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (* const-decl "Matrix" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator bijec_prod_TCC3 0 (bijec_prod_TCC3-1 nil 3520849535 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator inv_mat_TCC1 0 (inv_mat_TCC1-1 nil 3520849535 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (square? const-decl "bool" matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (I const-decl "(identity?)" matrices nil) (* const-decl "Matrix" matrices nil) (= const-decl "[T, T -> boolean]" equalities nil) (inverse? const-decl "bool" matrices nil) (squareMat? const-decl "bool" matrices nil) (invertible? const-decl "bool" matrices nil)) nil))("matrices" matrices transpose_product_n_TCC1 0 (transpose_product_n_TCC1-1 nil 3520614891 ("" (subtype-tcc) nil nil) nil nil))("matrix_operator" matrix_operator inv_bijec 0 (inv_bijec-1 nil 3521196156 ("" (skosimp) (("" (split) (("1" (flatten) (("1" (expand "bijective?") (("1" (split) (("1" (expand "injective?") (("1" (skosimp) (("1" (expand "inverse?") (("1" (copy -2) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil) nil shostak))("matrix_operator" matrix_operator bijec_transpose 0 (bijec_transpose-1 nil 3519909782 ("" (skosimp) (("" (expand "bijective?") (("" (expand "bijective?") (("" (split) (("1" (flatten) (("1" (expand "injective?") (("1" (skosimp) (("1" (inst -4 "x1!1" "x2!1") (("1" (lemma "T_matr") (("1" (copy -1) (("1" (case "T(n!1, n!1)(A!1)`mp(x1!1) = T(n!1, n!1)(A!1)`mp(x2!1)") (("1" (assert) nil nil) ("2" (inst -1 "n!1" "n!1" "A!1" "x1!1") (("2" (replace -1) (("2" (copy -2) (("2" (inst -3 "n!1" "n!1" "A!1" "x2!1") (("2" (replace -3) (("2" (assert) (("2" (hide -2 -3) (("2" (inst -1 "n!1" "n!1" "transpose(A!1)" "x1!1") (("2" (replace -1) (("2" (lemma "T_matr") (("2" (inst -1 "n!1" "n!1" "transpose(A!1)" "x2!1") (("2" (replace -1) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skosimp) (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil) nil shostak))("matrix_operator" matrix_operator bijec_transpose_TCC1 0 (bijec_transpose_TCC1-1 nil 3519569484 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (transpose const-decl "Matrix" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator equa_sol_TCC7 0 (equa_sol_TCC7-1 nil 3521196058 ("" (subtype-tcc) nil nil) ((squareMat? const-decl "bool" matrices nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator equa_sol_TCC6 0 (equa_sol_TCC6-1 nil 3521196058 ("" (subtype-tcc) nil nil) ((squareMat? const-decl "bool" matrices nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator tran_inv_oper_TCC2 0 (tran_inv_oper_TCC2-1 nil 3521199219 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator bijec_transpose_TCC2 0 (bijec_transpose_TCC2-1 nil 3521199219 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (transpose const-decl "Matrix" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator tran_inv_TCC4 0 (tran_inv_TCC4-1 nil 3521198995 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (transpose const-decl "Matrix" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator map_matrix_bij_inv_TCC2 0 (map_matrix_bij_inv_TCC2-1 nil 3521196058 ("" (subtype-tcc) nil nil) ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator bijec_prod_TCC4 0 (bijec_prod_TCC4-1 nil 3521196058 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (* const-decl "Matrix" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator bijec_prod_TCC3 0 (bijec_prod_TCC3-1 nil 3521196058 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator inv_mat_TCC1 0 (inv_mat_TCC1-1 nil 3521196058 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (square? const-decl "bool" matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (squareMat? const-decl "bool" matrices nil) (* const-decl "Matrix" matrices nil) (I const-decl "(identity?)" matrices nil) (inverse? const-decl "bool" matrices nil) (invertible? const-decl "bool" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator equa_sol_TCC7 0 (equa_sol_TCC7-1 nil 3521281729 ("" (subtype-tcc) nil nil) nil nil))("matrix_operator" matrix_operator equa_sol_TCC6 0 (equa_sol_TCC6-1 nil 3521281729 ("" (subtype-tcc) nil nil) nil nil))("matrix_operator" matrix_operator map_matrix_bij_inv_TCC2 0 (map_matrix_bij_inv_TCC2-1 nil 3521281729 ("" (subtype-tcc) nil nil) nil nil))("matrix_operator" matrix_operator bijec_prod_TCC4 0 (bijec_prod_TCC4-1 nil 3521281729 ("" (subtype-tcc) nil nil) nil nil))("matrix_operator" matrix_operator bijec_prod_TCC3 0 (bijec_prod_TCC3-1 nil 3521281729 ("" (subtype-tcc) nil nil) nil nil))("matrix_operator" matrix_operator inv_mat_TCC1 0 (inv_mat_TCC1-1 nil 3521281729 ("" (subtype-tcc) nil nil) nil nil))("matrix_operator" matrix_operator inv_uni_TCC4 0 (inv_uni_TCC4-1 nil 3521284334 ("" (subtype-tcc) nil nil) nil nil))("matrix_operator" matrix_operator inv_uni_TCC3 0 (inv_uni_TCC3-1 nil 3521284334 ("" (subtype-tcc) nil nil) nil nil))("matrix_operator" matrix_operator inv_uni_TCC2 0 (inv_uni_TCC2-1 nil 3521284334 ("" (subtype-tcc) nil nil) nil nil))("matrix_operator" matrix_operator inv_uni_TCC1 0 (inv_uni_TCC1-1 nil 3521284334 ("" (subtype-tcc) nil nil) nil nil))("matrix_operator" matrix_operator inv_mat 0 (inv_mat-1 nil 3520849566 ("" (skosimp) (("" (skosimp) (("" (lemma "Iso") (("" (inst?) (("" (inst?) (("" (expand "bijective?" -1) (("" (flatten) (("" (expand "surjective?") (("" (copy -2) (("" (inst -1 "N!1") (("1" (skosimp) (("1" (swap-rel -1) (("1" (replace -1) (("1" (lemma "map_matrix_bij") (("1" (inst -1 "n!1" "n!1" "M!1") (("1" (swap-rel -1) (("1" (replace -1 -6) (("1" (hide -4) (("1" (expand "inverse?") (("1" (flatten) (("1" (lemma "comp_mult") (("1" (inst?) (("1" (swap-rel -1) (("1" (replace -1) (("1" (lemma "iso_ide_L") (("1" (case "L(n!1, n!1)(T(n!1, n!1)(M!1))`rows=n!1") (("1" (replace -1) (("1" (inst -2 "n!1") (("1" (swap-rel -2) (("1" (replace -2) (("1" (expand "injective?") (("1" (inst?) (("1" (assert) (("1" (case "inverse?(T(n!1,n!1)(M!1)`mp,x!1`mp)") (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil) ("3" (skosimp) (("3" (grind) nil nil)) nil) ("4" (skosimp) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("matrix_operator" matrix_operator equa_sol_TCC7 0 (equa_sol_TCC7-1 nil 3521297390 ("" (subtype-tcc) nil nil) ((squareMat? const-decl "bool" matrices nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator equa_sol_TCC6 0 (equa_sol_TCC6-1 nil 3521297390 ("" (subtype-tcc) nil nil) ((squareMat? const-decl "bool" matrices nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator map_matrix_bij_inv_TCC2 0 (map_matrix_bij_inv_TCC2-1 nil 3521297390 ("" (subtype-tcc) nil nil) ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("matrix_operator" matrix_operator bijec_prod_TCC4 0 (bijec_prod_TCC4-1 nil 3521297390 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (* const-decl "Matrix" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("matrix_operator" matrix_operator bijec_prod_TCC3 0 (bijec_prod_TCC3-1 nil 3521297390 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (Square type-eq-decl nil matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (squareMat? const-decl "bool" matrices nil) (square? const-decl "bool" matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_times_real_is_real application-judgement "real" reals nil)) nil))("sig" sigma_vector SigmaV_last 0 (SigmaV_last-1 nil 3490008040 ("" (skosimp) (("" (lemma "extensionality[below[n],real]") (("" (inst -1 "SigmaV(low!1, high!1, F!1)" "SigmaV(low!1, high!1 - 1, F!1) + F!1(high!1)") (("" (name "ff" "(FORALL (x: below[n]):
         SigmaV(low!1, high!1, F!1)(x) =
          (SigmaV(low!1, high!1 - 1, F!1) + F!1(high!1))(x))") (("" (replace -1) (("" (case "ff") (("1" (assert) nil nil) ("2" (expand "ff" 1) (("2" (skosimp) (("2" (assert) (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((below type-eq-decl nil nat_types nil) (n formal-const-decl "posnat" sigma_vector nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (extensionality formula-decl nil functions nil) (= const-decl "[T, T -> boolean]" equalities nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (sigma def-decl "real" sigma "reals/") (ff skolem-const-decl "boolean" sigma_vector nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "real" vectors "vectors/") (SigmaV const-decl "Vector[n]" sigma_vector nil) (Vector type-eq-decl nil vectors "vectors/") (Index type-eq-decl nil vectors "vectors/") (T_high type-eq-decl nil sigma "reals/") (T_low type-eq-decl nil sigma "reals/") (<= const-decl "bool" reals nil) (T formal-subtype-decl nil sigma_vector nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak))("sig" sigma_vector SigmaV_last_TCC2 0 (tcc "tcc" 3490007796 ("" (skosimp) (("" (lemma "T_pred_lem[T]") (("" (inst -1 "high!1" "low!1" "high!1") (("" (assert) nil nil)) nil)) nil)) nil) ((T formal-subtype-decl nil sigma_vector nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (T_pred_lem formula-decl nil sigma "reals/") (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (T_low type-eq-decl nil sigma "reals/") (T_high type-eq-decl nil sigma "reals/") (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil)) shostak) (SigmaV_last_TCC2-1 nil 3490006858 ("" (subtype-tcc) nil nil) ((T formal-subtype-decl nil sigma_vector nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (T_pred_lem formula-decl nil sigma "reals/") (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (T_low type-eq-decl nil sigma "reals/") (T_high type-eq-decl nil sigma "reals/") (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil)) nil))("sig" sigma_vector SigmaV_last_TCC1 0 (tcc "tcc" 3490007925 ("" (skosimp) (("" (lemma "T_pred_lem[T]") (("" (inst -1 "high!1" "low!1" "high!1-1") (("" (assert) (("" (grind) (("" (lemma "T_pred_lem[T]") (("" (inst -1 "high!1" "low!1" "low!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((T formal-subtype-decl nil sigma_vector nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (T_pred_lem formula-decl nil sigma "reals/") (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (low!1 skolem-const-decl "T_low[T]" sigma_vector nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (T_low type-eq-decl nil sigma "reals/") (T_high type-eq-decl nil sigma "reals/") (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (int_minus_int_is_int application-judgement "int" integers nil)) shostak) (SigmaV_last_TCC1-1 nil 3490006858 ("" (skosimp) (("" (lemma "connected_domain") (("" (inst -1 "low!1" "high!1" "high!1-1") (("1" (assert) (("1" (grind) (("1" (lemma "connected_domain") (("1" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil) ((T formal-subtype-decl nil sigma_vector nil) (T_pred const-decl "[int -> boolean]" sigma_vector nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (T_pred_lem formula-decl nil sigma "reals/") (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (T_low type-eq-decl nil sigma "reals/") (T_high type-eq-decl nil sigma "reals/") (<= const-decl "bool" reals nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("sig" sigma_vector SigmaV_last_TCC2 0 (SigmaV_last_TCC2-1 nil 3521309839 ("" (subtype-tcc) nil nil) nil nil))("sig" sigma_vector SigmaV_last_TCC1 0 (SigmaV_last_TCC1-1 nil 3521309839 ("" (subtype-tcc) nil nil) nil nil))("ellipsoid" ellipsoid thm1 0 (thm1-1 nil 3526075073 ("" (postpone) nil nil) nil shostak))("ellipsoid" ellipsoid thm1_TCC6 0 (thm1_TCC6-1 nil 3526075051 ("" (subtype-tcc) nil nil) ((same_dim? const-decl "bool" matrices nil) (same_dim? const-decl "bool" matrices nil)) nil))("ellipsoid" ellipsoid thm1_TCC5 0 (thm1_TCC5-1 nil 3526075051 ("" (subtype-tcc) nil nil) nil nil))("ellipsoid" ellipsoid thm1_TCC4 0 (thm1_TCC4-1 nil 3526075051 ("" (subtype-tcc) nil nil) nil nil))("ellipsoid" ellipsoid thm1_TCC3 0 (thm1_TCC3-1 nil 3526075051 ("" (subtype-tcc) nil nil) ((same_dim? const-decl "bool" matrices nil) (same_dim? const-decl "bool" matrices nil)) nil))("ellipsoid" ellipsoid thm1_TCC2 0 (thm1_TCC2-1 nil 3526075051 ("" (subtype-tcc) nil nil) nil nil))("ellipsoid" ellipsoid thm1_TCC1 0 (thm1_TCC1-1 nil 3526075051 ("" (subtype-tcc) nil nil) nil nil))("ellipsoid" ellipsoid ellipsoid_TCC13 0 (ellipsoid_TCC13-1 nil 3520826443 ("" (subtype-tcc) nil nil) ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator nil) (injective? const-decl "bool" functions nil) (surjective? const-decl "bool" functions nil) (bijective? const-decl "bool" functions nil) (bijective? const-decl "bool" linear_map nil) (inverse const-decl "Maping" linear_map nil) (inverse const-decl "D" function_inverse nil) (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator nil) (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator nil) (- const-decl "real" vectors "vectors/") (* const-decl "Vector[M`rows]" matrices nil) (* const-decl "real" vectors "vectors/") (transpose const-decl "Matrix" matrices nil) (* const-decl "Matrix" matrices nil) (real_minus_real_is_real application-judgement "real" reals nil) (minus_odd_is_odd application-judgement "odd_int" integers nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("convex_def" convex_def sigma_below_shift_TCC7 0 (sigma_below_shift_TCC7-1 nil 3531200814 ("" (assuming-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (integer nonempty-type-from-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("convex_def" convex_def sigma_below_shift_TCC6 0 (sigma_below_shift_TCC6-1 nil 3531200814 ("" (subtype-tcc) nil nil) nil nil))("convex_def" convex_def sigma_restrict_dom2_TCC6 0 (sigma_restrict_dom2_TCC6-1 nil 3531200814 ("" (assuming-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (integer nonempty-type-from-decl nil integers nil) (below type-eq-decl nil nat_types nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil)) nil))("convex_def" convex_def sigma_restrict_dom2_TCC5 0 (sigma_restrict_dom2_TCC5-1 nil 3531198964 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("convex_def" convex_def sigma_restrict_dom_TCC7 0 (sigma_restrict_dom_TCC7-1 nil 3529400008 ("" (assuming-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (integer nonempty-type-from-decl nil integers nil) (below type-eq-decl nil nat_types nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil)) nil))("convex_def" convex_def sigma_restrict_dom_TCC6 0 (sigma_restrict_dom_TCC6-1 nil 3529400008 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("matrices" matrices sigma_lem_TCC3 0 (sigma_lem_TCC3-1 nil 3520779321 ("" (assuming-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (> const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posnat nonempty-type-eq-decl nil integers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (integer nonempty-type-from-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("matrices" matrices times_TCC6 0 (times_TCC6-1 nil 3520779321 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (Matrix type-eq-decl nil matrices nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("block_matrices" block_matrices semidef_pos?_TCC1 0 (semidef_pos?_TCC1-1 nil 3537770523 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (posnat nonempty-type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (real nonempty-type-from-decl nil reals nil) (Matrix type-eq-decl nil matrices nil) (square? const-decl "bool" matrices nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("matrices" matrices diagonal?_TCC1 0 (diagonal?_TCC1-1 nil 3547269085 ("" (subtype-tcc) nil nil) ((Matrix type-eq-decl nil matrices nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (square? const-decl "bool" matrices nil) (/= const-decl "boolean" notequal nil)) nil))("matrices" matrices lower_triangular?_TCC1 0 (lower_triangular?_TCC1-1 nil 3547269085 ("" (subtype-tcc) nil nil) ((Matrix type-eq-decl nil matrices nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (square? const-decl "bool" matrices nil)) nil))("matrices" matrices upper_triangular?_TCC1 0 (upper_triangular?_TCC1-1 nil 3547269085 ("" (subtype-tcc) nil nil) ((Matrix type-eq-decl nil matrices nil) (below type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (square? const-decl "bool" matrices nil)) nil))("elementary_matrices" elementary_matrices M1rows_TCC4 0 (M1rows_TCC4-1 nil 3552273894 ("" (subtype-tcc) nil nil) nil nil))("elementary_matrices" elementary_matrices M1rows_TCC3 0 (M1rows_TCC3-1 nil 3552273894 ("" (subtype-tcc) nil nil) nil nil))("elementary_matrices" elementary_matrices M1rows_TCC2 0 (M1rows_TCC2-1 nil 3552273894 ("" (subtype-tcc) nil nil) nil nil))("matrices" matrices m2c_lemma_TCC2 0 (m2c_lemma_TCC2-1 nil 3552309875 ("" (subtype-tcc) nil nil) nil nil))("dets" dets detM2_TCC1 0 (detM2_TCC1-1 nil 3516514257 ("" (grind) nil nil) ((length def-decl "nat" list_props nil) (list2matrix const-decl "Matrix" matrices nil) (M2 const-decl "Matrix" dets nil) (square? const-decl "bool" matrices nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) nil))("dets" dets M2_TCC1 0 (M2_TCC1-1 nil 3516514257 ("" (assert) (("" (rewrite "every_nth") (("" (skosimp :preds? t) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (expand "length") (("" (expand "length") (("" (expand "length") (("" (expand "length") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((every_nth formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nth def-decl "T" list_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) nil))("dets" dets M21_TCC1 0 (M21_TCC1-1 nil 3516514257 ("" (assert) (("" (rewrite "every_nth") (("" (skosimp :preds? t) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (expand "length") (("" (expand "length") (("" (expand "length") (("" (expand "length") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((every_nth formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nth def-decl "T" list_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) nil))("dets" dets M0_TCC1 0 (M0_TCC1-1 nil 3516514257 ("" (assert) (("" (rewrite "every_nth") (("" (skosimp :preds? t) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (expand "length") (("" (expand "length") (("" (expand "length") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((every_nth formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nth def-decl "T" list_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) nil))("dets" dets Mid_TCC1 0 (Mid_TCC1-1 nil 3516514257 ("" (assert) (("" (rewrite "every_nth") (("" (skosimp :preds? t) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (expand "length") (("" (expand "length") (("" (expand "length") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((every_nth formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nth def-decl "T" list_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) nil))("dets" dets M1_TCC1 0 (M1_TCC1-1 nil 3516514257 ("" (assert) (("" (rewrite "every_nth") (("" (skosimp :preds? t) (("" (expand "length") (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "length" -1) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (expand "length") (("" (expand "length") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((every_nth formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nth def-decl "T" list_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) nil))("dets" dets M02_TCC1 0 (M02_TCC1-1 nil 3516514257 ("" (assert) (("" (rewrite "every_nth") (("" (skosimp :preds? t) (("" (expand "length") (("" (expand "length") (("" (expand "length") (("" (expand "nth") (("" (lift-if) (("" (assert) (("" (expand "nth") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((every_nth formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nth def-decl "T" list_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) nil))("dets" dets M01_TCC1 0 (M01_TCC1-1 nil 3516514257 ("" (assert) (("" (rewrite "every_nth") (("" (skosimp :preds? t) (("" (expand "length") (("" (expand "length") (("" (expand "nth") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((every_nth formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nth def-decl "T" list_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) nil))("dets" dets M00_TCC1 0 (M00_TCC1-1 nil 3516514257 ("" (assert) (("" (rewrite "every_nth") (("" (grind) (("1" (expand "length") (("1" (lift-if) (("1" (expand "nth") (("1" (expand "nth") (("1" (expand "length") (("1" (expand "length") (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "nth") (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ((every_nth formula-decl nil list_props nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (= const-decl "[T, T -> boolean]" equalities nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (null adt-constructor-decl "(null?)" list_adt nil) (number nonempty-type-decl nil numbers nil) (list type-decl nil list_adt nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (PRED type-eq-decl nil defined_types nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (nth def-decl "T" list_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil)) nil))("elementary_matrices" elementary_matrices sigma_2_sum 0 (sigma_2_sum-1 nil 3555094782 ("" (skeep :preds? t) (("" (hide -) (("" (case "i < j") (("1" (lemma "sigma_middle[below(n)]") (("1" (inst-cp -1 "LAMBDA (x: below(n)):
              IF x = i THEN a ELSIF x = j THEN b ELSE 0 ENDIF" "n" "i" "0") (("1" (assert) (("1" (replace -2 :hide? t) (("1" (inst -1 "LAMBDA (x: below(n)):
              IF x = i THEN a ELSIF x = j THEN b ELSE 0 ENDIF" "n" "j" "i+1") (("1" (assert) (("1" (replace -1 :hide? t) (("1" (assert) (("1" (lemma "sigma_restrict_eq[below(n)]") (("1" (inst-cp -1 "LAMBDA (x: below(n)): IF x = i THEN a ELSIF x = j THEN b ELSE 0 ENDIF" "LAMBDA
(x: below(n)): 0" "i-1" "0") (("1" (split -2) (("1" (replace -1 :hide? t) (("1" (inst-cp -1 "LAMBDA (x: below(n)): IF x = i THEN a ELSIF x = j THEN b ELSE 0 ENDIF" "LAMBDA
(x: below(n)): 0" "j-1" "i+1") (("1" (split -2) (("1" (replace -1 :hide? t) (("1" (inst -1 "LAMBDA (x: below(n)): IF x = i THEN a ELSIF x = j THEN b ELSE 0 ENDIF" "LAMBDA
(x: below(n)): 0" "n" "j+1") (("1" (split -1) (("1" (replace -1 :hide? t) (("1" (rewrite "sigma_zero[below(n)]") (("1" (rewrite "sigma_zero[below(n)]") (("1" (rewrite "sigma_zero[below(n)]") nil nil)) nil)) nil)) nil) ("2" (expand "restrict") (("2" (propax) nil nil)) nil)) nil) ("2" (flatten) (("2" (inst 2 "j") (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "restrict") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (expand "restrict") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("elementary_matrices" elementary_matrices sigma_2_sum_TCC2 0 (sigma_2_sum_TCC2-1 nil 3555098717 ("" (subtype-tcc) nil nil) nil nil))("elementary_matrices" elementary_matrices sigma_2_sum_TCC1 0 (sigma_2_sum_TCC1-1 nil 3555098717 ("" (subtype-tcc) nil nil) nil nil))("elementary_matrices" elementary_matrices sigma_2_sum_lt_TCC2 0 (sigma_2_sum_lt_TCC2-1 nil 3555096296 ("" (subtype-tcc) nil nil) nil nil))("elementary_matrices" elementary_matrices sigma_2_sum_lt_TCC1 0 (sigma_2_sum_lt_TCC1-1 nil 3555096296 ("" (subtype-tcc) nil nil) nil nil))("elementary_matrices" elementary_matrices elemM1_cols 0 (elemM1_cols-1 nil 3555128358 ("" (postpone) nil nil) nil shostak))("elementary_matrices" elementary_matrices elemM1_cols_TCC4 0 (elemM1_cols_TCC4-1 nil 3555086642 ("" (subtype-tcc) nil nil) ((elemM1 const-decl "ElemMat1(n)" elementary_matrices nil) (* const-decl "Matrix" matrices nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("elementary_matrices" elementary_matrices elemM1_cols_TCC3 0 (elemM1_cols_TCC3-1 nil 3555086642 ("" (subtype-tcc) nil nil) ((elemM1 const-decl "ElemMat1(n)" elementary_matrices nil) (* const-decl "Matrix" matrices nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("elementary_matrices" elementary_matrices elemM1_cols_TCC2 0 (elemM1_cols_TCC2-1 nil 3555086642 ("" (subtype-tcc) nil nil) ((elemM1 const-decl "ElemMat1(n)" elementary_matrices nil)) nil))("elementary_matrices" elementary_matrices elemM1_cols_TCC1 0 (elemM1_cols_TCC1-1 nil 3555086642 ("" (subtype-tcc) nil nil) ((elemM1 const-decl "ElemMat1(n)" elementary_matrices nil) (* const-decl "Matrix" matrices nil) (real_times_real_is_real application-judgement "real" reals nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("sigma_vector" |sigma_vector| |SigmaV_scal_TCC2| 0 (|SigmaV_scal_TCC2-1| NIL 3546675659 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("sigma_vector" |sigma_vector| |SigmaV_scal_TCC1| 0 (|SigmaV_scal_TCC1-1| NIL 3546675659 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))