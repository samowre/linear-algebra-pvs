(matrix_operator
 (linear_inverse_map_n 0
  (thm "thm" 3520673962
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (assert)
              (("1" (expand "bijective?")
                (("1" (expand "bijective?")
                  (("1" (typepred "f!1") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil)
             ("3" (skosimp)
              (("3" (copy -1)
                (("3" (expand "bijective?" -2)
                  (("3" (expand "bijective?" -2)
                    (("3" (flatten)
                      (("3" (expand "injective?")
                        (("3"
                          (inst -2
                           " inverse(n!1)(f!1)`mp(SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))"
                           " SigmaV[below[l!1], n!1]
           (0, l!1 - 1, x!1 * (inverse(n!1)(f!1)`mp o F!1))")
                          (("1"
                            (case "(f!1`mp
           (inverse(n!1)(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))))
        =
        f!1`mp
            (SigmaV[below[l!1], n!1]
                 (0, l!1 - 1, x!1 * (inverse(n!1)(f!1)`mp o F!1)))")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (hide -2)
                                (("2"
                                  (typepred "f!1")
                                  (("2"
                                    (expand "linear_map_e?")
                                    (("2"
                                      (inst -3 "l!1")
                                      (("2"
                                        (expand "linear_map_e?")
                                        (("2"
                                          (inst
                                           -3
                                           "x!1"
                                           " (inverse(n!1)(f!1)`mp o F!1)")
                                          (("1"
                                            (replace-extensionality
                                             " f!1`mp
           (SigmaV[below[l!1], n!1]
                (0, l!1 - 1, x!1 * (inverse(n!1)(f!1)`mp o F!1)))"
                                             " SigmaV[below[l!1], n!1]
           (0, l!1 - 1, x!1 * (f!1`mp o (inverse(n!1)(f!1)`mp o F!1)))")
                                            (("1"
                                              (hide -3)
                                              (("1"
                                                (lemma
                                                 "inverse_surjective[Vector[n!1],Vector[n!1]]")
                                                (("1"
                                                  (copy -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)"
                                                     "f!1`mp")
                                                    (("1"
                                                      (expand
                                                       "inverse"
                                                       1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (case
                                                             "(f!1`mp o (inverse[Vector[n!1], Vector[n!1]](f!1`mp) o F!1)=F!1)
")
                                                            (("1"
                                                              (apply-extensionality
                                                               1)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "o")
                                                                    (("1"
                                                                      (expand
                                                                       "SigmaV")
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_eq[below[l!1]]")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           " LAMBDA (j: below[l!1]): (x!1 * F!1)(j)(x!2)"
                                                                           "LAMBDA (j: below[l!1]):
               (x!1 *
                 (LAMBDA (x_1: below[l!1]):
                    f!1`mp
                        (inverse[Vector[n!1], Vector[n!1]]
                             (f!1`mp)(F!1(x_1)))))
                   (j)(x!2)"
                                                                           "l!1-1"
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (expand
                                                                                   "*")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (apply-extensionality
                                                                 1)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "o")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "F!1(x!2)"
                                                                       "f!1`mp")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 2)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide 2)
                                                              (("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (decompose-equality -3)
                                                (("2"
                                                  (inst -1 "x!2")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "o")
                                                      (("2"
                                                        (expand
                                                         "SigmaV")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "inverse")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2) (("3" (grind) nil nil)) nil)
                             ("4" (hide 2) (("4" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((linear_map_e? const-decl "bool" linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (f!1 skolem-const-decl "Map_linear(n!1, n!1)" matrix_operator nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (O const-decl "T3" function_props nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon const-decl "T" epsilons nil)
    (l!1 skolem-const-decl "posnat" matrix_operator nil)
    (sigma def-decl "real" sigma "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (* const-decl "Vector" vectors "vectors/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (inverse const-decl "D" function_inverse nil)
    (surjective? const-decl "bool" functions nil)
    (inverse_surjective formula-decl nil function_inverse nil)
    (injective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (inverse const-decl "Maping" linear_map nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (bijective? const-decl "bool" linear_map nil))
   shostak)
  (thm "thm" 3519987486
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (assert)
              (("1" (expand "bijective?")
                (("1" (expand "bijective?")
                  (("1" (typepred "f!1") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil)
             ("3" (skosimp)
              (("3" (copy -1)
                (("3" (expand "bijective?" -2)
                  (("3" (expand "bijective?" -2)
                    (("3" (flatten)
                      (("3" (expand "injective?")
                        (("3"
                          (inst -2
                           " inverse(n!1)(f!1)`mp(SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))"
                           " SigmaV[below[l!1], n!1]
           (0, l!1 - 1, x!1 * (inverse(n!1)(f!1)`mp o F!1))")
                          (("1"
                            (case "(f!1`mp
           (inverse(n!1)(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))))
        =
        f!1`mp
            (SigmaV[below[l!1], n!1]
                 (0, l!1 - 1, x!1 * (inverse(n!1)(f!1)`mp o F!1)))")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (hide -2)
                                (("2"
                                  (typepred "f!1")
                                  (("2"
                                    (expand "linear_map_e?")
                                    (("2"
                                      (inst -3 "l!1")
                                      (("2"
                                        (expand "linear_map_e?")
                                        (("2"
                                          (inst
                                           -3
                                           "x!1"
                                           " (inverse(n!1)(f!1)`mp o F!1)")
                                          (("1"
                                            (replace-extensionality
                                             " f!1`mp
           (SigmaV[below[l!1], n!1]
                (0, l!1 - 1, x!1 * (inverse(n!1)(f!1)`mp o F!1)))"
                                             " SigmaV[below[l!1], n!1]
           (0, l!1 - 1, x!1 * (f!1`mp o (inverse(n!1)(f!1)`mp o F!1)))")
                                            (("1"
                                              (hide -3)
                                              (("1"
                                                (lemma
                                                 "inverse_surjective[Vector[n!1],Vector[n!1]]")
                                                (("1"
                                                  (copy -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)"
                                                     "f!1`mp")
                                                    (("1"
                                                      (expand
                                                       "inverse"
                                                       1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (case
                                                             "(f!1`mp o (inverse[Vector[n!1], Vector[n!1]](f!1`mp) o F!1)=F!1)
")
                                                            (("1"
                                                              (apply-extensionality
                                                               1)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "o")
                                                                    (("1"
                                                                      (expand
                                                                       "SigmaV")
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_eq[below[l!1]]")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           " LAMBDA (j: below[l!1]): (x!1 * F!1)(j)(x!2)"
                                                                           "LAMBDA (j: below[l!1]):
               (x!1 *
                 (LAMBDA (x_1: below[l!1]):
                    f!1`mp
                        (inverse[Vector[n!1], Vector[n!1]]
                             (f!1`mp)(F!1(x_1)))))
                   (j)(x!2)"
                                                                           "l!1-1"
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (expand
                                                                                   "*")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (apply-extensionality
                                                                 1)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "o")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "F!1(x!2)"
                                                                       "f!1`mp")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 2)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide 2)
                                                              (("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (decompose-equality -3)
                                                (("2"
                                                  (inst -1 "x!2")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "o")
                                                      (("2"
                                                        (expand
                                                         "SigmaV")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "inverse")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2) (("3" (grind) nil nil)) nil)
                             ("4" (hide 2) (("4" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inverse const-decl "Maping" linear_map nil)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (inverse_surjective formula-decl nil function_inverse nil)
    (surjective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors "vectors/")
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (O const-decl "T3" function_props nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Index type-eq-decl nil vectors "vectors/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (NuevasDefiniciones "Defs" 3519718025
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (assert)
              (("1" (expand "bijective?")
                (("1" (expand "bijective?")
                  (("1" (typepred "f!1") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil)
             ("3" (skosimp)
              (("3" (copy -1)
                (("3" (expand "bijective?" -2)
                  (("3" (expand "bijective?" -2)
                    (("3" (flatten)
                      (("3" (expand "injective?")
                        (("3"
                          (inst -2
                           " inverse(n!1)(f!1)`mp(SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))"
                           " SigmaV[below[l!1], n!1]
           (0, l!1 - 1, x!1 * (inverse(n!1)(f!1)`mp o F!1))")
                          (("1"
                            (case "(f!1`mp
           (inverse(n!1)(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))))
        =
        f!1`mp
            (SigmaV[below[l!1], n!1]
                 (0, l!1 - 1, x!1 * (inverse(n!1)(f!1)`mp o F!1)))")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (hide -2)
                                (("2"
                                  (typepred "f!1")
                                  (("2"
                                    (expand "linear_map_e?")
                                    (("2"
                                      (inst -3 "l!1")
                                      (("2"
                                        (expand "linear_map_e?")
                                        (("2"
                                          (inst
                                           -3
                                           "x!1"
                                           " (inverse(n!1)(f!1)`mp o F!1)")
                                          (("1"
                                            (replace-extensionality
                                             " f!1`mp
           (SigmaV[below[l!1], n!1]
                (0, l!1 - 1, x!1 * (inverse(n!1)(f!1)`mp o F!1)))"
                                             " SigmaV[below[l!1], n!1]
           (0, l!1 - 1, x!1 * (f!1`mp o (inverse(n!1)(f!1)`mp o F!1)))")
                                            (("1"
                                              (hide -3)
                                              (("1"
                                                (lemma
                                                 "inverse_surjective[Vector[n!1],Vector[n!1]]")
                                                (("1"
                                                  (copy -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)"
                                                     "f!1`mp")
                                                    (("1"
                                                      (expand
                                                       "inverse"
                                                       1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (case
                                                             "(f!1`mp o (inverse[Vector[n!1], Vector[n!1]](f!1`mp) o F!1)=F!1)
")
                                                            (("1"
                                                              (apply-extensionality
                                                               1)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "o")
                                                                    (("1"
                                                                      (expand
                                                                       "SigmaV")
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_eq[below[l!1]]")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           " LAMBDA (j: below[l!1]): (x!1 * F!1)(j)(x!2)"
                                                                           "LAMBDA (j: below[l!1]):
               (x!1 *
                 (LAMBDA (x_1: below[l!1]):
                    f!1`mp
                        (inverse[Vector[n!1], Vector[n!1]]
                             (f!1`mp)(F!1(x_1)))))
                   (j)(x!2)"
                                                                           "l!1-1"
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (expand
                                                                                   "*")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (apply-extensionality
                                                                 1)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "o")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "F!1(x!2)"
                                                                       "f!1`mp")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 2)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide 2)
                                                              (("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (decompose-equality -3)
                                                (("2"
                                                  (inst -1 "x!2")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "o")
                                                      (("2"
                                                        (expand
                                                         "SigmaV")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "inverse")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2) (("3" (grind) nil nil)) nil)
                             ("4" (hide 2) (("4" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inverse const-decl "Maping" linear_map nil)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (inverse_surjective formula-decl nil function_inverse nil)
    (surjective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors "vectors/")
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (O const-decl "T3" function_props nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Index type-eq-decl nil vectors "vectors/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (DiceGIlbertoqueCasi "LoDiceenSerio" 3519668431
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (lemma "bijective_dim")
              (("1" (inst -1 "f!1")
                (("1" (inst -2 l!1)
                  (("1" (flatten)
                    (("1" (replace -2) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "bijective_dim")
              (("2" (inst -1 f!1)
                (("2" (inst -2 l!1)
                  (("2" (flatten)
                    (("2" (replace -2) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (inst -1 "l!1")
                (("3" (flatten)
                  (("3" (copy -4)
                    (("3" (expand "bijective?" -5)
                      (("3" (flatten)
                        (("3" (expand "bijective?" -6)
                          (("3" (flatten)
                            (("3" (expand "injective?")
                              (("3"
                                (inst
                                 -6
                                 "inverse(f!1)`mp(SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))"
                                 " SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1))")
                                (("1"
                                  (case
                                   " (f!1`mp
           (inverse(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))))
        =
        f!1`mp
            (SigmaV[below[l!1], n!1]
                 (0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1)))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (inst
                                       -4
                                       "x!1"
                                       " (inverse(f!1)`mp o F!1)")
                                      (("1"
                                        (hide -6)
                                        (("1"
                                          (replace-extensionality
                                           " f!1`mp
           (SigmaV[below[l!1], n!1]
                (0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1)))"
                                           " SigmaV[below[l!1], n!1]
           (0, l!1 - 1, x!1 * (f!1`mp o (inverse(f!1)`mp o F!1)))")
                                          (("1"
                                            (expand "o")
                                            (("1"
                                              (lemma
                                               "inverse_surjective[Vector[n!1],Vector[n!1]]")
                                              (("1"
                                                (copy -1)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)"
                                                   "f!1`mp")
                                                  (("1"
                                                    (replace-extensionality
                                                     " (f!1`mp
           (inverse(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))))"
                                                     "SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)")
                                                    (("1"
                                                      (expand
                                                       "inverse"
                                                       1)
                                                      (("1"
                                                        (hide -6)
                                                        (("1"
                                                          (replace-extensionality
                                                           "(LAMBDA (x_1: below[l!1]): f!1`mp(inverse(f!1`mp)(F!1(x_1))))"
                                                           "F!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply-extensionality
                                                               1)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "(F!1(x!2))"
                                                               "f!1`mp")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (grind)
                                                                  (("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (skosimp)
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (replace
                                                                   -5)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide 2)
                                                            (("4"
                                                              (replace
                                                               -5)
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        (("2"
                                                          (inst -1 x!2)
                                                          (("2"
                                                            (expand
                                                             "SigmaV")
                                                            (("2"
                                                              (hide -2)
                                                              (("2"
                                                                (hide
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "inverse"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "*")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "*")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (replace -5)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (decompose-equality -4)
                                              (("2"
                                                (inst -1 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "o")
                                                    (("2"
                                                      (expand "SigmaV")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (lemma "bijective_dim")
                                            (("2"
                                              (inst -1 "f!1")
                                              (("2"
                                                (replace -3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (replace -2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide 2)
                                    (("4"
                                      (lemma "bijective_dim")
                                      (("4"
                                        (inst -1 f!1)
                                        (("4"
                                          (replace -3)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (replace -2)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "bijective_dim")
                                    (("2"
                                      (inst -1 "f!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (replace -4)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (Casi "CasideVerdad" 3519665165
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (lemma "bijective_dim")
              (("1" (inst -1 "f!1")
                (("1" (inst -2 l!1)
                  (("1" (flatten)
                    (("1" (replace -2) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "bijective_dim")
              (("2" (inst -1 f!1)
                (("2" (inst -2 l!1)
                  (("2" (flatten)
                    (("2" (replace -2) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (inst -1 "l!1")
                (("3" (flatten)
                  (("3" (copy -4)
                    (("3" (expand "bijective?" -5)
                      (("3" (flatten)
                        (("3" (expand "bijective?" -6)
                          (("3" (flatten)
                            (("3" (expand "injective?")
                              (("3"
                                (inst
                                 -6
                                 "inverse(f!1)`mp(SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))"
                                 " SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1))")
                                (("1"
                                  (case
                                   " (f!1`mp
           (inverse(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))))
        =
        f!1`mp
            (SigmaV[below[l!1], n!1]
                 (0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1)))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (inst
                                       -4
                                       "x!1"
                                       " (inverse(f!1)`mp o F!1)")
                                      (("1"
                                        (hide -6)
                                        (("1"
                                          (replace-extensionality
                                           " f!1`mp
           (SigmaV[below[l!1], n!1]
                (0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1)))"
                                           " SigmaV[below[l!1], n!1]
           (0, l!1 - 1, x!1 * (f!1`mp o (inverse(f!1)`mp o F!1)))")
                                          (("1"
                                            (expand "o")
                                            (("1"
                                              (lemma
                                               "inverse_surjective[Vector[n!1],Vector[n!1]]")
                                              (("1"
                                                (copy -1)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)"
                                                   "f!1`mp")
                                                  (("1"
                                                    (replace-extensionality
                                                     " (f!1`mp
           (inverse(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))))"
                                                     "SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)")
                                                    (("1"
                                                      (postpone)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        (("2"
                                                          (inst -1 x!2)
                                                          (("2"
                                                            (expand
                                                             "SigmaV")
                                                            (("2"
                                                              (hide -2)
                                                              (("2"
                                                                (hide
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "inverse"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "*")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "*")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (replace -5)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (decompose-equality -4)
                                              (("2"
                                                (inst -1 "x!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "o")
                                                    (("2"
                                                      (expand "SigmaV")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (lemma "bijective_dim")
                                            (("2"
                                              (inst -1 "f!1")
                                              (("2"
                                                (replace -3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (replace -2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide 2)
                                    (("4"
                                      (lemma "bijective_dim")
                                      (("4"
                                        (inst -1 f!1)
                                        (("4"
                                          (replace -3)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (replace -2)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "bijective_dim")
                                    (("2"
                                      (inst -1 "f!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (replace -4)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (BijectiveNueva "bijNueva" 3519664017
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (lemma "bijective_dim")
              (("1" (inst -1 "f!1")
                (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (lemma "bijective_dim")
              (("2" (inst -1 "f!1")
                (("2" (assert)
                  (("2" (inst -2 "l!1")
                    (("2" (flatten) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (inst -1 "l!1")
                (("3" (flatten)
                  (("3" (copy -4)
                    (("3" (expand "bijective?" -5)
                      (("3" (expand "bijective?" -5)
                        (("3" (flatten)
                          (("3" (expand "injective?")
                            (("3"
                              (case "f!1`mp
           (inverse(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)))
        =
        f!1`mp
            (SigmaV[below[l!1], n!1]
                 (0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1)))")
                              (("1"
                                (assert)
                                (("1" (postpone) nil nil))
                                nil)
                               ("2"
                                (hide 2 -5)
                                (("2"
                                  (inst
                                   -4
                                   "x!1"
                                   "(inverse(f!1)`mp o F!1)")
                                  (("1"
                                    (hide -2 -3)
                                    (("1"
                                      (hide -3)
                                      (("1"
                                        (expand "SigmaV" -2 1)
                                        (("1"
                                          (expand "SigmaV" 1 2)
                                          (("1"
                                            (expand "*" -2 1)
                                            (("1"
                                              (expand "*" 1 2)
                                              (("1"
                                                (expand "o" -2 1)
                                                (("1"
                                                  (expand "o" 1)
                                                  (("1"
                                                    (replace-extensionality
                                                     " f!1`mp
           (LAMBDA (i: below[n!1]):
              sigma(0, l!1 - 1,
                    LAMBDA (j: below[l!1]):
                      (x!1(j) * inverse(f!1)`mp(F!1(j)))(i)))"
                                                     "  SigmaV[below[l!1], n!1]
           (0, l!1 - 1, x!1 * (f!1`mp o (inverse(f!1)`mp o F!1)))")
                                                    (("1"
                                                      (postpone)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (skosimp)
                                                        (("3"
                                                          (lemma
                                                           "bijective_dim")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "f!1")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (typepred
                                                                     "x!2")
                                                                    (("1"
                                                                      (case
                                                                       "n!1=f!1`dom")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (typepred
                                                                           " f!1`dom")
                                                                          (("2"
                                                                            (typepred
                                                                             "n!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide 2)
                                                      (("4"
                                                        (skosimp)
                                                        (("4"
                                                          (skosimp)
                                                          (("4"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (hide 2)
                                                      (("5"
                                                        (skosimp)
                                                        (("5"
                                                          (skosimp)
                                                          (("5"
                                                            (lemma
                                                             "bijective_dim")
                                                            (("5"
                                                              (inst
                                                               -1
                                                               "f!1")
                                                              (("5"
                                                                (assert)
                                                                (("5"
                                                                  (case
                                                                   " f!1`dom=n!1")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("6"
                                                      (hide 2)
                                                      (("6"
                                                        (skosimp)
                                                        (("6"
                                                          (typepred
                                                           "i!1")
                                                          (("6"
                                                            (lemma
                                                             "bijective_dim")
                                                            (("6"
                                                              (inst
                                                               -1
                                                               "f!1")
                                                              (("6"
                                                                (case
                                                                 " f!1`dom=n!1")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (split)
                                        (("1"
                                          (lemma "bijective_dim")
                                          (("1"
                                            (inst -1 "f!1")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "bijective_dim")
                                          (("2"
                                            (inst -1 "f!1")
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (replace -2 1)
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (lemma "bijective_dim")
                                  (("4"
                                    (hide -6)
                                    (("4"
                                      (inst -1 "f!1")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (flatten)
                                          (("4"
                                            (replace -2)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (Replace-extensionality "rep-ext" 3519660046
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (lemma "bijective_dim")
              (("1" (inst -1 "f!1")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (inst -4 "l!1")
                      (("1" (flatten) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "bijective_dim")
              (("2" (inst -1 "f!1")
                (("2" (assert)
                  (("2" (inst -2 "l!1")
                    (("2" (flatten) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp)
              (("3" (inst -1 "l!1")
                (("3" (flatten)
                  (("3" (copy -4)
                    (("3" (expand "bijective?" -5)
                      (("3" (expand "bijective?" -5)
                        (("3" (flatten)
                          (("3" (expand "injective?")
                            (("3"
                              (inst -5
                               " inverse(f!1)`mp(SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))"
                               " SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1))")
                              (("1"
                                (case
                                 "f!1`mp
           (inverse(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)))
        =
        f!1`mp
            (SigmaV[below[l!1], n!1]
                 (0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1)))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2 -5)
                                  (("2"
                                    (inst
                                     -4
                                     "x!1"
                                     "(inverse(f!1)`mp o F!1)")
                                    (("1"
                                      (hide -2 -3)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (expand "SigmaV" -2 1)
                                          (("1"
                                            (expand "SigmaV" 1 2)
                                            (("1"
                                              (expand "*" -2 1)
                                              (("1"
                                                (expand "*" 1 2)
                                                (("1"
                                                  (expand "o" -2 1)
                                                  (("1"
                                                    (expand "o" 1)
                                                    (("1"
                                                      (replace-extensionality
                                                       " f!1`mp
           (LAMBDA (i: below[n!1]):
              sigma(0, l!1 - 1,
                    LAMBDA (j: below[l!1]):
                      (x!1(j) * inverse(f!1)`mp(F!1(j)))(i)))"
                                                       "  SigmaV[below[l!1], n!1]
           (0, l!1 - 1, x!1 * (f!1`mp o (inverse(f!1)`mp o F!1)))")
                                                      (("1"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (skosimp)
                                                          (("3"
                                                            (lemma
                                                             "bijective_dim")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "f!1")
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (typepred
                                                                       "x!2")
                                                                      (("1"
                                                                        (case
                                                                         "n!1=f!1`dom")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (typepred
                                                                             " f!1`dom")
                                                                            (("2"
                                                                              (typepred
                                                                               "n!1")
                                                                              (("2"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (hide 2)
                                                        (("4"
                                                          (skosimp)
                                                          (("4"
                                                            (skosimp)
                                                            (("4"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (postpone)
                                                        nil
                                                        nil)
                                                       ("6"
                                                        (hide 2)
                                                        (("6"
                                                          (skosimp)
                                                          (("6"
                                                            (typepred
                                                             "i!1")
                                                            (("6"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (split)
                                          (("1"
                                            (lemma "bijective_dim")
                                            (("1"
                                              (inst -1 "f!1")
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "bijective_dim")
                                            (("2"
                                              (inst -1 "f!1")
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (replace -2 1)
                                  (("3" (assert) nil nil))
                                  nil)
                                 ("4"
                                  (hide 2)
                                  (("4"
                                    (lemma "bijective_dim")
                                    (("4"
                                      (hide -6)
                                      (("4"
                                        (inst -1 "f!1")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (flatten)
                                            (("4"
                                              (replace -2)
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (replace -2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (lemma "bijective_dim")
                                  (("3"
                                    (inst -1 "f!1")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (replace -2)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (Otra "mas" 3519653941
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (postpone) nil nil) ("2" (postpone) nil nil)
             ("3" (skosimp)
              (("3" (inst -1 "l!1")
                (("3" (flatten)
                  (("3" (expand "bijective?")
                    (("3" (expand "bijective?")
                      (("3" (flatten)
                        (("3" (expand "injective?")
                          (("3"
                            (inst -4
                             " inverse(f!1)`mp(SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))"
                             " SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1))")
                            (("1"
                              (case "f!1`mp
           (inverse(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)))
        =
        f!1`mp
            (SigmaV[below[l!1], n!1]
                 (0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1)))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (hide -4)
                                  (("2"
                                    (inst
                                     -3
                                     "x!1"
                                     "(inverse(f!1)`mp o F!1)")
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (expand "SigmaV" -1 1)
                                          (("1"
                                            (expand "SigmaV" 1 2)
                                            (("1"
                                              (expand "*" -1 1)
                                              (("1"
                                                (expand "*" 1 2)
                                                (("1"
                                                  (expand "o" -1 1)
                                                  (("1"
                                                    (expand "o" 1)
                                                    (("1"
                                                      (expand
                                                       "inverse")
                                                      (("1"
                                                        (expand
                                                         "inverse"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "inverse"
                                                           1
                                                           2)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (case
                                                               " f!1`mp
          ((epsilon! (x: Vector[f!1`dom]):
              f!1`mp(x) = SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)))= SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (name
                                                                     "pp"
                                                                     " x!1 * (f!1`mp o (inverse(f!1`mp) o F!1))")
                                                                    (("1"
                                                                      (apply-extensionality
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (case
                                                                             " f!1`mp
             ((epsilon! (x: Vector[f!1`dom]): f!1`mp(x) = F!1(l!1 - 1)))
             (x!2)= F!1(l!1 - 1)
             (x!2)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (name
                                                                                   "dd"
                                                                                   "LAMBDA (j: below[l!1]):
               x!1(j) *
                f!1`mp
                    ((epsilon! (x: Vector[f!1`dom]): f!1`mp(x) = F!1(j)))
                    (x!2)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "sigma_eq[below[l!1]]")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "LAMBDA (j: below[l!1]): x!1(j) * F!1(j)(x!2)"
                                                                                         "dd"
                                                                                         "l!1-2"
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (skosimp)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "dd")
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     " f!1`mp((epsilon! (x: Vector[f!1`dom]): f!1`mp(x) = F!1(n!2)))(x!2)= F!1(n!2)(x!2)")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "inverse_surjective[Vector[n!1],Vector[n!1]]")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           " F!1(n!2)"
                                                                                                           " f!1`mp")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "inverse_surjective[Vector[f!1`dom],Vector[f!1`codom]]")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               " F!1(n!2)"
                                                                                                               "f!1`mp")
                                                                                                              (("1"
                                                                                                                (decompose-equality)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   x!2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "inverse"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (skosimp)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "inverse(f!1`mp)(y!1)")
                                                                                                                    (("2"
                                                                                                                      (postpone)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("3"
                                                                                                                  (skosimp)
                                                                                                                  (("3"
                                                                                                                    (postpone)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (postpone)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "surjective?")
                                (("3" (postpone) nil nil))
                                nil)
                               ("4" (postpone) nil nil))
                              nil)
                             ("2" (postpone) nil nil)
                             ("3" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (rename "name" 3519653479
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (postpone) nil nil) ("2" (postpone) nil nil)
             ("3" (skosimp)
              (("3" (inst -1 "l!1")
                (("3" (flatten)
                  (("3" (expand "bijective?")
                    (("3" (expand "bijective?")
                      (("3" (flatten)
                        (("3" (expand "injective?")
                          (("3"
                            (inst -4
                             " inverse(f!1)`mp(SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))"
                             " SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1))")
                            (("1"
                              (case "f!1`mp
           (inverse(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)))
        =
        f!1`mp
            (SigmaV[below[l!1], n!1]
                 (0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1)))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (hide -4)
                                  (("2"
                                    (inst
                                     -3
                                     "x!1"
                                     "(inverse(f!1)`mp o F!1)")
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (expand "SigmaV" -1 1)
                                          (("1"
                                            (expand "SigmaV" 1 2)
                                            (("1"
                                              (expand "*" -1 1)
                                              (("1"
                                                (expand "*" 1 2)
                                                (("1"
                                                  (expand "o" -1 1)
                                                  (("1"
                                                    (expand "o" 1)
                                                    (("1"
                                                      (expand
                                                       "inverse")
                                                      (("1"
                                                        (expand
                                                         "inverse"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "inverse"
                                                           1
                                                           2)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (case
                                                               " f!1`mp
          ((epsilon! (x: Vector[f!1`dom]):
              f!1`mp(x) = SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)))= SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (name
                                                                     "pp"
                                                                     " x!1 * (f!1`mp o (inverse(f!1`mp) o F!1))")
                                                                    (("1"
                                                                      (apply-extensionality
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (case
                                                                             " f!1`mp
             ((epsilon! (x: Vector[f!1`dom]): f!1`mp(x) = F!1(l!1 - 1)))
             (x!2)= F!1(l!1 - 1)
             (x!2)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (name
                                                                                   "ll"
                                                                                   "LAMBDA (j: below[l!1]):
               x!1(j) *
                f!1`mp
                    ((epsilon! (x: Vector[f!1`dom]): f!1`mp(x) = F!1(j)))
                    (x!2)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "sigma_eq[below[l!1-1]]")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         " LAMBDA (j: below[l!1]): x!1(j) * F!1(j)(x!2)"
                                                                                         "ll"
                                                                                         "l!1-2"
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil)
                                                                                         ("4"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil)
                                                                                         ("5"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (postpone) nil nil)
                               ("4" (postpone) nil nil))
                              nil)
                             ("2" (postpone) nil nil)
                             ("3" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (por "sustgrind" 3519652449
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (postpone) nil nil) ("2" (postpone) nil nil)
             ("3" (skosimp)
              (("3" (inst -1 "l!1")
                (("3" (flatten)
                  (("3" (expand "bijective?")
                    (("3" (expand "bijective?")
                      (("3" (flatten)
                        (("3" (expand "injective?")
                          (("3"
                            (inst -4
                             " inverse(f!1)`mp(SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))"
                             " SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1))")
                            (("1"
                              (case "f!1`mp
           (inverse(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)))
        =
        f!1`mp
            (SigmaV[below[l!1], n!1]
                 (0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1)))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (hide -4)
                                  (("2"
                                    (inst
                                     -3
                                     "x!1"
                                     "(inverse(f!1)`mp o F!1)")
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (expand "SigmaV" -1 1)
                                          (("1"
                                            (expand "SigmaV" 1 2)
                                            (("1"
                                              (expand "*" -1 1)
                                              (("1"
                                                (expand "*" 1 2)
                                                (("1"
                                                  (expand "o" -1 1)
                                                  (("1"
                                                    (expand "o" 1)
                                                    (("1"
                                                      (expand
                                                       "inverse")
                                                      (("1"
                                                        (expand
                                                         "inverse"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "inverse"
                                                           1
                                                           2)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (postpone) nil nil)
                               ("4" (postpone) nil nil))
                              nil)
                             ("2" (postpone) nil nil)
                             ("3" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (linear_inverse_map_n-1 nil 3519647208
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (postpone) nil nil) ("2" (postpone) nil nil)
             ("3" (skosimp)
              (("3" (inst -1 "l!1")
                (("3" (flatten)
                  (("3" (expand "bijective?")
                    (("3" (expand "bijective?")
                      (("3" (flatten)
                        (("3" (expand "injective?")
                          (("3"
                            (inst -4
                             " inverse(f!1)`mp(SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1))"
                             " SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1))")
                            (("1"
                              (case "f!1`mp
           (inverse(f!1)`mp
                (SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)))
        =
        f!1`mp
            (SigmaV[below[l!1], n!1]
                 (0, l!1 - 1, x!1 * (inverse(f!1)`mp o F!1)))")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (hide -4)
                                  (("2"
                                    (inst
                                     -3
                                     "x!1"
                                     "(inverse(f!1)`mp o F!1)")
                                    (("1" (postpone) nil nil)
                                     ("2" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (postpone) nil nil)
                               ("4" (postpone) nil nil))
                              nil)
                             ("2" (postpone) nil nil)
                             ("3" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (linear_comp_TCC1 0
  (linear_comp_TCC1-1 nil 3519717217 ("" (subtype-tcc) nil nil)
   ((same? const-decl "bool" linear_map nil)) nil))
 (linear_comp 0
  (linear_comp-1 nil 3519726821
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (typepred "g!1")
        (("" (expand "linear_map_e?")
          (("" (skosimp)
            (("" (expand "linear_map_e?")
              (("" (split)
                (("1" (assert) (("1" (grind) nil nil)) nil)
                 ("2" (grind) nil nil)
                 ("3" (skosimp)
                  (("3" (expand "o" 1)
                    (("3" (expand "o" 1)
                      (("3" (inst -3 "l!2")
                        (("3" (inst -3 "x!1" "F!1")
                          (("3" (replace -3)
                            (("3" (inst -6 "l!2")
                              (("3"
                                (inst -6 "x!1" "g!1`mp o F!1")
                                (("1"
                                  (expand "o" -6)
                                  (("1"
                                    (expand "o" 1)
                                    (("1"
                                      (expand "SigmaV")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (hide 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (l!2 skolem-const-decl "posnat" matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (m!1 skolem-const-decl "posnat" matrix_operator nil)
    (g!1 skolem-const-decl "Map_linear(n!1, m!1)" matrix_operator nil)
    (O const-decl "T3" function_props nil)
    (O const-decl "Maping" linear_map nil))
   shostak))
 (linear_matrix_TCC1 0
  (linear_matrix_TCC1-1 nil 3519051742 ("" (subtype-tcc) nil nil) nil
   nil))
 (linear_matrix_TCC2 0
  (linear_matrix_TCC2-1 nil 3519051742 ("" (subtype-tcc) nil nil) nil
   nil))
 (linear_matrix_TCC3 0
  (linear_matrix_TCC3-1 nil 3519051742 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (integer nonempty-type-from-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (linear_matrix_TCC4 0
  (linear_matrix_TCC4-1 nil 3547201813 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (linear_matrix 0
  (thm "thm" 3520180838
   ("" (skosimp)
    (("" (expand "SigmaV")
      (("" (apply-extensionality 1)
        (("1" (hide 2)
          (("1" (expand "*")
            (("1" (lemma "sigma_prop")
              (("1"
                (inst -1 "A!1`cols" "l!1" " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k)"
                 "LAMBDA(k:below[A!1`cols],j: below[l!1]): F!1(j)(k)")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (lemma "sigma_comm")
                      (("1"
                        (inst -1 "A!1`cols" "l!1"
                         " LAMBDA (i: below(A!1`cols),j_1:below[l!1]):
                      A!1`matrix(x!1, i) * F!1(j_1)(i)")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (assert) (("2" (skosimp) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("3" (skosimp) (("3" (grind) nil nil)) nil)
         ("4" (skosimp) (("4" (grind) nil nil)) nil)
         ("5" (skosimp) (("5" (skosimp) (("5" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((SigmaV const-decl "Vector[n]" sigma_vector nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_prop formula-decl nil matrices nil)
    (sigma_comm formula-decl nil matrices nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (m!1 skolem-const-decl "posnat" matrix_operator nil)
    (below type-eq-decl nil nat_types nil)
    (l!1 skolem-const-decl "posnat" matrix_operator nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (A!1 skolem-const-decl "Mat(n!1, m!1)" matrix_operator nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Mat type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (thm "thm" 3519987399
   ("" (skosimp)
    (("" (expand "SigmaV")
      (("" (apply-extensionality 1)
        (("1" (hide 2)
          (("1" (expand "*")
            (("1" (lemma "sigma_prop")
              (("1"
                (inst -1 "A!1`cols" "l!1" " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k)"
                 "LAMBDA(k:below[A!1`cols],j: below[l!1]): F!1(j)(k)")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (lemma "sigma_comm")
                      (("1"
                        (inst -1 "A!1`cols" "l!1"
                         " LAMBDA (i: below(A!1`cols),j_1:below[l!1]):
                      A!1`matrix(x!1, i) * F!1(j_1)(i)")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (assert)
            (("2" (skosimp)
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (skosimp) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (Mat type-eq-decl nil matrices nil)
    (Index type-eq-decl nil vectors "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_comm formula-decl nil matrices nil)
    (sigma_prop formula-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil))
   shostak)
  (thm "thm" 3519620371
   ("" (skosimp)
    (("" (expand "SigmaV")
      (("" (apply-extensionality 1)
        (("1" (hide 2)
          (("1" (expand "*")
            (("1" (lemma "sigma_prop")
              (("1"
                (inst -1 "A!1`cols" "l!1" " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k)"
                 "LAMBDA(k:below[A!1`cols],j: below[l!1]): F!1(j)(k)")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (lemma "sigma_comm")
                      (("1"
                        (inst -1 "A!1`cols" "l!1"
                         " LAMBDA (i: below(A!1`cols),j_1:below[l!1]):
                      A!1`matrix(x!1, i) * F!1(j_1)(i)")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (assert) (("2" (skosimp) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("3" (skosimp) (("3" (grind) nil nil)) nil)
         ("4" (skosimp) (("4" (assert) (("4" (grind) nil nil)) nil))
          nil)
         ("5" (skosimp) (("5" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (Mat type-eq-decl nil matrices nil)
    (Index type-eq-decl nil vectors "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (below type-eq-decl nil nat_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_comm formula-decl nil matrices nil)
    (sigma_prop formula-decl nil matrices nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil))
   shostak)
  (linear_matrix-1 nil 3519054322
   ("" (skosimp)
    (("" (expand "SigmaV")
      (("" (apply-extensionality 1)
        (("1" (hide 2)
          (("1" (expand "*")
            (("1" (lemma "sigma_prop")
              (("1"
                (inst -1 "A!1`cols" "l!1" " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k)"
                 "LAMBDA(k:below[A!1`cols],j: below[l!1]): F!1(j)(k)")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (lemma "sigma_comm")
                      (("1"
                        (inst -1 "A!1`cols" "l!1"
                         " LAMBDA (i: below(A!1`cols),j_1:below[l!1]):
                      A!1`matrix(x!1, i) * F!1(j_1)(i)")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (assert)
            (("2" (skosimp)
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (skosimp) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (Mat type-eq-decl nil matrices nil)
    (Index type-eq-decl nil vectors "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_comm formula-decl nil matrices nil)
    (sigma_prop formula-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil))
   shostak))
 (equa_inv_TCC1 0
  (equa_inv_TCC1-1 nil 3521281307 ("" (subtype-tcc) nil nil)
   ((same? const-decl "bool" linear_map nil)) nil))
 (equa_inv_TCC2 0
  (equa_inv_TCC2-1 nil 3521281307 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Map type-eq-decl nil linear_map nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "Maping" linear_map nil)
    (O const-decl "Maping" linear_map nil))
   nil))
 (equa_inv_TCC3 0
  (equa_inv_TCC3-1 nil 3521281729 ("" (subtype-tcc) nil nil)
   ((O const-decl "Maping" linear_map nil)
    (id const-decl "Maping" linear_map nil)
    (same? const-decl "bool" linear_map nil))
   nil))
 (equa_inv_TCC4 0
  (equa_inv_TCC4-1 nil 3521281729 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Map type-eq-decl nil linear_map nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "Maping" linear_map nil)
    (id const-decl "Maping" linear_map nil))
   nil))
 (equa_inv 0
  (thm "thm" 3521282777
   ("" (skosimp)
    (("" (expand "bijective?")
      (("" (expand "bijective?")
        (("" (split)
          (("1" (expand "injective?")
            (("1" (skosimp)
              (("1"
                (case "(h!1 o f!1)`mp(x1!1) = (h!1 o f!1)`mp(x2!1)")
                (("1" (replace -4)
                  (("1" (assert)
                    (("1" (expand "id" -1) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil)
                 ("3" (skosimp) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "surjective?")
            (("2" (skosimp)
              (("2" (inst 1 "g!1`mp(y!1)")
                (("1"
                  (case "(f!1`mp o g!1`mp)(y!1)= f!1`mp(g!1`mp(y!1))")
                  (("1" (swap-rel -1)
                    (("1" (replace -1)
                      (("1" (expand "o" -2)
                        (("1" (replace -2)
                          (("1" (expand "id" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil)
                   ("3" (skosimp) (("3" (grind) nil nil)) nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" linear_map nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "T3" function_props nil)
    (id const-decl "Maping" linear_map nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Maping type-eq-decl nil linear_map nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (same? const-decl "bool" linear_map nil)
    (O const-decl "Maping" linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Map type-eq-decl nil linear_map nil)
    (Index type-eq-decl nil vectors "vectors/")
    (injective? const-decl "bool" functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (g!1 skolem-const-decl "Map(n!1, n!1)" matrix_operator nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak)
  (equa_inv-1 nil 3521281353
   ("" (skosimp)
    (("" (split)
      (("1" (expand "bijective?")
        (("1" (expand "bijective?")
          (("1" (split)
            (("1" (expand "injective?")
              (("1" (skosimp)
                (("1"
                  (case "(h!1 o f!1)`mp(x1!1) = (h!1 o f!1)`mp(x2!1)")
                  (("1" (replace -4)
                    (("1" (assert)
                      (("1" (expand "id" -1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil)
                   ("3" (skosimp) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "surjective?")
              (("2" (skosimp)
                (("2" (inst 1 "g!1`mp(y!1)")
                  (("1"
                    (case "(f!1`mp o g!1`mp)(y!1)= f!1`mp(g!1`mp(y!1))")
                    (("1" (swap-rel -1)
                      (("1" (replace -1)
                        (("1" (expand "o" -2)
                          (("1" (replace -2)
                            (("1" (expand "id" 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil)
                     ("3" (skosimp) (("3" (grind) nil nil)) nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil) ("3" (postpone) nil nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (injective? const-decl "bool" functions nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Map type-eq-decl nil linear_map nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (O const-decl "Maping" linear_map nil)
    (same? const-decl "bool" linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (Maping type-eq-decl nil linear_map nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "Maping" linear_map nil)
    (O const-decl "T3" function_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bijective? const-decl "bool" linear_map nil))
   shostak))
 (inv_uni 0
  (thm "thm" 3521294714
   ("" (skosimp)
    (("" (split)
      (("1" (expand "o" -1)
        (("1" (apply-extensionality 1)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (apply-extensionality 1)
            (("3"
              (lemma
               "extensionality_postulate[Vector[n!1],Vector[n!1]]")
              (("3" (inst -1 "f!1`mp o g!1`mp" "id(n!1)`mp")
                (("1"
                  (case "(FORALL (x: Vector[n!1]): (f!1`mp o g!1`mp)(x) = id(n!1)`mp(x))")
                  (("1" (assert)
                    (("1" (inst -1 "x!1")
                      (("1" (expand "o" -1)
                        (("1"
                          (case "inverse(n!1)(f!1)`mp (f!1`mp(g!1`mp(x!1))) = inverse(n!1)(f!1)`mp(id(n!1)`mp(x!1))")
                          (("1" (expand "id" -1)
                            (("1" (assert)
                              (("1"
                                (expand "inverse" -1)
                                (("1"
                                  (lemma
                                   "comp_inverse_left[Vector[n!1],Vector[n!1]]")
                                  (("1"
                                    (inst -1 "g!1`mp(x!1)" "f!1`mp")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "inverse" 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "equa_inv")
                                      (("2"
                                        (inst
                                         -1
                                         "n!1"
                                         "f!1"
                                         "g!1"
                                         "h!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "o" -1)
                                            (("2"
                                              (expand "bijective?" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp)
                                      (("3"
                                        (hide 2 3 4)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 3 4) (("2" (grind) nil nil))
                            nil)
                           ("3" (skosimp)
                            (("3" (hide 2 3 4) (("3" (grind) nil nil))
                              nil))
                            nil)
                           ("4" (hide 2 3 4) (("4" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil)
                   ("3" (hide 2 3 4) (("3" (grind) nil nil)) nil)
                   ("4" (grind) nil nil) ("5" (grind) nil nil))
                  nil)
                 ("2" (split)
                  (("1" (skosimp)
                    (("1" (assert)
                      (("1" (hide 2 3 4) (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil))
                  nil)
                 ("3" (split)
                  (("1" (hide 2 3 4) (("1" (grind) nil nil)) nil)
                   ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (apply-extensionality)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (apply-extensionality 1)
            (("3" (expand "inverse" 1)
              (("3" (assert)
                (("3"
                  (lemma
                   "extensionality_postulate[Vector[n!1],Vector[n!1]]")
                  (("3" (inst -1 "(h!1 o f!1)`mp" "id(n!1)`mp")
                    (("1"
                      (case "(FORALL (x: Vector[n!1]): (h!1 o f!1)`mp(x) = id(n!1)`mp(x))")
                      (("1" (assert)
                        (("1"
                          (inst -1
                           "inverse[Vector[n!1],Vector[n!1]](f!1`mp)(x!1)")
                          (("1" (assert)
                            (("1" (expand "id" -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "o" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "o" -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "comp_inverse_right[Vector[n!1],Vector[n!1]]")
                                          (("1"
                                            (inst -1 "x!1" "f!1`mp")
                                            (("1"
                                              (replace -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (lemma "equa_inv")
                                              (("2"
                                                (inst
                                                 -1
                                                 "n!1"
                                                 "f!1"
                                                 "g!1"
                                                 "h!1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "bijective?"
                                                     -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil)
                       ("3" (grind) nil nil)
                       ("4" (hide 2 3 4) (("4" (grind) nil nil)) nil)
                       ("5" (hide 2 3 4) (("5" (grind) nil nil)) nil))
                      nil)
                     ("2" (split)
                      (("1" (hide 2 3 4) (("1" (grind) nil nil)) nil)
                       ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (split)
                      (("1" (hide 2 3 4) (("1" (grind) nil nil)) nil)
                       ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (extensionality_postulate formula-decl nil functions nil)
    (comp_inverse_left formula-decl nil function_inverse nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equa_inv formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" linear_map nil)
    (bijective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (O const-decl "T3" function_props nil)
    (id const-decl "Maping" linear_map nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (g!1 skolem-const-decl "Map(n!1, n!1)" matrix_operator nil)
    (f!1 skolem-const-decl "Map(n!1, n!1)" matrix_operator nil)
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (O const-decl "Maping" linear_map nil)
    (comp_inverse_right formula-decl nil function_inverse nil)
    (same? const-decl "bool" linear_map nil)
    (h!1 skolem-const-decl "Map(n!1, n!1)" matrix_operator nil))
   shostak)
  (inv_uni-1 nil 3521284340
   ("" (skosimp)
    (("" (split)
      (("1" (expand "o" -1)
        (("1" (apply-extensionality 1)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (apply-extensionality 1)
            (("3"
              (lemma
               "extensionality_postulate[Vector[n!1],Vector[n!1]]")
              (("3" (inst -1 "f!1`mp o g!1`mp" "id(n!1)`mp")
                (("1"
                  (case "(FORALL (x: Vector[n!1]): (f!1`mp o g!1`mp)(x) = id(n!1)`mp(x))")
                  (("1" (assert)
                    (("1" (inst -1 "x!1")
                      (("1" (expand "o" -1)
                        (("1"
                          (case "inverse(n!1)(f!1)`mp (f!1`mp(g!1`mp(x!1))) = inverse(n!1)(f!1)`mp(id(n!1)`mp(x!1))")
                          (("1" (expand "id" -1)
                            (("1" (assert)
                              (("1"
                                (expand "inverse" -1)
                                (("1"
                                  (lemma
                                   "comp_inverse_left[Vector[n!1],Vector[n!1]]")
                                  (("1"
                                    (inst -1 "g!1`mp(x!1)" "f!1`mp")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "inverse" 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "equa_inv")
                                      (("2"
                                        (inst
                                         -1
                                         "n!1"
                                         "f!1"
                                         "g!1"
                                         "h!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "o" -1)
                                            (("2"
                                              (expand "bijective?" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp)
                                      (("3"
                                        (hide 2 3 4)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 3 4) (("2" (grind) nil nil))
                            nil)
                           ("3" (skosimp)
                            (("3" (hide 2 3 4) (("3" (grind) nil nil))
                              nil))
                            nil)
                           ("4" (hide 2 3 4) (("4" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil)
                   ("3" (hide 2 3 4) (("3" (grind) nil nil)) nil)
                   ("4" (grind) nil nil) ("5" (grind) nil nil))
                  nil)
                 ("2" (split)
                  (("1" (skosimp)
                    (("1" (assert)
                      (("1" (hide 2 3 4) (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil))
                  nil)
                 ("3" (split)
                  (("1" (hide 2 3 4) (("1" (grind) nil nil)) nil)
                   ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (apply-extensionality)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (apply-extensionality 1)
            (("3" (expand "inverse" 1)
              (("3" (assert)
                (("3"
                  (lemma
                   "extensionality_postulate[Vector[n!1],Vector[n!1]]")
                  (("3" (inst -1 "(h!1 o f!1)`mp" "id(n!1)`mp")
                    (("1"
                      (case "(FORALL (x: Vector[n!1]): (h!1 o f!1)`mp(x) = id(n!1)`mp(x))")
                      (("1" (assert)
                        (("1" (inst -1 "x!1")
                          (("1" (postpone) nil nil)) nil))
                        nil)
                       ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil)
                       ("3" (grind) nil nil)
                       ("4" (hide 2 3 4) (("4" (grind) nil nil)) nil)
                       ("5" (hide 2 3 4) (("5" (grind) nil nil)) nil))
                      nil)
                     ("2" (split)
                      (("1" (hide 2 3 4) (("1" (grind) nil nil)) nil)
                       ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (split)
                      (("1" (hide 2 3 4) (("1" (grind) nil nil)) nil)
                       ("2" (hide 2 3 4) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((same? const-decl "bool" linear_map nil)
    (comp_inverse_right formula-decl nil function_inverse nil)
    (O const-decl "Maping" linear_map nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "Maping" linear_map nil)
    (O const-decl "T3" function_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (inverse const-decl "D" function_inverse nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (equa_inv formula-decl nil matrix_operator nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (comp_inverse_left formula-decl nil function_inverse nil)
    (extensionality_postulate formula-decl nil functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (L_TCC1 0
  (L_TCC1-1 nil 3518879978 ("" (subtype-tcc) nil nil) nil nil))
 (L_TCC2 0
  (L_TCC2-1 nil 3518879978 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Map type-eq-decl nil linear_map nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (T_TCC1 0
  (T_TCC1-1 nil 3480761416 ("" (subtype-tcc) nil nil) nil nil))
 (T_TCC2 0
  (T_TCC2-1 nil 3480761416 ("" (subtype-tcc) nil nil) nil nil))
 (T_TCC3 0
  (T_TCC3-1 nil 3518879978 ("" (subtype-tcc) nil nil) nil nil))
 (T_TCC4 0
  (T_TCC4-1 nil 3518879978 ("" (subtype-tcc) nil nil) nil nil))
 (T_TCC5 0
  (T_TCC5-1 nil 3519620172 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (T_TCC6 0
  (tcc "tcc" 3520690127
       ("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (skosimp)
            (("" (expand "linear_map_e?")
              (("" (skosimp)
                (("" (apply-extensionality)
                  (("1" (hide 2)
                    (("1" (expand "SigmaV")
                      (("1" (assert)
                        (("1" (expand "o")
                          (("1" (expand "*")
                            (("1" (expand "*")
                              (("1"
                                (lemma "sigma_prop")
                                (("1"
                                  (inst
                                   -1
                                   "A!1`cols"
                                   "l!1"
                                   " LAMBDA (i: below[A!1`cols]):
             A!1`matrix(x!2, i)"
                                   "lambda(i:below[A!1`cols],j: below[l!1]): x!1(j) * F!1(j)(i)")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma "sigma_comm")
                                        (("1"
                                          (inst
                                           -1
                                           "A!1`cols"
                                           "l!1"
                                           " LAMBDA (i_1:below(A!1`cols),j_1: below(l!1)):
                      A!1`matrix(x!2, i_1) * (x!1(j_1) * F!1(j_1)(i_1))")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma "sigma_prop")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (skosimp) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((linear_map_e? const-decl "bool" linear_map_def nil)
        (linear_map_e? const-decl "bool" linear_map_def nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (< const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (below type-eq-decl nil nat_types nil)
        (O const-decl "T3" function_props nil)
        (* const-decl
           "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
           sigma_vector nil)
        (SigmaV const-decl "Vector[n]" sigma_vector nil)
        (Vector type-eq-decl nil vectors "vectors/")
        (Index type-eq-decl nil vectors "vectors/")
        (* const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (sigma def-decl "real" sigma "reals/")
        (T_high type-eq-decl nil sigma "reals/")
        (T_low type-eq-decl nil sigma "reals/")
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (m!1 skolem-const-decl "posnat" matrix_operator nil)
        (below type-eq-decl nil naturalnumbers nil)
        (Matrix type-eq-decl nil matrices nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (n!1 skolem-const-decl "posnat" matrix_operator nil)
        (Mat type-eq-decl nil matrices nil)
        (A!1 skolem-const-decl "Mat(m!1, n!1)" matrix_operator nil)
        (integer nonempty-type-from-decl nil integers nil)
        (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
        (<= const-decl "bool" reals nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (real_times_real_is_real application-judgement "real" reals
         nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (* const-decl "Vector" vectors "vectors/")
        (posint nonempty-type-eq-decl nil integers nil)
        (sigma_comm formula-decl nil matrices nil)
        (sigma_prop formula-decl nil matrices nil)
        (real_ge_is_total_order name-judgement "(total_order?[real])"
         real_props nil))
       shostak)
  (T_TCC6-1 nil 3520674133 ("" (subtype-tcc) nil nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (O const-decl "T3" function_props nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Vector" vectors "vectors/")
    (posint nonempty-type-eq-decl nil integers nil)
    (sigma_comm formula-decl nil matrices nil)
    (sigma_prop formula-decl nil matrices nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (T_matr_TCC1 0
  (T_matr_TCC1-1 nil 3519447525 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil))
   nil))
 (T_matr_TCC2 0
  (T_matr_TCC2-1 nil 3519447525 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (T_matr_TCC3 0
  (T_matr_TCC3-1 nil 3519733511 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Mat type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (T_matr 0
  (thm "thm" 3520673892
   ("" (skosimp)
    (("" (expand "T")
      (("" (apply-extensionality)
        (("1" (hide 2)
          (("1" (expand "*") (("1" (propax) nil nil)) nil)) nil)
         ("2" (skosimp) (("2" (assert) (("2" (grind) nil nil)) nil))
          nil)
         ("3" (skosimp) (("3" (skosimp) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (A!1 skolem-const-decl "Mat(m!1, n!1)" matrix_operator nil)
    (Mat type-eq-decl nil matrices nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (m!1 skolem-const-decl "posnat" matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (below type-eq-decl nil nat_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (thm "thm" 3520158370
   ("" (skosimp)
    (("" (expand "T")
      (("" (apply-extensionality)
        (("1" (hide 2)
          (("1" (expand "*") (("1" (propax) nil nil)) nil)) nil)
         ("2" (skosimp) (("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil))
   shostak)
  (thm "thm" 3519620399
   ("" (skosimp)
    (("" (expand "T")
      (("" (apply-extensionality)
        (("1" (hide 2)
          (("1" (expand "*")
            (("1" (case "n!1=A!1`cols")
              (("1" (replace -1) (("1" (postpone) nil nil)) nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil)
         ("2" (skosimp) (("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil))
   shostak)
  (hm "thm" 3519615120
   ("" (skosimp)
    (("" (expand "T")
      (("" (apply-extensionality)
        (("1" (hide 2)
          (("1" (expand "*") (("1" (propax) nil nil)) nil)) nil)
         ("2" (skosimp) (("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil))
   shostak)
  (T_matr-1 nil 3519447551
   ("" (skosimp)
    (("" (expand "T")
      (("" (apply-extensionality)
        (("1" (hide 2)
          (("1" (expand "*")
            (("1" (typepred "A!1")
              (("1" (replace -2)
                (("1" (lemma "sigma_eq[below[n!1]]")
                  (("1"
                    (inst -1
                     " LAMBDA (i: below[n!1]): A!1`matrix(x!2, i) * x!1(i)"
                     " LAMBDA (k: below(A!1`cols)): A!1`matrix(x!2, k) * x!1(k)"
                     "n!1-1" "0")
                    (("1" (assert)
                      (("1" (assert)
                        (("1" (grind) (("1" (postpone) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil))
   shostak))
 (linear_map_T 0
  (thm "thm" 3520673925
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (skosimp)
              (("3" (lemma "T_matr")
                (("3"
                  (inst -1 "m!1" "n!1" "A!1"
                   "SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)")
                  (("3" (replace -1)
                    (("3" (lemma "linear_matrix")
                      (("3" (inst -1 "l!1" "n!1" "m!1" "A!1" "x!1*F!1")
                        (("3" (replace -1)
                          (("3" (apply-extensionality 1)
                            (("1" (hide 2)
                              (("1"
                                (expand "SigmaV" 1)
                                (("1"
                                  (lemma "sigma_eq[below[l!1]]")
                                  (("1"
                                    (inst
                                     -1
                                     "LAMBDA (j: below[l!1]): (A!1 * (x!1 * F!1)(j))(x!2)"
                                     "LAMBDA (j: below[l!1]):
               (x!1 * (T(n!1, m!1)(A!1)`mp o F!1))(j)(x!2)"
                                     "l!1-1"
                                     "0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (lemma "T_matr")
                                            (("1"
                                              (expand "o" 1)
                                              (("1"
                                                (expand "*" 1)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "m!1"
                                                   "n!1"
                                                   "A!1"
                                                   "F!1(n!2)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand "*" 1)
                                                      (("1"
                                                        (lemma
                                                         "sigma_scal[below[A!1`cols]]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "LAMBDA (k: below(A!1`cols)): A!1`matrix(x!2, k) * F!1(n!2)(k)"
                                                           "x!1(n!2)"
                                                           "A!1`cols-1"
                                                           "0")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp)
                                      (("3"
                                        (skosimp)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (hide 2)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skosimp)
                              (("3"
                                (skosimp)
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide 2)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((linear_map_e? const-decl "bool" linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (linear_matrix formula-decl nil matrix_operator nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_scal formula-decl nil sigma "reals/")
    (l!1 skolem-const-decl "posnat" matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (m!1 skolem-const-decl "posnat" matrix_operator nil)
    (A!1 skolem-const-decl "Mat(m!1, n!1)" matrix_operator nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (O const-decl "T3" function_props nil)
    (T_matr formula-decl nil matrix_operator nil)
    (sigma def-decl "real" sigma "reals/")
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (thm "thmmm" 3519987462
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (skosimp)
              (("3" (lemma "T_matr")
                (("3"
                  (inst -1 "m!1" "n!1" "A!1"
                   "SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)")
                  (("3" (replace -1)
                    (("3" (lemma "linear_matrix")
                      (("3" (inst -1 "l!1" "n!1" "m!1" "A!1" "x!1*F!1")
                        (("3" (replace -1)
                          (("3" (apply-extensionality 1)
                            (("1" (hide 2)
                              (("1"
                                (expand "SigmaV" 1)
                                (("1"
                                  (lemma "sigma_eq[below[l!1]]")
                                  (("1"
                                    (inst
                                     -1
                                     "LAMBDA (j: below[l!1]): (A!1 * (x!1 * F!1)(j))(x!2)"
                                     "LAMBDA (j: below[l!1]):
               (x!1 * (T(n!1, m!1)(A!1)`mp o F!1))(j)(x!2)"
                                     "l!1-1"
                                     "0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (lemma "T_matr")
                                            (("1"
                                              (expand "o" 1)
                                              (("1"
                                                (expand "*" 1)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "m!1"
                                                   "n!1"
                                                   "A!1"
                                                   "F!1(n!2)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand "*" 1)
                                                      (("1"
                                                        (lemma
                                                         "sigma_scal[below[A!1`cols]]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "LAMBDA (k: below(A!1`cols)): A!1`matrix(x!2, k) * F!1(n!2)(k)"
                                                           "x!1(n!2)"
                                                           "A!1`cols-1"
                                                           "0")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp)
                                      (("3"
                                        (skosimp)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (hide 2)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skosimp)
                              (("3"
                                (skosimp)
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide 2)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (T_matr formula-decl nil matrix_operator nil)
    (O const-decl "T3" function_props nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_scal formula-decl nil sigma "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors "vectors/")
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (linear_matrix formula-decl nil matrix_operator nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (thm "thm" 3519912292
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (skosimp)
              (("3" (lemma "T_matr")
                (("3"
                  (inst -1 "m!1" "n!1" "A!1"
                   "SigmaV[below[l!1], n!1](0, l!1 - 1, x!1 * F!1)")
                  (("3" (replace -1)
                    (("3" (lemma "linear_matrix")
                      (("3" (inst -1 "l!1" "n!1" "m!1" "A!1" "x!1*F!1")
                        (("3" (replace -1)
                          (("3" (apply-extensionality 1)
                            (("1" (hide 2)
                              (("1"
                                (expand "SigmaV" 1)
                                (("1"
                                  (lemma "sigma_eq[below[l!1]]")
                                  (("1"
                                    (inst
                                     -1
                                     "LAMBDA (j: below[l!1]): (A!1 * (x!1 * F!1)(j))(x!2)"
                                     "LAMBDA (j: below[l!1]):
               (x!1 * (T(n!1, m!1)(A!1)`mp o F!1))(j)(x!2)"
                                     "l!1-1"
                                     "0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (lemma "T_matr")
                                            (("1"
                                              (expand "o" 1)
                                              (("1"
                                                (expand "*" 1)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "m!1"
                                                   "n!1"
                                                   "A!1"
                                                   "F!1(n!2)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand "*" 1)
                                                      (("1"
                                                        (lemma
                                                         "sigma_scal[below[A!1`cols]]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "LAMBDA (k: below(A!1`cols)): A!1`matrix(x!2, k) * F!1(n!2)(k)"
                                                           "x!1(n!2)"
                                                           "A!1`cols-1"
                                                           "0")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp)
                                      (("3"
                                        (skosimp)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (hide 2)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skosimp)
                              (("3"
                                (skosimp)
                                (("3"
                                  (assert)
                                  (("3"
                                    (hide 2)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (T_matr formula-decl nil matrix_operator nil)
    (O const-decl "T3" function_props nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_scal formula-decl nil sigma "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors "vectors/")
    (subrange type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (linear_matrix formula-decl nil matrix_operator nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (thm "thm" 3519623226
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (expand "linear_map_e?")
          (("" (split)
            (("1" (grind) nil nil)
             ("2" (skosimp)
              (("2" (lemma "T_matr")
                (("2"
                  (inst -1 "m!1" "n!1" "A!1"
                   "SigmaV(0, m!2 - 1, x!1 * F!1)")
                  (("1" (replace -1)
                    (("1" (lemma "linear_matrix")
                      (("1"
                        (inst -1 "m!2" "n!1" "m!1" "A!1" "x!1 * F!1")
                        (("1" (replace -1)
                          (("1" (apply-extensionality 1)
                            (("1" (expand "SigmaV" 1)
                              (("1"
                                (hide 2)
                                (("1"
                                  (lemma "sigma_eq[below[m!2]]")
                                  (("1"
                                    (inst
                                     -1
                                     " LAMBDA (j: below[m!2]): (A!1 * (x!1 * F!1)(j))(x!2)"
                                     "LAMBDA (j: Index[m!2]):
               (x!1 * (T(n!1, m!1)(A!1)`mp o F!1))(j)(x!2)"
                                     "m!2-1"
                                     "0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (lemma "T_matr")
                                            (("1"
                                              (expand "o" 1)
                                              (("1"
                                                (expand "*" 1)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "m!1"
                                                   "n!1"
                                                   "A!1"
                                                   "F!1(n!2)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand "*" 1)
                                                      (("1"
                                                        (lemma
                                                         "sigma_scal[below(A!1`cols)]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "LAMBDA (k: below(A!1`cols)): A!1`matrix(x!2, k) * F!1(n!2)(k)"
                                                           "x!1(n!2)"
                                                           "A!1`cols-1"
                                                           "0")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (skosimp)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp)
                                      (("3"
                                        (skosimp)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp) (("2" (grind) nil nil))
                              nil)
                             ("3" (skosimp)
                              (("3"
                                (skosimp)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (linear_matrix formula-decl nil matrix_operator nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_scal formula-decl nil sigma "reals/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (O const-decl "T3" function_props nil)
    (T_matr formula-decl nil matrix_operator nil)
    (sigma def-decl "real" sigma "reals/")
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (no "no" 3483461149
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (lemma "linear_matrix")
          (("" (assert)
            (("" (lemma "T_matr")
              (("" (assert)
                (("" (hide -2)
                  (("" (lemma "linear_matrix")
                    (("" (expand "linear_map_e?")
                      (("" (skosimp)
                        ((""
                          (inst -2 "m!1" "n!1" "A!1"
                           "SigmaV(0,m!2-1,x!1*F!1)")
                          (("1" (replace -2)
                            (("1"
                              (inst -1 "m!2" "n!1" "m!1" "A!1"
                               "x!1*F!1")
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "SigmaV" 1)
                                  (("1"
                                    (apply-extensionality 1)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "sigma_eq[below[m!2]]")
                                        (("1"
                                          (inst
                                           -1
                                           "LAMBDA (j: below[m!2]): (A!1 * (x!1 * F!1)(j))(x!2)"
                                           "LAMBDA (j: Index[m!2]):
               (x!1 * (T(n!1, m!1)(A!1)`mp o F!1))(j)(x!2)"
                                           "m!2-1"
                                           "0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (skosimp)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp)
                                            (("3"
                                              (skosimp)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (skosimp)
                                      (("3"
                                        (skosimp)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("4" (grind) nil nil)
                                     ("5"
                                      (skosimp)
                                      (("5"
                                        (skosimp)
                                        (("5" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (skosimp)
                                      (("6"
                                        (skosimp)
                                        (("6" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (below type-eq-decl nil nat_types nil)
    (linear_matrix formula-decl nil matrix_operator nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_scal formula-decl nil sigma "reals/")
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (O const-decl "T3" function_props nil)
    (T_matr formula-decl nil matrix_operator nil)
    (sigma def-decl "real" sigma "reals/")
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (linear_map_T-1 nil 3483359278
   ("" (skosimp)
    (("" (expand "linear_map_e?")
      (("" (skosimp)
        (("" (lemma "T_matr")
          (("" (inst -1 "A!1" "sigmaV(0, n - 1, x!1 * F!1)")
            (("" (assert)
              (("" (replace -1)
                (("" (lemma "extensionality[below[n],real]")
                  ((""
                    (inst -1 "A!1 * sigmaV(0, n - 1, x!1 * F!1)"
                     "sigmaV(0, n - 1, x!1 * (T(A!1) o F!1))")
                    ((""
                      (name "ll" "(FORALL (x: below[n]):
         (A!1 * sigmaV(0, n - 1, x!1 * F!1))(x) =
          sigmaV(0, n - 1, x!1 * (T(A!1) o F!1))(x))")
                      (("" (replace -1)
                        (("" (case "ll")
                          (("1" (assert) nil nil)
                           ("2" (hide -1)
                            (("2" (expand "ll" 1)
                              (("2"
                                (hide -1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "sigmaV" 1)
                                    (("2"
                                      (expand "*" 1)
                                      (("2"
                                        (name
                                         "l1"
                                         " LAMBDA (i_1: below[n]):
             A!1(i_1, x!2) *
              sigma(0, n - 1,
                    LAMBDA (j: below[n]): (x!1(j) * F!1(j))(i_1))")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (name
                                             "l2"
                                             "LAMBDA (j: below[n]): (x!1(j) * (T(A!1) o F!1)(j))(x!2)")
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (lemma
                                                 "sigma_eq[below[n]]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "l1"
                                                   "l2"
                                                   "n-1"
                                                   "0")
                                                  (("2"
                                                    (name
                                                     "t1"
                                                     "(FORALL (n_1: subrange(0, n - 1)): l1(n_1) = l2(n_1))")
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (case "t1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "t1"
                                                           1)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (expand
                                                               "l1"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "l2"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "o")
                                                                  (("2"
                                                                    (lemma
                                                                     "T_matr")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "A!1"
                                                                       "F!1(n!1)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (sigma_scal formula-decl nil sigma "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extensionality formula-decl nil functions nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (map_matrix_bij 0
  (thm "thm" 3520673991
   ("" (skosimp)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (apply-extensionality)
          (("" (hide 2)
            (("" (expand "L")
              (("" (lemma "linear_map_T")
                (("" (inst -1 "m!1" "n!1" "A!1")
                  (("" (lemma "T_matr")
                    (("" (inst -1 "m!1" "n!1" "A!1" "e(n!1)(x!2)")
                      (("" (replace -1)
                        (("" (expand "*")
                          (("" (lemma "sigma_middle[below(A!1`cols)]")
                            (("1"
                              (inst -1 " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)" "A!1`cols-1" "x!2"
                               "0")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (case
                                     "sigma(0, x!2 - 1,
            LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)) = 0")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "sigma(1 + x!2, A!1`cols - 1,
            LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k))=0")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "sigma_zero[below(A!1`cols)]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "A!1`cols-1"
                                                 "1+x!2")
                                                (("2"
                                                  (swap-rel -1)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (lemma
                                                       "sigma_eq[below(A!1`cols)]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)"
                                                         "(LAMBDA (i: below(A!1`cols)): 0)"
                                                         "A!1`cols-1"
                                                         "1+x!2")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "sigma_zero[below(A!1`cols)]")
                                      (("2"
                                        (inst -1 "x!2-1" "0")
                                        (("2"
                                          (swap-rel -1)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (swap-rel 1)
                                              (("2"
                                                (lemma
                                                 "sigma_eq[below(A!1`cols)]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "LAMBDA (k: below(A!1`cols)):
               A!1`matrix(x!1, k) * e(n!1)(x!2)(k)"
                                                   "(LAMBDA (i: below(A!1`cols)): 0)"
                                                   "x!2-1"
                                                   "0")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (Mat type-eq-decl nil matrices nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (below type-eq-decl nil nat_types nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_high type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_zero formula-decl nil sigma "reals/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (sigma_eq formula-decl nil sigma "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "real" sigma "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (sigma_middle formula-decl nil sigma "reals/")
    (T_matr formula-decl nil matrix_operator nil)
    (linear_map_T formula-decl nil matrix_operator nil))
   shostak)
  (thm "thm" 3519987610
   ("" (skosimp)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (apply-extensionality)
          (("" (hide 2)
            (("" (expand "L")
              (("" (lemma "linear_map_T")
                (("" (inst -1 "m!1" "n!1" "A!1")
                  (("" (lemma "T_matr")
                    (("" (inst -1 "m!1" "n!1" "A!1" "e(n!1)(x!2)")
                      (("" (replace -1)
                        (("" (expand "*")
                          (("" (lemma "sigma_middle[below(A!1`cols)]")
                            ((""
                              (inst -1 " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)" "A!1`cols-1" "x!2"
                               "0")
                              ((""
                                (assert)
                                ((""
                                  (replace -1)
                                  ((""
                                    (case
                                     "sigma(0, x!2 - 1,
            LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)) = 0")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "sigma(1 + x!2, A!1`cols - 1,
            LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k))=0")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "sigma_zero[below(A!1`cols)]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "A!1`cols-1"
                                                 "1+x!2")
                                                (("2"
                                                  (swap-rel -1)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (lemma
                                                       "sigma_eq[below(A!1`cols)]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)"
                                                         "(LAMBDA (i: below(A!1`cols)): 0)"
                                                         "A!1`cols-1"
                                                         "1+x!2")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "sigma_zero[below(A!1`cols)]")
                                      (("2"
                                        (inst -1 "x!2-1" "0")
                                        (("2"
                                          (swap-rel -1)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (swap-rel 1)
                                              (("2"
                                                (lemma
                                                 "sigma_eq[below(A!1`cols)]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "LAMBDA (k: below(A!1`cols)):
               A!1`matrix(x!1, k) * e(n!1)(x!2)(k)"
                                                   "(LAMBDA (i: below(A!1`cols)): 0)"
                                                   "x!2-1"
                                                   "0")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((linear_map_T formula-decl nil matrix_operator nil)
    (T_matr formula-decl nil matrix_operator nil)
    (sigma_middle formula-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_zero formula-decl nil sigma "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (* const-decl "Vector" vectors "vectors/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_high type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (thm "thm" 3519909524
   ("" (skosimp)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (apply-extensionality)
          (("" (hide 2)
            (("" (expand "L")
              (("" (lemma "linear_map_T")
                (("" (inst -1 "m!1" "n!1" "A!1")
                  (("" (lemma "T_matr")
                    (("" (inst -1 "m!1" "n!1" "A!1" "e(n!1)(x!2)")
                      (("" (replace -1)
                        (("" (expand "*")
                          (("" (lemma "sigma_middle[below(A!1`cols)]")
                            (("1"
                              (inst -1 " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)" "A!1`cols-1" "x!2"
                               "0")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (case
                                     "sigma(0, x!2 - 1,
            LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)) = 0")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "sigma(1 + x!2, A!1`cols - 1,
            LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k))=0")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "sigma_zero[below(A!1`cols)]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "A!1`cols-1"
                                                 "1+x!2")
                                                (("2"
                                                  (swap-rel -1)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (lemma
                                                       "sigma_eq[below(A!1`cols)]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)"
                                                         "(LAMBDA (i: below(A!1`cols)): 0)"
                                                         "A!1`cols-1"
                                                         "1+x!2")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "sigma_zero[below(A!1`cols)]")
                                      (("2"
                                        (inst -1 "x!2-1" "0")
                                        (("2"
                                          (swap-rel -1)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (swap-rel 1)
                                              (("2"
                                                (lemma
                                                 "sigma_eq[below(A!1`cols)]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "LAMBDA (k: below(A!1`cols)):
               A!1`matrix(x!1, k) * e(n!1)(x!2)(k)"
                                                   "(LAMBDA (i: below(A!1`cols)): 0)"
                                                   "x!2-1"
                                                   "0")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((linear_map_T formula-decl nil matrix_operator nil)
    (T_matr formula-decl nil matrix_operator nil)
    (sigma_middle formula-decl nil sigma "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_zero formula-decl nil sigma "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (* const-decl "Vector" vectors "vectors/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_high type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (thm "thm" 3519625149
   ("" (skosimp)
    (("" (apply-extensionality)
      (("" (hide 2)
        (("" (apply-extensionality)
          (("" (hide 2)
            (("" (expand "L")
              (("" (lemma "linear_map_T")
                (("" (inst -1 "m!1" "n!1" "A!1")
                  (("" (lemma "T_matr")
                    (("" (inst -1 "m!1" "n!1" "A!1" "e(n!1)(x!2)")
                      (("1" (replace -1)
                        (("1" (expand "*")
                          (("1" (lemma "sigma_middle[below(A!1`cols)]")
                            (("1"
                              (inst -1 " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)" "A!1`cols-1" "x!2"
                               "0")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (case
                                     "sigma(0, x!2 - 1,
            LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)) = 0")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "sigma(1 + x!2, A!1`cols - 1,
            LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k))=0")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "sigma_zero[below(A!1`cols)]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "A!1`cols-1"
                                                 "1+x!2")
                                                (("2"
                                                  (swap-rel -1)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (lemma
                                                       "sigma_eq[below(A!1`cols)]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         " LAMBDA (k: below(A!1`cols)):
              A!1`matrix(x!1, k) * e(n!1)(x!2)(k)"
                                                         "(LAMBDA (i: below(A!1`cols)): 0)"
                                                         "A!1`cols-1"
                                                         "1+x!2")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "sigma_zero[below(A!1`cols)]")
                                      (("2"
                                        (inst -1 "x!2-1" "0")
                                        (("2"
                                          (swap-rel -1)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (swap-rel 1)
                                              (("2"
                                                (lemma
                                                 "sigma_eq[below(A!1`cols)]")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "LAMBDA (k: below(A!1`cols)):
               A!1`matrix(x!1, k) * e(n!1)(x!2)(k)"
                                                   "(LAMBDA (i: below(A!1`cols)): 0)"
                                                   "x!2-1"
                                                   "0")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((linear_map_T formula-decl nil matrix_operator nil)
    (T_matr formula-decl nil matrix_operator nil)
    (sigma_middle formula-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_zero formula-decl nil sigma "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (* const-decl "Vector" vectors "vectors/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_high type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (thm "thm" 3482753444
   ("" (skosimp)
    (("" (lemma "comp_equal_matri_n")
      (("" (inst -1 "L(e!1)(T(A!1))" "A!1")
        ((""
          (name "aa"
                "FORALL (i: below[n], j: below[n]): L(e!1)(T(A!1))(i, j) = A!1(i, j)")
          (("" (replace -1)
            (("" (case "aa")
              (("1" (assert) nil nil)
               ("2" (expand "aa" 1)
                (("2" (skosimp)
                  (("2" (expand "L" 1)
                    (("2" (lemma "T_A")
                      (("2" (inst -1 "A!1" "e!1" "i!1" "j!1") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((linear_map_T formula-decl nil matrix_operator nil)
    (T_matr formula-decl nil matrix_operator nil)
    (sigma_middle formula-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (sigma_zero formula-decl nil sigma "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (* const-decl "Vector" vectors "vectors/")
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_high type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (one-1 nil 3482752798
   ("" (skosimp)
    (("" (expand "L")
      (("" (lemma "comp_equal_matri")
        ((""
          (inst -1 "LAMBDA (i, j: below[n]): T(A!1)(e!1(i))(j)" "A!1")
          (("1" (postpone) nil nil) ("2" (postpone) nil nil)
           ("3" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (b2n const-decl "nbit" bit nil) (nbit type-eq-decl nil bit nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil))
   shostak))
 (operator_TCC1 0
  (operator_TCC1-1 nil 3519051742 ("" (subtype-tcc) nil nil) nil nil))
 (operator_TCC2 0
  (operator_TCC2-1 nil 3519051742 ("" (subtype-tcc) nil nil) nil nil))
 (operator 0
           (thm "thm" 3519625216
            ("" (skosimp) (("" (apply-extensionality) nil nil)) nil)
            ((number nonempty-type-decl nil numbers nil)
             (boolean nonempty-type-decl nil booleans nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (>= const-decl "bool" reals nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (> const-decl "bool" reals nil)
             (Vector type-eq-decl nil vectors "vectors/")
             (Maping type-eq-decl nil linear_map nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (Map type-eq-decl nil linear_map nil)
             (linear_map_e? const-decl "bool" linear_map_def nil)
             (Map_linear type-eq-decl nil linear_map_def nil)
             (Mat type-eq-decl nil matrices nil)
             (L const-decl "[Map_linear(n, m) -> Mat(m, n)]"
              matrix_operator nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (below type-eq-decl nil naturalnumbers nil)
             (real nonempty-type-from-decl nil reals nil)
             (Matrix type-eq-decl nil matrices nil))
            shostak)
           (thm "thm" 3482754329
            ("" (skosimp)
             (("" (lemma "comp_equal_matri_n")
               (("" (inst -1 "L(e!1)(f!1)" "L(e!1)(g!1)")
                 ((""
                   (name "ff" "(FORALL (i: below[n], j: below[n]):
         L(e!1)(f!1)(i, j) = L(e!1)(g!1)(i, j))")
                   (("" (replace -1)
                     (("" (case "ff")
                       (("1" (assert) nil nil)
                        ("2" (expand "ff" 1)
                         (("2" (skosimp)
                           (("2" (expand "L" 1)
                             (("2" (expand "=" -4)
                               (("2"
                                 (inst -4 "e!1(i!1)")
                                 (("2"
                                   (lemma
                                    "extensionality_postulate[below[n],real]")
                                   (("2"
                                     (inst
                                      -1
                                      " f!1(e!1(i!1))"
                                      "g!1(e!1(i!1))")
                                     (("2" (assert) nil nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ((Matrix type-eq-decl nil matrices nil)
             (real nonempty-type-from-decl nil reals nil)
             (below type-eq-decl nil naturalnumbers nil)
             (posnat nonempty-type-eq-decl nil integers nil)
             (L const-decl "[Map_linear(n, m) -> Mat(m, n)]"
              matrix_operator nil)
             (Mat type-eq-decl nil matrices nil)
             (Map_linear type-eq-decl nil linear_map_def nil)
             (Map type-eq-decl nil linear_map nil)
             (= const-decl "[T, T -> boolean]" equalities nil)
             (AND const-decl "[bool, bool -> bool]" booleans nil)
             (Maping type-eq-decl nil linear_map nil)
             (Vector type-eq-decl nil vectors "vectors/")
             (> const-decl "bool" reals nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (>= const-decl "bool" reals nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (int nonempty-type-eq-decl nil integers nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (boolean nonempty-type-decl nil booleans nil)
             (number nonempty-type-decl nil numbers nil))
            shostak)
           (operator-1 nil 3482659208
            ("" (skosimp)
             (("" (expand "L")
               (("" (grind)
                 (("" (grind) (("" (postpone) nil nil)) nil)) nil))
               nil))
             nil)
            ((below type-eq-decl nil nat_types nil)
             (nat nonempty-type-eq-decl nil naturalnumbers nil)
             (< const-decl "bool" reals nil)
             (Index type-eq-decl nil vectors "vectors/")
             (Vector type-eq-decl nil vectors "vectors/")
             (= const-decl "[T, T -> boolean]" equalities nil)
             (IF const-decl "[boolean, T, T -> T]" if_def nil)
             (nbit type-eq-decl nil bit nil)
             (b2n const-decl "nbit" bit nil)
             (L const-decl "[Map_linear(n, m) -> Mat(m, n)]"
              matrix_operator nil)
             (extensionality_postulate formula-decl nil functions nil)
             (number nonempty-type-decl nil numbers nil)
             (boolean nonempty-type-decl nil booleans nil)
             (number_field_pred const-decl "[number -> boolean]"
              number_fields nil)
             (number_field nonempty-type-from-decl nil number_fields
              nil)
             (real_pred const-decl "[number_field -> boolean]" reals
                        nil)
             (real nonempty-type-from-decl nil reals nil)
             (rational_pred const-decl "[real -> boolean]" rationals
                            nil)
             (rational nonempty-type-from-decl nil rationals nil)
             (integer_pred const-decl "[rational -> boolean]" integers
                           nil)
             (int nonempty-type-eq-decl nil integers nil)
             (bool nonempty-type-eq-decl nil booleans nil)
             (>= const-decl "bool" reals nil)
             (nonneg_int nonempty-type-eq-decl nil integers nil)
             (> const-decl "bool" reals nil)
             (posnat nonempty-type-eq-decl nil integers nil))
            shostak))
 (Iso 0
  (thm "thm" 3519629781
   ("" (skosimp)
    (("" (expand "bijective?")
      (("" (split)
        (("1" (expand "injective?")
          (("1" (skosimp)
            (("1" (apply-extensionality)
              (("1"
                (lemma
                 "extensionality_postulate[[below[m!1],below[n!1]],real]")
                (("1" (lemma "equa_basis_n")
                  (("1" (expand "L")
                    (("1"
                      (inst -2
                       " (LAMBDA (j: below[m!1], i: below[n!1]): x1!1`mp(e(n!1)(i))(j))"
                       "(LAMBDA (j: below[m!1], i: below[n!1]): x2!1`mp(e(n!1)(i))(j))")
                      (("1" (assert)
                        (("1" (apply-extensionality 1)
                          (("1" (apply-extensionality 1)
                            (("1" (inst -1 "m!1" "n!1" "x1!1" "x2!1")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 1 2 4 5)
                                  (("1"
                                    (apply-extensionality 1)
                                    (("1"
                                      (apply-extensionality 1)
                                      (("1"
                                        (hide 2 3)
                                        (("1"
                                          (expand "o")
                                          (("1"
                                            (inst -1 "(x!4,x!3)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2" (skosimp) (("2" (grind) nil nil)) nil))
                        nil)
                       ("3" (skosimp)
                        (("3" (skosimp) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "surjective?")
          (("2" (skosimp)
            (("2" (lemma "map_matrix_bij")
              (("2" (inst -1 "m!1" "n!1" "y!1")
                (("2" (inst 1 "T(n!1, m!1)(y!1)") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Mat type-eq-decl nil matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (equa_basis_n formula-decl nil linear_map_def nil)
    (m!1 skolem-const-decl "posnat" matrix_operator nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (x1!1 skolem-const-decl "Map_linear(n!1, m!1)" matrix_operator nil)
    (x2!1 skolem-const-decl "Map_linear(n!1, m!1)" matrix_operator nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (Index type-eq-decl nil vectors "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "T3" function_props nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (extensionality_postulate formula-decl nil functions nil))
   shostak)
  (thm "thm" 3483370869
   ("" (skosimp)
    (("" (expand "bijective?")
      (("" (split)
        (("1" (expand "injective?")
          (("1" (skosimp)
            (("1" (apply-extensionality)
              (("1"
                (lemma
                 "extensionality_postulate[[below[m!1],below[n!1]],real]")
                (("1" (lemma "equa_basis_n")
                  (("1" (expand "L")
                    (("1"
                      (inst -2
                       " (LAMBDA (j: below[m!1], i: below[n!1]): x1!1`mp(e(n!1)(i))(j))"
                       "(LAMBDA (j: below[m!1], i: below[n!1]): x2!1`mp(e(n!1)(i))(j))")
                      (("1" (assert)
                        (("1" (apply-extensionality 1)
                          (("1" (apply-extensionality 1)
                            (("1" (inst -1 "m!1" "n!1" "x1!1" "x2!1")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 1 2 4 5)
                                  (("1"
                                    (apply-extensionality 1)
                                    (("1"
                                      (apply-extensionality 1)
                                      (("1"
                                        (hide 2 3)
                                        (("1"
                                          (expand "o")
                                          (("1"
                                            (inst -1 "(x!4,x!3)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp)
                        (("2" (skosimp) (("2" (grind) nil nil)) nil))
                        nil)
                       ("3" (skosimp)
                        (("3" (skosimp) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   ((extensionality_postulate formula-decl nil functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (O const-decl "T3" function_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Index type-eq-decl nil vectors "vectors/")
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (equa_basis_n formula-decl nil linear_map_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak)
  (thm "thm" 3483359130
   ("" (skosimp)
    (("" (expand "bijective?")
      (("" (split)
        (("1" (expand "injective?")
          (("1" (skosimp)
            (("1"
              (name "gg"
                    "FORALL (i: below[n]): x1!1(e!1(i)) = x2!1(e!1(i))")
              (("1" (case "gg")
                (("1" (assert)
                  (("1" (typepred "x1!1")
                    (("1" (lemma "equa_basis_n")
                      (("1" (inst -1 "e!1" "x1!1" "x2!1")
                        (("1" (assert)
                          (("1"
                            (name "ff"
                                  "FORALL (i: below[n]): x1!1(e!1(i)) = x2!1(e!1(i))")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "x1!1")
                                  (("1"
                                    (lemma
                                     "extensionality[Vector[n],Vector[n]]")
                                    (("1"
                                      (inst -1 "x1!1" "x2!1")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "gg")
                  (("2" (skosimp)
                    (("2" (hide -1)
                      (("2" (lemma "comp_equal_matri_n")
                        (("2" (inst -1 "L(e!1)(x1!1)" "L(e!1)(x2!1)")
                          (("2"
                            (name "ss" "L(e!1)(x1!1) = L(e!1)(x2!1)")
                            (("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "L" -2)
                                  (("2"
                                    (lemma
                                     "extensionality[below[n],real]")
                                    (("2"
                                      (inst
                                       -1
                                       "x1!1(e!1(i!1))"
                                       "x2!1(e!1(i!1))")
                                      (("2"
                                        (name
                                         "rr"
                                         "(FORALL (x: below[n]): x1!1(e!1(i!1))(x) = x2!1(e!1(i!1))(x))")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (case "rr")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "rr" 1)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst -4 "i!1" "x!1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "surjective?")
          (("2" (skosimp)
            (("2" (lemma "T_A")
              (("2" (lemma "map_matrix_bij")
                (("2" (inst -1 "y!1" "e!1")
                  (("2" (inst 1 "T(y!1)") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (extensionality formula-decl nil functions nil)
    (equa_basis_n formula-decl nil linear_map_def nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (injective? const-decl "bool" functions nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (linear_map_T formula-decl nil matrix_operator nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak)
  (thm "thm" 3483040354
   ("" (skosimp)
    (("" (expand "bijective?")
      (("" (split)
        (("1" (expand "injective?")
          (("1" (skosimp)
            (("1" (lemma "equa_basis")
              (("1" (inst -1 "e!1" "x1!1" "x2!1")
                (("1"
                  (name "gg"
                        "FORALL (i: below[n]): x1!1(e!1(i)) = x2!1(e!1(i))")
                  (("1" (replace -1)
                    (("1" (case "gg")
                      (("1" (assert) nil nil)
                       ("2" (expand "gg")
                        (("2" (skosimp)
                          (("2" (hide -1)
                            (("2" (lemma "comp_equal_matri_n")
                              (("2"
                                (inst -1 "L(e!1)(x1!1)" "L(e!1)(x2!1)")
                                (("2"
                                  (name
                                   "ss"
                                   "L(e!1)(x1!1) = L(e!1)(x2!1)")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "L" -2)
                                        (("2"
                                          (lemma
                                           "extensionality[below[n],real]")
                                          (("2"
                                            (inst
                                             -1
                                             "x1!1(e!1(i!1))"
                                             "x2!1(e!1(i!1))")
                                            (("2"
                                              (name
                                               "rr"
                                               "(FORALL (x: below[n]): x1!1(e!1(i!1))(x) = x2!1(e!1(i!1))(x))")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (case "rr")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "rr" 1)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst
                                                         -4
                                                         "i!1"
                                                         "x!1")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "surjective?")
          (("2" (skosimp)
            (("2" (lemma "T_A")
              (("2" (lemma "map_matrix_bij")
                (("2" (inst -1 "y!1" "e!1")
                  (("2" (inst 1 "T(y!1)") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (extensionality formula-decl nil functions nil)
    (equa_basis_n formula-decl nil linear_map_def nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (injective? const-decl "bool" functions nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak)
  (Iso-1 nil 3482765151
   ("" (skosimp)
    (("" (expand "bijective?")
      (("" (split)
        (("1" (expand "injective?")
          (("1" (skosimp)
            (("1" (lemma "equa_basis")
              (("1" (inst -1 "e!1" "x1!1" "x2!1")
                (("1"
                  (name "gg"
                        "FORALL (i: below[n]): x1!1(e!1(i)) = x2!1(e!1(i))")
                  (("1" (replace -1)
                    (("1" (case "gg")
                      (("1" (assert) nil nil)
                       ("2" (expand "gg")
                        (("2" (skosimp)
                          (("2" (hide -1)
                            (("2" (lemma "comp_equal_matri_n")
                              (("2"
                                (inst -1 "L(e!1)(x1!1)" "L(e!1)(x2!1)")
                                (("2"
                                  (name
                                   "ss"
                                   "L(e!1)(x1!1) = L(e!1)(x2!1)")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "L" -2)
                                        (("2"
                                          (lemma
                                           "extensionality[below[n],real]")
                                          (("2"
                                            (inst
                                             -1
                                             "x1!1(e!1(i!1))"
                                             "x2!1(e!1(i!1))")
                                            (("2"
                                              (name
                                               "rr"
                                               "(FORALL (x: below[n]): x1!1(e!1(i!1))(x) = x2!1(e!1(i!1))(x))")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (case "rr")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "rr" 1)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst
                                                         -4
                                                         "i!1"
                                                         "x!1")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (extensionality formula-decl nil functions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (injective? const-decl "bool" functions nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (iso_map 0
  (thm "thm" 3519987638
   ("" (skosimp)
    (("" (lemma "map_matrix_bij")
      (("" (lemma "Iso")
        (("" (inst -1 "m!1" "n!1")
          (("" (expand "bijective?")
            (("" (flatten)
              (("" (expand "surjective?")
                (("" (expand "injective?")
                  (("" (inst?)
                    (("" (inst -3 "m!1" "n!1" "L(n!1,m!1)(f!1)")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_matrix_bij formula-decl nil matrix_operator nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (injective? const-decl "bool" functions nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Mat type-eq-decl nil matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (Iso formula-decl nil matrix_operator nil))
   shostak)
  (thm "thm" 3483090571
   ("" (skosimp)
    (("" (lemma "map_matrix_bij")
      (("" (lemma "Iso")
        (("" (inst -1 "m!1" "n!1")
          (("" (expand "bijective?")
            (("" (flatten)
              (("" (expand "surjective?")
                (("" (expand "injective?")
                  (("" (inst?)
                    (("1" (inst -3 "m!1" "n!1" "L(n!1,m!1)(f!1)")
                      (("1" (assert) nil nil)) nil)
                     ("2" (hide 2)
                      (("2" (lemma "linear_map_T")
                        (("2" (inst -1 "m!1" "n!1" "L(n!1,m!1)(f!1)")
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Iso formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (map_matrix_bij formula-decl nil matrix_operator nil))
   shostak)
  (iso_map-1 nil 3483090342
   ("" (skosimp)
    (("" (split)
      (("1" (lemma "map_matrix_bij")
        (("1" (inst -1 "L(e!1)(f!1)" "e!1")
          (("1" (lemma "Iso")
            (("1" (inst -1 "e!1")
              (("1" (assert)
                (("1" (expand "bijective?")
                  (("1" (flatten)
                    (("1" (expand "injective?")
                      (("1" (inst -1 "T(L(e!1)(f!1))" "f!1")
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Iso formula-decl nil matrix_operator nil)
    (map_matrix_bij formula-decl nil matrix_operator nil))
   shostak))
 (L_inverse_TCC1 0
  (teo "fin" 3547202811
   ("" (existence-tcc)
    ((""
      (inst 1
       "(#dom:=n!1,codom:=m!1,mp:= Lambda(x:Vector[n!1]):zero[m!1]#)")
      (("" (skosimp)
        (("" (skosimp)
          (("" (expand "SigmaV")
            (("" (apply-extensionality)
              (("" (hide 2)
                (("" (lemma "sigma_zero[below[l!1]]")
                  (("" (inst -1 "l!1-1" "0") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((linear_map_e? const-decl "bool" linear_map_def nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (zero const-decl "Vector" vectors "vectors/")
    (O const-decl "T3" function_props nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (m!1 skolem-const-decl "posnat" matrix_operator nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (below type-eq-decl nil nat_types nil)
    (sigma def-decl "real" sigma "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (scal_zero formula-decl nil vectors "vectors/")
    (comp_zero formula-decl nil vectors "vectors/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (sigma_zero formula-decl nil sigma "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (L_inverse_TCC1-1 nil 3547201813 ("" (existence-tcc) nil nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_zero formula-decl nil sigma "reals/")
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (comp_zero formula-decl nil vectors "vectors/")
    (scal_zero formula-decl nil vectors "vectors/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma def-decl "real" sigma "reals/")
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (O const-decl "T3" function_props nil)
    (zero const-decl "Vector" vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/"))
   nil))
 (L_inverse 0
  (thm "thm" 3520674236
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1"
        (lemma "bijective_inverse[Map_linear(n!1,m!1),Mat(m!1,n!1)]")
        (("1" (inst -1 "T(n!1, m!1)(x!1)" "x!1" "L(n!1,m!1)")
          (("1" (assert)
            (("1" (lemma "map_matrix_bij")
              (("1" (inst?) (("1" (swap-rel 1) nil nil)) nil)) nil))
            nil)
           ("2" (lemma "Iso")
            (("2" (hide 2 3) (("2" (inst -1 "m!1" "n!1") nil nil))
              nil))
            nil))
          nil)
         ("2"
          (inst 1
           "(#dom:=n!1,codom:=m!1,mp:=lambda(x:Vector[n!1]):zero[m!1]#)")
          (("2" (expand "linear_map_e?")
            (("2" (skosimp)
              (("2" (expand "linear_map_e?")
                (("2" (skosimp)
                  (("2" (apply-extensionality 1)
                    (("2" (expand "SigmaV" 1)
                      (("2" (expand "*" 1)
                        (("2" (assert)
                          (("2" (expand "o" 1)
                            (("2" (assert)
                              (("2"
                                (lemma "sigma_zero[below[l!1]]")
                                (("1"
                                  (inst -1 "l!1-1" "0")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (inst 1
         "(#dom:=n!1,codom:=m!1,mp:=lambda(x:Vector[n!1]):zero[m!1]#)")
        (("2" (expand "linear_map_e?")
          (("2" (skosimp)
            (("2" (expand "linear_map_e?")
              (("2" (skosimp)
                (("2" (apply-extensionality 1)
                  (("2" (expand "SigmaV" 1)
                    (("2" (expand "o" 1)
                      (("2" (expand "*" 1)
                        (("2" (assert)
                          (("2" (assert)
                            (("2" (lemma "sigma_zero[below[l!1]]")
                              (("1"
                                (inst -1 "l!1-1" "0")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (Mat type-eq-decl nil matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (bijective? const-decl "bool" functions nil)
    (m!1 skolem-const-decl "posnat" matrix_operator nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Iso formula-decl nil matrix_operator nil)
    (bijective_inverse formula-decl nil function_inverse nil))
   shostak)
  (thm "thm" 3520158904
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1"
        (lemma "bijective_inverse[Map_linear(n!1,m!1),Mat(m!1,n!1)]")
        (("1" (inst -1 "T(n!1, m!1)(x!1)" "x!1" "L(n!1,m!1)")
          (("1" (assert)
            (("1" (lemma "map_matrix_bij")
              (("1" (inst?) (("1" (swap-rel 1) nil nil)) nil)) nil))
            nil)
           ("2" (lemma "Iso")
            (("2" (hide 2 3) (("2" (inst -1 "m!1" "n!1") nil nil))
              nil))
            nil))
          nil)
         ("2"
          (inst 1
           "(#dom:=n!1,codom:=m!1,mp:=lambda(x:Vector[n!1]):zero[m!1]#)")
          (("2" (expand "linear_map_e?")
            (("2" (skosimp)
              (("2" (expand "linear_map_e?")
                (("2" (skosimp)
                  (("2" (apply-extensionality 1)
                    (("2" (expand "SigmaV" 1)
                      (("2" (expand "*" 1)
                        (("2" (assert)
                          (("2" (expand "o" 1)
                            (("2" (assert)
                              (("2"
                                (lemma "sigma_zero[below[l!1]]")
                                (("2"
                                  (inst -1 "l!1-1" "0")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (inst 1
         "(#dom:=n!1,codom:=m!1,mp:=lambda(x:Vector[n!1]):zero[m!1]#)")
        (("2" (expand "linear_map_e?")
          (("2" (skosimp)
            (("2" (expand "linear_map_e?")
              (("2" (skosimp)
                (("2" (apply-extensionality 1)
                  (("2" (expand "SigmaV" 1)
                    (("2" (expand "o" 1)
                      (("2" (expand "*" 1)
                        (("2" (assert)
                          (("2" (assert)
                            (("2" (lemma "sigma_zero[below[l!1]]")
                              (("2"
                                (inst -1 "l!1-1" "0")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective_inverse formula-decl nil function_inverse nil)
    (Iso formula-decl nil matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (O const-decl "T3" function_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (comp_zero formula-decl nil vectors "vectors/")
    (sigma_zero formula-decl nil sigma "reals/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scal_zero formula-decl nil vectors "vectors/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (zero const-decl "Vector" vectors "vectors/")
    (TRUE const-decl "bool" booleans nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Mat type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (thm "thm" 3519987670
   ("" (skosimp)
    (("" (apply-extensionality)
      ((""
        (lemma "bijective_inverse[Map_linear(n!1,m!1),Mat(m!1,n!1)]")
        (("" (inst -1 "T(n!1, m!1)(x!1)" "x!1" "L(n!1,m!1)")
          (("1" (assert)
            (("1" (lemma "map_matrix_bij")
              (("1" (inst?) (("1" (swap-rel 1) nil nil)) nil)) nil))
            nil)
           ("2" (lemma "Iso")
            (("2" (hide 2 3) (("2" (inst -1 "m!1" "n!1") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective_inverse formula-decl nil function_inverse nil)
    (Iso formula-decl nil matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (O const-decl "T3" function_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (comp_zero formula-decl nil vectors "vectors/")
    (sigma_zero formula-decl nil sigma "reals/")
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (scal_zero formula-decl nil vectors "vectors/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (zero const-decl "Vector" vectors "vectors/")
    (TRUE const-decl "bool" booleans nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Mat type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (thm "thm" 3519973708
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1"
        (lemma "bijective_inverse[Map_linear(n!1,m!1),Mat(m!1,n!1)]")
        (("1" (inst -1 "T(n!1, m!1)(x!1)" "x!1" "L(n!1,m!1)")
          (("1" (assert)
            (("1" (lemma "map_matrix_bij")
              (("1" (inst?) (("1" (swap-rel 1) nil nil)) nil)) nil))
            nil)
           ("2" (lemma "Iso")
            (("2" (hide 2 3) (("2" (inst -1 "m!1" "n!1") nil nil))
              nil))
            nil)
           ("3" (hide 2 3)
            (("3" (lemma "linear_map_T")
              (("3" (typepred "x!1") (("3" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (lemma "linear_map_T") (("2" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((bijective_inverse formula-decl nil function_inverse nil)
    (Iso formula-decl nil matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Mat type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (L_inverse-1 nil 3519972537
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil))
    nil)
   ((bijective_inverse formula-decl nil function_inverse nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (linear_map_T formula-decl nil matrix_operator nil)
    (Iso formula-decl nil matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Mat type-eq-decl nil matrices nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (Iso_T 0
  (thm "thm" 3520674262
   ("" (skosimp)
    (("" (lemma "Iso")
      (("" (inst -1 "m!1" "n!1")
        (("" (lemma "bij_inv_is_bij[Map_linear(n!1,m!1),Mat(m!1,n!1)]")
          (("1" (inst?)
            (("1" (assert)
              (("1" (lemma "L_inverse")
                (("1" (inst -1 "m!1" "n!1")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (inst 1
             "(#dom:=n!1,codom:=m!1,mp:=lambda(y:Vector[n!1]):zero[m!1]#)")
            (("2" (expand "linear_map_e?")
              (("2" (skosimp)
                (("2" (hide 2)
                  (("2" (expand "linear_map_e?")
                    (("2" (skosimp)
                      (("2" (expand "o")
                        (("2" (expand "*")
                          (("2" (assert)
                            (("2" (lemma "sigma_zero[below[l!1]]")
                              (("1"
                                (expand "SigmaV")
                                (("1"
                                  (apply-extensionality 1)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (inst -1 "l!1-1" "0")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (skosimp)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Iso formula-decl nil matrix_operator nil)
    (Mat type-eq-decl nil matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (TRUE const-decl "bool" booleans nil)
    (L_inverse formula-decl nil matrix_operator nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (sigma_zero formula-decl nil sigma "reals/")
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (l!1 skolem-const-decl "posnat" matrix_operator nil)
    (comp_zero formula-decl nil vectors "vectors/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (scal_zero formula-decl nil vectors "vectors/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "T3" function_props nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (m!1 skolem-const-decl "posnat" matrix_operator nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (zero const-decl "Vector" vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (thm "thm" 3519976339
   ("" (skosimp)
    (("" (lemma "Iso")
      (("" (inst -1 "m!1" "n!1")
        (("" (lemma "bij_inv_is_bij[Map_linear(n!1,m!1),Mat(m!1,n!1)]")
          (("1" (inst?)
            (("1" (assert)
              (("1" (lemma "L_inverse")
                (("1" (inst -1 "m!1" "n!1")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (inst 1
             "(#dom:=n!1,codom:=m!1,mp:=lambda(y:Vector[n!1]):zero[m!1]#)")
            (("2" (expand "linear_map_e?")
              (("2" (skosimp)
                (("2" (hide 2)
                  (("2" (expand "linear_map_e?")
                    (("2" (skosimp)
                      (("2" (expand "o")
                        (("2" (expand "*")
                          (("2" (assert)
                            (("2" (lemma "sigma_zero[below[l!1]]")
                              (("2"
                                (expand "SigmaV")
                                (("2"
                                  (apply-extensionality 1)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (inst -1 "l!1-1" "0")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (zero const-decl "Vector" vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (O const-decl "T3" function_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (scal_zero formula-decl nil vectors "vectors/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (comp_zero formula-decl nil vectors "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (sigma_zero formula-decl nil sigma "reals/")
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (L_inverse formula-decl nil matrix_operator nil)
    (TRUE const-decl "bool" booleans nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (Iso formula-decl nil matrix_operator nil))
   shostak)
  (Iso_T-1 nil 3519915904
   ("" (skosimp)
    (("" (lemma "Iso")
      (("" (inst -1 "m!1" "n!1")
        (("" (lemma "bij_inv_is_bij[Map_linear(n!1,m!1),Mat(m!1,n!1)]")
          (("1" (inst?)
            (("1" (assert)
              (("1" (lemma "L_inverse")
                (("1" (inst -1 "m!1" "n!1")
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (hide -3)
                        (("1" (hide -1)
                          (("1" (expand "bijective?")
                            (("1" (flatten)
                              (("1"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "surjective?")
                                  (("2"
                                    (hide -1)
                                    (("2" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (zero const-decl "Vector" vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (O const-decl "T3" function_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (scal_zero formula-decl nil vectors "vectors/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (comp_zero formula-decl nil vectors "vectors/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (sigma_zero formula-decl nil sigma "reals/")
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (L_inverse formula-decl nil matrix_operator nil)
    (TRUE const-decl "bool" booleans nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (Iso formula-decl nil matrix_operator nil))
   shostak))
 (mult_comp_TCC1 0
  (mult_comp_TCC1-1 nil 3519731615 ("" (subtype-tcc) nil nil) nil nil))
 (mult_comp_TCC2 0
  (mult_comp_TCC2-1 nil 3519731615 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Matrix" matrices nil))
   nil))
 (mult_comp_TCC3 0
  (mult_comp_TCC3-1 nil 3519731615 ("" (subtype-tcc) nil nil)
   ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (same? const-decl "bool" linear_map nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (mult_comp 0
  (thm "thm" 3520674288
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1" (hide 2) (("1" (grind) nil nil)) nil)
       ("2" (hide 2) (("2" (grind) nil nil)) nil)
       ("3" (hide 2)
        (("3" (expand "o")
          (("3" (apply-extensionality)
            (("3" (hide 2)
              (("3" (lemma "T_matr")
                (("3" (expand "o")
                  (("3" (copy -1)
                    (("3" (inst -1 "p!1" "n!1" "A!1*B!1" "x!1")
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (copy -1)
                            (("1" (inst -1 "m!1" "n!1" "B!1" "x!1")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (inst
                                     -1
                                     "p!1"
                                     "m!1"
                                     "A!1"
                                     "B!1*x!1")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma "mult_assoc_vect")
                                            (("1"
                                              (inst
                                               -1
                                               "A!1"
                                               "B!1"
                                               "x!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (O const-decl "Maping" linear_map nil)
    (same? const-decl "bool" linear_map nil)
    (* const-decl "Matrix" matrices nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma def-decl "real" sigma "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (B!1 skolem-const-decl "Mat(m!1, n!1)" matrix_operator nil)
    (A!1 skolem-const-decl "Mat(p!1, m!1)" matrix_operator nil)
    (m!1 skolem-const-decl "posnat" matrix_operator nil)
    (p!1 skolem-const-decl "posnat" matrix_operator nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_assoc_vect formula-decl nil matrices nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (T_matr formula-decl nil matrix_operator nil)
    (O const-decl "T3" function_props nil)
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak)
  (thm "thm" 3519908001
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1" (hide 2) (("1" (grind) nil nil)) nil)
       ("2" (hide 2) (("2" (grind) nil nil)) nil)
       ("3" (hide 2)
        (("3" (expand "o")
          (("3" (apply-extensionality)
            (("3" (hide 2)
              (("3" (lemma "T_matr")
                (("3" (expand "o")
                  (("3" (copy -1)
                    (("3" (inst -1 "p!1" "n!1" "A!1*B!1" "x!1")
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (copy -1)
                            (("1" (inst -1 "m!1" "n!1" "B!1" "x!1")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (inst
                                     -1
                                     "p!1"
                                     "m!1"
                                     "A!1"
                                     "B!1*x!1")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma "mult_assoc_vect")
                                            (("1"
                                              (inst
                                               -1
                                               "A!1"
                                               "B!1"
                                               "x!1")
                                              (("1"
                                                (lemma
                                                 " mult_assoc_vect")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (O const-decl "T3" function_props nil)
    (T_matr formula-decl nil matrix_operator nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (mult_assoc_vect formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (same? const-decl "bool" linear_map nil)
    (O const-decl "Maping" linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (mult_comp-1 nil 3519733206
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1" (hide 2) (("1" (grind) nil nil)) nil)
       ("2" (hide 2) (("2" (grind) nil nil)) nil)
       ("3" (hide 2)
        (("3" (expand "o")
          (("3" (apply-extensionality)
            (("3" (hide 2)
              (("3" (lemma "T_matr")
                (("3" (expand "o")
                  (("3" (copy -1)
                    (("3" (inst -1 "p!1" "n!1" "A!1*B!1" "x!1")
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (copy -1)
                            (("1" (inst -1 "m!1" "n!1" "B!1" "x!1")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (inst
                                     -1
                                     "p!1"
                                     "m!1"
                                     "A!1"
                                     "B!1*x!1")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma "mult_assoc_vect")
                                            (("1"
                                              (inst
                                               -1
                                               "A!1"
                                               "B!1"
                                               "x!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (O const-decl "T3" function_props nil)
    (T_matr formula-decl nil matrix_operator nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (mult_assoc_vect formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (Map type-eq-decl nil linear_map nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (same? const-decl "bool" linear_map nil)
    (O const-decl "Maping" linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (comp_mult_TCC1 0
  (comp_mult_TCC1-1 nil 3519731615
   ("" (skosimp)
    (("" (split)
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (expand "linear_map_e?")
        (("3" (skosimp)
          (("3" (lemma "linear_map_e_comp")
            (("3" (inst -1 "m!1" "n!1" "p!1" "f!1" "g!1")
              (("3" (assert)
                (("3" (expand "linear_map_e?" -1)
                  (("3" (inst -1 "l!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "Maping" linear_map nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e_comp formula-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil))
   nil))
 (comp_mult_TCC2 0
  (teo "fin" 3547201238
   ("" (skosimp)
    (("" (split)
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (lemma "linear_comp")
        (("3" (typepred "f!1")
          (("3" (typepred "g!1")
            (("3" (inst -7 "n!1" "m!1" "p!1" "g!1" "f!1") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil))
   shostak)
  (comp_mult_TCC2-1 nil 3519731615
   ("" (skosimp)
    (("" (split)
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (postpone) nil nil))
      nil))
    nil)
   ((linear_comp formula-decl nil matrix_operator nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (O const-decl "Maping" linear_map nil))
   nil))
 (comp_mult 0
  (thm1 "thm1" 3519918861
   ("" (skosimp)
    (("" (lemma "Iso_T")
      (("" (inst -1 "p!1" "n!1")
        (("" (expand "bijective?")
          (("" (flatten)
            (("" (expand "injective?")
              ((""
                (inst -1 "L(n!1, p!1)(f!1 o g!1)"
                 "L(m!1, p!1)(f!1) * L(n!1, m!1)(g!1)")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (hide -1)
                      (("1" (lemma "iso_map")
                        (("1" (copy -1)
                          (("1" (copy -2)
                            (("1" (inst -1 "p!1" "n!1" "f!1 o g!1")
                              (("1"
                                (replace -1)
                                (("1"
                                  (lemma "mult_comp")
                                  (("1"
                                    (inst
                                     -1
                                     "m!1"
                                     "n!1"
                                     "p!1"
                                     "L(m!1, p!1)(f!1)"
                                     "L(n!1, m!1)(g!1)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (inst -1 "p!1" "m!1" "f!1")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (inst
                                               -2
                                               "m!1"
                                               "n!1"
                                               "g!1")
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (hide 2) (("1" (grind) nil nil)) nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Iso_T formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (sigma def-decl "real" sigma "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_comp formula-decl nil matrix_operator nil)
    (iso_map formula-decl nil matrix_operator nil)
    (O const-decl "Maping" linear_map nil)
    (same? const-decl "bool" linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (* const-decl "Matrix" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (m!1 skolem-const-decl "posnat" matrix_operator nil)
    (p!1 skolem-const-decl "posnat" matrix_operator nil)
    (f!1 skolem-const-decl "Map_linear(m!1, p!1)" matrix_operator nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (g!1 skolem-const-decl "Map_linear(n!1, m!1)" matrix_operator nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (comp_mult-1 nil 3519909651
   ("" (skosimp)
    (("" (lemma "Iso_T")
      (("" (inst -1 "p!1" "n!1")
        (("" (expand "bijective?")
          (("" (flatten)
            (("" (expand "injective?")
              ((""
                (inst -1 "L(n!1, p!1)(f!1 o g!1)"
                 "L(m!1, p!1)(f!1) * L(n!1, m!1)(g!1)")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (hide -1)
                      (("1" (lemma "iso_map")
                        (("1" (copy -1)
                          (("1" (copy -2)
                            (("1" (inst -1 "p!1" "n!1" "f!1 o g!1")
                              (("1"
                                (inst -2 "p!1" "m!1" "f!1")
                                (("1"
                                  (replace -1)
                                  (("1" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (Mat type-eq-decl nil matrices nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (same? const-decl "bool" linear_map nil)
    (O const-decl "Maping" linear_map nil)
    (iso_map formula-decl nil matrix_operator nil)
    (mult_comp formula-decl nil matrix_operator nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (injective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (Iso_T formula-decl nil matrix_operator nil))
   shostak))
 (iso_ide_L_TCC1 0
  (tcc "tcc" 3520157981
       ("" (skosimp)
        (("" (split)
          (("1" (assert) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil)
           ("3" (expand "linear_map_e?")
            (("3" (skosimp)
              (("3" (expand "linear_map_e?")
                (("3" (split)
                  (("1" (expand "id") (("1" (propax) nil nil)) nil)
                   ("2" (expand "id") (("2" (propax) nil nil)) nil)
                   ("3" (skosimp)
                    (("3" (expand "id")
                      (("3" (expand "o")
                        (("3" (assert)
                          (("3" (grind)
                            (("3" (apply-extensionality) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((id const-decl "Maping" linear_map nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (OR const-decl "[bool, bool -> bool]" booleans nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (below type-eq-decl nil nat_types nil)
        (<= const-decl "bool" reals nil)
        (T_low type-eq-decl nil sigma "reals/")
        (T_high type-eq-decl nil sigma "reals/")
        (Vector type-eq-decl nil vectors "vectors/")
        (SigmaV const-decl "Vector[n]" sigma_vector nil)
        (numfield nonempty-type-eq-decl nil number_fields nil)
        (- const-decl "[numfield, numfield -> numfield]" number_fields
           nil)
        (* const-decl
           "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
           sigma_vector nil)
        (Maping type-eq-decl nil linear_map nil)
        (real_gt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (real_plus_real_is_real application-judgement "real" reals nil)
        (real_times_real_is_real application-judgement "real" reals
         nil)
        (real_le_is_total_order name-judgement "(total_order?[real])"
         real_props nil)
        (real_lt_is_strict_total_order name-judgement
         "(strict_total_order?[real])" real_props nil)
        (sigma def-decl "real" sigma "reals/")
        (* const-decl "Vector" vectors "vectors/")
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (real nonempty-type-from-decl nil reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nat nonempty-type-eq-decl nil naturalnumbers nil)
        (< const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (Index type-eq-decl nil vectors "vectors/")
        (O const-decl "T3" function_props nil)
        (linear_map_e? const-decl "bool" linear_map_def nil)
        (linear_map_e? const-decl "bool" linear_map_def nil))
       shostak)
  (iso_ide_L_TCC1-1 nil 3519977273 ("" (subtype-tcc) nil nil)
   ((id const-decl "Maping" linear_map nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (Vector type-eq-decl nil vectors "vectors/")
    (SigmaV const-decl "Vector[n]" sigma_vector nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[[T -> real], [T -> Vector[n]] -> [T -> Vector[n]]]"
       sigma_vector nil)
    (Maping type-eq-decl nil linear_map nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Vector" vectors "vectors/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Index type-eq-decl nil vectors "vectors/")
    (O const-decl "T3" function_props nil))
   nil))
 (iso_ide_L 0
  (iso_ide_L-1 nil 3519987741
   ("" (skosimp)
    (("" (expand "L")
      (("" (apply-extensionality)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil)
         ("4" (split) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil)
         ("5" (grind) nil nil) ("6" (grind) nil nil))
        nil))
      nil))
    nil)
   ((L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (id const-decl "Maping" linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Index type-eq-decl nil vectors "vectors/")
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (iso_ide_T_TCC1 0
  (iso_ide_T_TCC1-1 nil 3519977273 ("" (subtype-tcc) nil nil)
   ((I const-decl "(identity?)" matrices nil)) nil))
 (iso_ide_T 0
  (thm "thm" 3520674323
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (apply-extensionality 1)
        (("3" (apply-extensionality 1)
          (("3" (expand "T" 1)
            (("3" (expand "id" 1)
              (("3" (hide 2 3 4)
                (("3" (lemma "sigma_middle[below[I(n!1)`cols]]")
                  (("1"
                    (inst -1
                     "LAMBDA (i: below[I(n!1)`cols]): I(n!1)`matrix(x!2, i) * x!1(i)"
                     "I(n!1)`cols-1" "x!2" "0")
                    (("1" (assert)
                      (("1" (case " I(n!1)`cols - 1 >= x!2")
                        (("1" (assert)
                          (("1" (replace -2)
                            (("1" (hide -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (case
                                   "sigma(0, x!2 - 1,
            LAMBDA (i: below[I(n!1)`cols]): I(n!1)`matrix(x!2, i) * x!1(i))=0")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (case
                                       "sigma(1 + x!2, I(n!1)`cols - 1,
             LAMBDA (i: below[I(n!1)`cols]):
               I(n!1)`matrix(x!2, i) * x!1(i))=0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "I")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "sigma_eq[below[I(n!1)`cols]]")
                                          (("2"
                                            (lemma
                                             "sigma_zero[below[I(n!1)`cols]]")
                                            (("2"
                                              (inst
                                               -1
                                               "I(n!1)`cols-1"
                                               "1+x!2")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst
                                                   -2
                                                   "LAMBDA (i: below[I(n!1)`cols]): I(n!1)`matrix(x!2, i) * x!1(i)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (expand "I" 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (typepred
                                                         "i!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skosimp)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma
                                       "sigma_eq[below[I(n!1)`cols]]")
                                      (("2"
                                        (lemma
                                         "sigma_zero[below[I(n!1)`cols]]")
                                        (("2"
                                          (inst -1 "x!2-1" "0")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst
                                               -2
                                               "LAMBDA (i: below[I(n!1)`cols]): I(n!1)`matrix(x!2, i) * x!1(i)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (expand "I" 1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (typepred "i!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp)
                                    (("3"
                                      (grind)
                                      (("3"
                                        (grind)
                                        (("3"
                                          (typepred "i!1")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil)
                     ("3" (skosimp)
                      (("3" (expand "T")
                        (("3" (hide 2)
                          (("3" (typepred "i!1")
                            (("3" (assert) (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (skosimp) (("4" (grind) nil nil)) nil))
                    nil)
                   ("2" (skosimp) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (id const-decl "Maping" linear_map nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (sigma_middle formula-decl nil sigma "reals/")
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_zero formula-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_high type-eq-decl nil sigma "reals/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (x!2 skolem-const-decl "Index[T(n!1, n!1)(I(n!1))`codom]"
     matrix_operator nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak)
  (thm "thm" 3520161925
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (apply-extensionality 1)
        (("3" (apply-extensionality 1)
          (("3" (expand "T" 1)
            (("3" (expand "id" 1)
              (("3" (hide 2 3 4)
                (("3" (lemma "sigma_middle[below[I(n!1)`cols]]")
                  (("3"
                    (inst -1
                     "LAMBDA (i: below[I(n!1)`cols]): I(n!1)`matrix(x!2, i) * x!1(i)"
                     "I(n!1)`cols-1" "x!2" "0")
                    (("1" (assert)
                      (("1" (case " I(n!1)`cols - 1 >= x!2")
                        (("1" (assert)
                          (("1" (replace -2)
                            (("1" (hide -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (case
                                   "sigma(0, x!2 - 1,
            LAMBDA (i: below[I(n!1)`cols]): I(n!1)`matrix(x!2, i) * x!1(i))=0")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (case
                                       "sigma(1 + x!2, I(n!1)`cols - 1,
             LAMBDA (i: below[I(n!1)`cols]):
               I(n!1)`matrix(x!2, i) * x!1(i))=0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "I")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "sigma_eq[below[I(n!1)`cols]]")
                                          (("2"
                                            (lemma
                                             "sigma_zero[below[I(n!1)`cols]]")
                                            (("2"
                                              (inst
                                               -1
                                               "I(n!1)`cols-1"
                                               "1+x!2")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (inst
                                                   -2
                                                   "LAMBDA (i: below[I(n!1)`cols]): I(n!1)`matrix(x!2, i) * x!1(i)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (expand "I" 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (typepred
                                                         "i!1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skosimp)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma
                                       "sigma_eq[below[I(n!1)`cols]]")
                                      (("2"
                                        (lemma
                                         "sigma_zero[below[I(n!1)`cols]]")
                                        (("2"
                                          (inst -1 "x!2-1" "0")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst
                                               -2
                                               "LAMBDA (i: below[I(n!1)`cols]): I(n!1)`matrix(x!2, i) * x!1(i)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (expand "I" 1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (typepred "i!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp)
                                    (("3"
                                      (grind)
                                      (("3"
                                        (grind)
                                        (("3"
                                          (typepred "i!1")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil)
                     ("3" (skosimp)
                      (("3" (expand "T")
                        (("3" (hide 2)
                          (("3" (typepred "i!1")
                            (("3" (assert) (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (skosimp) (("4" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_high type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma "reals/")
    (sigma_zero formula-decl nil sigma "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (sigma_eq formula-decl nil sigma "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (sigma_middle formula-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (id const-decl "Maping" linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (iso_ide_T-1 nil 3519987835
   ("" (skosimp)
    (("" (apply-extensionality)
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (apply-extensionality 1)
        (("3" (apply-extensionality 1)
          (("3" (expand "T" 1)
            (("3" (expand "id" 1)
              (("3" (hide 2 3 4) (("3" (postpone) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma "reals/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_low type-eq-decl nil sigma "reals/")
    (sigma_zero formula-decl nil sigma "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_nat application-judgement "nat" vectors "vectors/")
    (sigma_eq formula-decl nil sigma "reals/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (below type-eq-decl nil nat_types nil)
    (sigma_middle formula-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (Map type-eq-decl nil linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (id const-decl "Maping" linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (Matrix_inv_TCC1 0
  (Matrix_inv_TCC1-1 nil 3518880038 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (squareMat? const-decl "bool" matrices nil))
   nil))
 (inverse_invertible_TCC1 0
  (inverse_invertible_TCC1-1 nil 3519568167 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (square? const-decl "bool" matrices nil)
    (squareMat? const-decl "bool" matrices nil))
   nil))
 (inverse_invertible_TCC2 0
  (inverse_invertible_TCC2-1 nil 3519568167
   ("" (skosimp)
    (("" (split)
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (lemma "linear_inverse_map_n")
        (("3" (inst -1 "n!1" "T(n!1, n!1)(A!1)")
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (lemma "linear_map_T") (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (inverse const-decl "Maping" linear_map nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (linear_inverse_map_n formula-decl nil matrix_operator nil))
   nil))
 (inverse_invertible_TCC3 0
  (inverse_invertible_TCC3-1 nil 3519568167 ("" (subtype-tcc) nil nil)
   ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (inverse_invertible 0
  (inverse_invertible-1 nil 3519909718
   ("" (skosimp)
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (lemma "iso_map")
        (("2" (inst -1 "n!1" "n!1" "inverse(n!1)(T(n!1, n!1)(A!1))")
          (("2" (replace -1)
            (("2" (expand "bijective?")
              (("2" (lemma "bij_inv_is_bij[Vector[n!1],Vector[n!1]]")
                (("2" (inst -1 "T(n!1,n!1)(A!1)`mp")
                  (("2" (assert)
                    (("2" (expand "bijective?")
                      (("2" (flatten)
                        (("2" (split)
                          (("1" (assert) (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (squareMat? const-decl "bool" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (bijective? const-decl "bool" linear_map nil)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (iso_map formula-decl nil matrix_operator nil))
   shostak))
 (inv_TCC1 0
  (tcc "tcc" 3518880627
       ("" (skosimp)
        (("" (typepred "A!1")
          (("" (expand "squareMat?")
            (("" (expand "square?") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ((Matrix_inv type-eq-decl nil matrix_operator nil)
        (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
         nil)
        (Map_linear type-eq-decl nil linear_map_def nil)
        (linear_map_e? const-decl "bool" linear_map_def nil)
        (Mat type-eq-decl nil matrices nil)
        (bijective? const-decl "bool" linear_map nil)
        (Map type-eq-decl nil linear_map nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (Maping type-eq-decl nil linear_map nil)
        (Vector type-eq-decl nil vectors "vectors/")
        (squareMat? const-decl "bool" matrices nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (Square type-eq-decl nil matrices nil)
        (square? const-decl "bool" matrices nil)
        (Matrix type-eq-decl nil matrices nil)
        (real nonempty-type-from-decl nil reals nil)
        (below type-eq-decl nil naturalnumbers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil))
       shostak)
  (tcc "tcc" 3483736924
       ("" (skosimp)
        (("" (lemma "linear_map_matrix_inv")
          (("" (inst -1 "A!1") (("" (assert) nil nil)) nil)) nil))
        nil)
       ((Matrix_inv type-eq-decl nil matrix_operator nil)
        (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
         nil)
        (Map type-eq-decl nil linear_map nil)
        (Mat type-eq-decl nil matrices nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (bijective? const-decl "bool" linear_map nil)
        (Maping type-eq-decl nil linear_map nil)
        (Vector type-eq-decl nil vectors "vectors/")
        (SquareMat type-eq-decl nil matrices nil)
        (squareMat? const-decl "bool" matrices nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number nonempty-type-decl nil numbers nil)
        (Square type-eq-decl nil matrices nil)
        (square? const-decl "bool" matrices nil)
        (Matrix type-eq-decl nil matrices nil)
        (real nonempty-type-from-decl nil reals nil)
        (below type-eq-decl nil naturalnumbers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (NOT const-decl "[bool -> bool]" booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (boolean nonempty-type-decl nil booleans nil))
       shostak)
  (inv_TCC1-1 nil 3483356661
   ("" (skosimp)
    (("" (lemma "linear_map_matrix_inv")
      (("" (inst -1 "A!1")
        (("" (assert) (("" (postpone) nil nil)) nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (bijective? const-decl "bool" functions nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil))
 (inv_TCC2 0
  (tcc "tcc" 3518880671
       ("" (skosimp)
        (("" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (lemma "linear_inverse_map_n")
            (("3" (lemma "linear_map_T")
              (("3" (inst -1 "n!1" "n!1" "A!1")
                (("3" (inst -2 "n!1" "T(n!1, n!1)(A!1)")
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
         nil)
        (inverse const-decl "Maping" linear_map nil)
        (real_times_real_is_real application-judgement "real" reals
         nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (linear_map_T formula-decl nil matrix_operator nil)
        (Matrix_inv type-eq-decl nil matrix_operator nil)
        (Map_linear type-eq-decl nil linear_map_def nil)
        (linear_map_e? const-decl "bool" linear_map_def nil)
        (bijective? const-decl "bool" linear_map nil)
        (Map type-eq-decl nil linear_map nil)
        (Maping type-eq-decl nil linear_map nil)
        (Vector type-eq-decl nil vectors "vectors/")
        (squareMat? const-decl "bool" matrices nil)
        (Square type-eq-decl nil matrices nil)
        (square? const-decl "bool" matrices nil)
        (Mat type-eq-decl nil matrices nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (Matrix type-eq-decl nil matrices nil)
        (below type-eq-decl nil naturalnumbers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (int nonempty-type-eq-decl nil integers nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (real nonempty-type-from-decl nil reals nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (linear_inverse_map_n formula-decl nil matrix_operator nil))
       shostak)
  (tcc "tcc" 3483779107
       ("" (skosimp)
        (("" (assert)
          (("" (lemma "iso_map")
            (("" (inst -1 "e!1" "inverse(T(A!1))")
              (("" (assert)
                (("" (lemma "bijecti_fun_equa")
                  ((""
                    (inst -1 "inverse(T(A!1))"
                     "T(L(e!1)(inverse(T(A!1))))")
                    (("" (case " bijective?(inverse(T(A!1)))")
                      (("1" (assert) nil nil)
                       ("2"
                        (lemma "bij_inv_is_bij[Vector[n],Vector[n]]")
                        (("2" (inst -1 "T(A!1)")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ((sigma def-decl "real" sigma "reals/")
        (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
         nil)
        (inverse const-decl "Maping" linear_map nil)
        (real_times_real_is_real application-judgement "real" reals
         nil)
        (int_minus_int_is_int application-judgement "int" integers
         nil))
       shostak)
  (inv_TCC2-1 nil 3483736048
   ("" (skosimp)
    (("" (assert)
      (("" (lemma "iso_map")
        (("" (inst -1 "e!1" "inverse(T(A!1))")
          (("" (assert)
            (("" (lemma "bijecti_fun_equa")
              ((""
                (inst -1 "inverse(T(A!1))"
                 "T(L(e!1)(inverse(T(A!1))))")
                (("" (case " bijective?(inverse(T(A!1)))")
                  (("1" (assert) nil nil) ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((iso_map formula-decl nil matrix_operator nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (bijecti_fun_equa formula-decl nil linear_map_def nil)
    (bijective? const-decl "bool" functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (below type-eq-decl nil nat_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (inv_TCC3 0
  (tcc "tcc" 3519976689
       ("" (skosimp)
        (("" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (lemma "inverse_invertible")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
         nil)
        (inverse const-decl "Maping" linear_map nil)
        (inverse const-decl "D" function_inverse nil)
        (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
         nil)
        (square? const-decl "bool" matrices nil)
        (real_times_real_is_real application-judgement "real" reals
         nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (squareMat? const-decl "bool" matrices nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (below type-eq-decl nil naturalnumbers nil)
        (real nonempty-type-from-decl nil reals nil)
        (Matrix type-eq-decl nil matrices nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (Square type-eq-decl nil matrices nil)
        (AND const-decl "[bool, bool -> bool]" booleans nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (Vector type-eq-decl nil vectors "vectors/")
        (Maping type-eq-decl nil linear_map nil)
        (= const-decl "[T, T -> boolean]" equalities nil)
        (Map type-eq-decl nil linear_map nil)
        (bijective? const-decl "bool" linear_map nil)
        (Mat type-eq-decl nil matrices nil)
        (linear_map_e? const-decl "bool" linear_map_def nil)
        (Map_linear type-eq-decl nil linear_map_def nil)
        (Matrix_inv type-eq-decl nil matrix_operator nil)
        (inverse_invertible formula-decl nil matrix_operator nil))
       shostak)
  (inv_TCC3-1 nil 3518880149 ("" (subtype-tcc) nil nil)
   ((sigma def-decl "real" sigma "reals/")
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (square? const-decl "bool" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (squareMat? const-decl "bool" matrices nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Square type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Map type-eq-decl nil linear_map nil)
    (bijective? const-decl "bool" linear_map nil)
    (Mat type-eq-decl nil matrices nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (inverse_invertible formula-decl nil matrix_operator nil))
   nil))
 (iso_inv_TCC1 0
  (iso_inv_TCC1-1 nil 3483736868 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (iso_inv_TCC2 0
  (iso_inv_TCC2-1 nil 3518880449 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (iso_inv_TCC3 0
  (iso_inv_TCC3-1 nil 3547201569 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (* const-decl "Matrix" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (iso_inv 0
  (thm "thm" 3520163424
   ("" (skosimp)
    (("" (split)
      (("1" (expand "inv")
        (("1" (lemma "map_matrix_bij")
          (("1" (inst -1 "n!1" "n!1" "M!1")
            (("1" (name "aa" "inverse(n!1)(T(n!1, n!1)(M!1))")
              (("1" (replace -1)
                (("1" (swap-rel -1)
                  (("1" (swap-rel -2)
                    (("1" (replace -2)
                      (("1" (lemma "comp_mult")
                        (("1"
                          (inst -1 "n!1" "n!1" "n!1" "T(n!1,n!1)(M!1)"
                           "aa")
                          (("1" (swap-rel -1)
                            (("1" (replace -1)
                              (("1"
                                (lemma "iso_ide_L")
                                (("1"
                                  (inst -1 "n!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "aa o T(n!1,n!1)(M!1)=id(n!1)")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "aa" 1)
                                        (("2"
                                          (apply-extensionality 1)
                                          (("1"
                                            (expand "o" 1)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "o" 1)
                                            (("2" (grind) nil nil))
                                            nil)
                                           ("3"
                                            (expand "o" 1)
                                            (("3"
                                              (hide 2 3)
                                              (("3"
                                                (expand "o" 1)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (apply-extensionality
                                                     1)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (expand "id" 1)
                                                        (("1"
                                                          (expand
                                                           "bijective?")
                                                          (("1"
                                                            (lemma
                                                             "iso_map")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "n!1"
                                                               "n!1"
                                                               "T(n!1,n!1)(M!1)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "comp_inverse_left[Vector[n!1],Vector[n!1]]")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x!1"
                                                                     "T(n!1,n!1)(M!1)`mp")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (split)
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (split)
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "inv")
        (("2" (lemma "map_matrix_bij")
          (("2" (inst -1 "n!1" "n!1" "M!1")
            (("2" (swap-rel -1)
              (("2" (name "ss" "inverse(n!1)(T(n!1, n!1)(M!1))")
                (("2" (replace -1)
                  (("2" (replace -2)
                    (("2" (lemma "comp_mult")
                      (("2" (inst?)
                        (("2" (swap-rel -1)
                          (("2" (replace -1)
                            (("2" (lemma "iso_ide_L")
                              (("2"
                                (inst -1 "n!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (case
                                     "T(n!1,n!1)(M!1) o ss =id(n!1) ")
                                    (("1"
                                      (replace -1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "ss")
                                      (("2"
                                        (expand "o" 1)
                                        (("2"
                                          (apply-extensionality 1)
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil)
                                           ("3"
                                            (hide 2 3)
                                            (("3"
                                              (expand "o" 1)
                                              (("3"
                                                (apply-extensionality
                                                 1)
                                                (("1"
                                                  (expand "id" 1)
                                                  (("1"
                                                    (swap-rel -4)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (expand
                                                         "bijective?")
                                                        (("1"
                                                          (lemma
                                                           "comp_inverse_right[Vector[n!1],Vector[n!1]]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "T(n!1,n!1)(M!1)`mp")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (split)
                                            (("1"
                                              (skosimp)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_matrix_bij formula-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (inverse const-decl "Maping" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "Maping" linear_map nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (bijective? const-decl "bool" linear_map nil)
    (comp_inverse_left formula-decl nil function_inverse nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (inverse const-decl "D" function_inverse nil)
    (bijective? const-decl "bool" functions nil)
    (iso_map formula-decl nil matrix_operator nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (M!1 skolem-const-decl "Square" matrix_operator nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (O const-decl "T3" function_props nil)
    (aa skolem-const-decl "Maping" matrix_operator nil)
    (iso_ide_L formula-decl nil matrix_operator nil)
    (same? const-decl "bool" linear_map nil)
    (O const-decl "Maping" linear_map nil)
    (* const-decl "Matrix" matrices nil)
    (comp_mult formula-decl nil matrix_operator nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (ss skolem-const-decl "Maping" matrix_operator nil)
    (comp_inverse_right formula-decl nil function_inverse nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (squareMat? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil))
   shostak)
  (thm "thm" 3483713664
   ("" (skosimp)
    (("" (split)
      (("1" (expand "inv")
        (("1" (lemma "map_matrix_bij")
          (("1" (inst -1 "n!1" "n!1" "M!1")
            (("1" (name "aa" "inverse(n!1)(T(n!1, n!1)(M!1))")
              (("1" (replace -1)
                (("1" (swap-rel -1)
                  (("1" (swap-rel -2)
                    (("1" (replace -2)
                      (("1" (lemma "comp_mult")
                        (("1"
                          (inst -1 "n!1" "n!1" "n!1" "T(n!1,n!1)(M!1)"
                           "aa")
                          (("1" (swap-rel -1)
                            (("1" (replace -1)
                              (("1" (postpone) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   ((I const-decl "(identity?)" matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (comp_inverse_right formula-decl nil function_inverse nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (comp_mult formula-decl nil matrix_operator nil)
    (O const-decl "Maping" linear_map nil)
    (same? const-decl "bool" linear_map nil)
    (iso_ide_L formula-decl nil matrix_operator nil)
    (O const-decl "T3" function_props nil)
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (iso_map formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (inverse const-decl "D" function_inverse nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (comp_inverse_left formula-decl nil function_inverse nil)
    (bijective? const-decl "bool" linear_map nil)
    (sigma def-decl "real" sigma "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (id const-decl "Maping" linear_map nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (map_matrix_bij formula-decl nil matrix_operator nil))
   shostak)
  (thm "thm" 3483696146
   ("" (skosimp)
    (("" (lemma "iso_ide")
      (("" (inst -1 "e!1")
        (("" (assert)
          (("" (lemma "inv_map")
            (("" (inst -1 "A!1")
              (("" (assert)
                (("" (flatten)
                  (("" (lemma "operator")
                    (("" (inst -1 "e!1" "inverse(T(A!1)) o T(A!1)" "I")
                      (("1" (assert)
                        (("1" (replace -4)
                          (("1" (lemma "operator")
                            (("1"
                              (inst -1 "e!1" "T(A!1) o inverse(T(A!1))"
                               "I")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (lemma "iso_mult_map")
                                    (("1"
                                      (inst
                                       -1
                                       "e!1"
                                       "T(A!1)"
                                       "inverse(T(A!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "iso_mult_map")
                                          (("1"
                                            (inst
                                             -1
                                             "e!1"
                                             " inverse(T(A!1))"
                                             "T(A!1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 " bijective?(inverse(T(A!1)))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (expand
                                                         "inv"
                                                         1)
                                                        (("1"
                                                          (lemma
                                                           "map_matrix_bij")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "A!1"
                                                             "e!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2)
                                                  (("2"
                                                    (lemma
                                                     "bij_inv_is_bij[Vector[n],Vector[n]]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "T(A!1)")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "linear_map_T")
                                              (("2"
                                                (inst -1 "A!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma
                                               "linear_map_matrix_inv")
                                              (("3"
                                                (inst -1 "A!1")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "linear_map_matrix_inv")
                                          (("2"
                                            (inst -1 "A!1")
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "linear_map_T")
                                        (("3"
                                          (inst -1 "A!1")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "linear_map_matrix_inv")
                                (("2"
                                  (inst -1 "A!1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "linear_map_matrix_inv")
                        (("2" (inst -1 "A!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (operator formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (linear_map_T formula-decl nil matrix_operator nil)
    (O const-decl "T3" function_props nil)
    (inverse const-decl "D" function_inverse nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil))
   shostak)
  (thm "thm" 3483095606
   ("" (skosimp)
    (("" (lemma "iso_ide")
      (("" (inst -1 "e!1")
        (("" (assert)
          (("" (lemma "inv_map")
            (("" (inst -1 "A!1")
              (("" (assert)
                (("" (flatten)
                  (("" (lemma "operator")
                    (("" (inst -1 "e!1" "inverse(T(A!1)) o T(A!1)" "I")
                      (("1" (assert)
                        (("1" (replace -4)
                          (("1" (lemma "operator")
                            (("1"
                              (inst -1 "e!1" "T(A!1) o inverse(T(A!1))"
                               "I")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (lemma "iso_mult_map")
                                    (("1"
                                      (inst
                                       -1
                                       "e!1"
                                       "T(A!1)"
                                       "inverse(T(A!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "iso_mult_map")
                                          (("1"
                                            (inst
                                             -1
                                             "e!1"
                                             " inverse(T(A!1))"
                                             "T(A!1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 " bijective?(inverse(T(A!1)))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (expand
                                                         "inv"
                                                         1)
                                                        (("1"
                                                          (lemma
                                                           "map_matrix_bij")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "A!1"
                                                             "e!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1 -2)
                                                  (("2"
                                                    (lemma
                                                     "bij_inv_is_bij[Vector[n],Vector[n]]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "T(A!1)")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "linear_map_T")
                                              (("2"
                                                (inst -1 "A!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma
                                               "linear_map_matrix_inv")
                                              (("3"
                                                (inst -1 "A!1")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "linear_map_matrix_inv")
                                          (("2"
                                            (inst -1 "A!1")
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "linear_map_T")
                                        (("3"
                                          (inst -1 "A!1")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "linear_map_matrix_inv")
                                (("2"
                                  (inst -1 "A!1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "linear_map_matrix_inv")
                        (("2" (inst -1 "A!1")
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (expand "o" 1)
                                (("2"
                                  (assert)
                                  (("2" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (operator formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (linear_map_T formula-decl nil matrix_operator nil)
    (O const-decl "T3" function_props nil)
    (inverse const-decl "D" function_inverse nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil))
   shostak)
  (iso_inv-1 nil 3480535854
   ("" (skosimp)
    (("" (lemma "iso_ide")
      (("" (inst -1 "e!1")
        (("" (assert)
          (("" (lemma "inv_map")
            (("" (inst -1 "A!1")
              (("" (assert)
                (("" (flatten)
                  (("" (lemma "operator")
                    (("" (inst -1 "e!1" "inverse(T(A!1)) o T(A!1)" "I")
                      (("" (assert)
                        (("" (replace -4)
                          (("" (lemma "operator")
                            ((""
                              (inst -1 "e!1" "T(A!1) o inverse(T(A!1))"
                               "I")
                              ((""
                                (assert)
                                ((""
                                  (replace -5)
                                  ((""
                                    (lemma "iso_mult_map")
                                    ((""
                                      (inst
                                       -1
                                       "e!1"
                                       "T(A!1)"
                                       "inverse(T(A!1))")
                                      ((""
                                        (assert)
                                        ((""
                                          (lemma "iso_mult_map")
                                          ((""
                                            (inst
                                             -1
                                             "e!1"
                                             " inverse(T(A!1))"
                                             "T(A!1)")
                                            ((""
                                              (assert)
                                              ((""
                                                (case
                                                 " bijective?(inverse(T(A!1)))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (expand
                                                         "inv"
                                                         1)
                                                        (("1"
                                                          (lemma
                                                           "map_matrix_bij")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "A!1"
                                                             "e!1")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nbit type-eq-decl nil bit nil) (b2n const-decl "nbit" bit nil)
    (operator formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (map_matrix_bij formula-decl nil matrix_operator nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (O const-decl "T3" function_props nil))
   shostak))
 (inv_TCC4 0
  (inv_TCC4-1 nil 3519976543 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (inv 0
  (inv-1 nil 3520163448
   ("" (skosimp)
    (("" (expand "inverse?")
      (("" (split)
        (("1" (lemma "iso_inv")
          (("1" (inst -1 "M!1" "n!1")
            (("1" (assert)
              (("1" (flatten)
                (("1" (expand "squareMat?")
                  (("1" (replace -3) (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "iso_inv")
          (("2" (inst -1 "M!1" "n!1")
            (("2" (assert)
              (("2" (flatten)
                (("2" (expand "squareMat?")
                  (("2" (replace -3) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inverse? const-decl "bool" matrices nil)
    (iso_inv formula-decl nil matrix_operator nil)
    (squareMat? const-decl "bool" matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (bijec_prod_TCC1 0
  (bijec_prod_TCC1-1 nil 3519569381 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (bijec_prod_TCC2 0
  (bijec_prod_TCC2-1 nil 3519569381 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (bijec_prod 0
  (thm "thm" 3520164963
   ("" (skosimp)
    (("" (expand "bijective?")
      (("" (lemma "mult_comp")
        (("" (inst -1 "n!1" "n!1" "n!1" "A!1" "M!1")
          (("" (replace -1)
            (("" (assert)
              ((""
                (lemma
                 "composition_bijective[Vector[n!1],Vector[n!1],Vector[n!1]]")
                ((""
                  (inst -1 "T(n!1, n!1)(M!1)`mp" "T(n!1, n!1)(A!1)`mp")
                  (("" (assert)
                    (("" (expand "o" 1)
                      (("" (assert)
                        ((""
                          (name "jj"
                                "T(n!1, n!1)(A!1)`mp o T(n!1, n!1)(M!1)`mp")
                          (("" (expand "o")
                            (("" (assert)
                              ((""
                                (expand "bijective?")
                                ((""
                                  (split)
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bijective? const-decl "bool" linear_map nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (bijective? const-decl "bool" functions nil)
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (O const-decl "Maping" linear_map nil)
    (O const-decl "T3" function_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (mult_comp formula-decl nil matrix_operator nil))
   shostak)
  (bijec_prod-1 nil 3519573703
   ("" (skosimp)
    (("" (expand "bijective?")
      (("" (expand "bijective?")
        (("" (flatten)
          (("" (split)
            (("1" (expand "injective?")
              (("1" (skosimp) (("1" (postpone) nil nil)) nil)) nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_comp formula-decl nil matrix_operator nil)
    (composition_bijective judgement-tcc nil function_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (Vector type-eq-decl nil vectors "vectors/")
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "T3" function_props nil)
    (O const-decl "Maping" linear_map nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (bijective? const-decl "bool" functions nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bijective? const-decl "bool" linear_map nil))
   shostak))
 (map_matrix_bij_inv_TCC1 0
  (map_matrix_bij_inv_TCC1-1 nil 3519889527 ("" (subtype-tcc) nil nil)
   ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (map_matrix_bij_inv 0
  (thm "thm" 3520178173
   ("" (skosimp)
    (("" (lemma "map_matrix_bij")
      (("" (inst -1 "n!1" "n!1" "inv(n!1)(A!1)")
        (("" (apply-extensionality 1)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (lemma "bijective_inverse[Vector[n!1],Vector[n!1]]")
            (("3" (apply-extensionality 1)
              (("3" (hide 2 3)
                (("3"
                  (inst -1 "T(n!1, n!1)(inv(n!1)(A!1))`mp(x!1)" "x!1"
                   "T(n!1, n!1)(A!1)`mp")
                  (("1" (flatten)
                    (("1"
                      (case " x!1 = T(n!1, n!1)(A!1)`mp(T(n!1, n!1)(inv(n!1)(A!1))`mp(x!1))")
                      (("1" (assert)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (lemma "T_matr")
                        (("2" (copy -1)
                          (("2" (hide -3)
                            (("2"
                              (inst -1 "n!1" "n!1" "inv(n!1)(A!1)"
                               "x!1")
                              (("1"
                                (replace -1)
                                (("1"
                                  (inst
                                   -2
                                   "n!1"
                                   "n!1"
                                   "A!1"
                                   "inv(n!1)(A!1) * x!1")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "mult_assoc_vect")
                                        (("1"
                                          (inst
                                           -1
                                           "A!1"
                                           "inv(n!1)(A!1)"
                                           "x!1")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (lemma "iso_inv")
                                              (("1"
                                                (inst -1 "A!1" "n!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (lemma
                                                             " ident_vect")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "I(n!1)"
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide 2 3)
                                              (("2"
                                                (typepred "A!1")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skosimp) (("3" (grind) nil nil)) nil)
                       ("4" (skosimp) (("4" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (split)
                    (("1" (skosimp)
                      (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (grind) nil nil)
                     ("3" (assert)
                      (("3" (typepred "A!1")
                        (("3" (expand "bijective?" -3)
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((map_matrix_bij formula-decl nil matrix_operator nil)
    (inverse const-decl "Maping" linear_map nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (A!1 skolem-const-decl "Matrix_inv(n!1)" matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (iso_inv formula-decl nil matrix_operator nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (ident_vect formula-decl nil matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_assoc_vect formula-decl nil matrices nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (T_matr formula-decl nil matrix_operator nil)
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective_inverse formula-decl nil function_inverse nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (thm "thm" 3519890262
   ("" (skosimp)
    (("" (lemma "map_matrix_bij")
      (("" (inst -1 "n!1" "n!1" "inv(n!1)(A!1)") nil nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mat type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (bijective_inverse formula-decl nil function_inverse nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (T_matr formula-decl nil matrix_operator nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_assoc_vect formula-decl nil matrices nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ident_vect formula-decl nil matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (iso_inv formula-decl nil matrix_operator nil)
    (* const-decl "Vector[M`rows]" matrices nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (inverse const-decl "Maping" linear_map nil)
    (map_matrix_bij formula-decl nil matrix_operator nil))
   shostak)
  (thm "thm" 3519889667
   ("" (skosimp) (("" (expand "inv") (("" (propax) nil nil)) nil)) nil)
   ((map_matrix_bij formula-decl nil matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (squareMat? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Mat type-eq-decl nil matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (map_matrix_bij_inv-1 nil 3519889581
   ("" (skosimp) (("" (expand "inv") (("" (postpone) nil nil)) nil))
    nil)
   ((inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil))
   shostak))
 (tran_inv_TCC1 0
  (tcc "tcc" 3519966910
       ("" (skosimp)
        (("" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (lemma "bijec_transpose")
            (("3" (inst -1 "A!1" "n!1") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       nil shostak)
  (tran_inv_TCC1-1 nil 3519888459 ("" (subtype-tcc) nil nil)
   ((transpose const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bijec_transpose formula-decl nil matrix_operator nil))
   nil))
 (tran_inv_TCC2 0
  (tran_inv_TCC2-1 nil 3519888459 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (transpose const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (tran_inv_TCC3 0
  (tran_inv_TCC3-1 nil 3519978033 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (tran_inv 0
  (thm "thmm" 3519978578
   ("" (skosimp)
    (("" (expand "inverse?")
      (("" (split)
        (("1" (lemma "transpose_product")
          (("1" (inst -1 "inv(n!1)(A!1)" "A!1")
            (("1" (swap-rel -1)
              (("1" (replace -1)
                (("1" (lemma "iso_inv")
                  (("1" (inst -1 "A!1" "n!1")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (replace -1)
                          (("1" (apply-extensionality 1)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil)
                             ("3" (hide 2)
                              (("3"
                                (apply-extensionality 1)
                                (("3"
                                  (hide 2)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil)
         ("2" (lemma "iso_inv")
          (("2" (inst -1 "A!1" "n!1")
            (("2" (assert)
              (("2" (flatten)
                (("2" (lemma "transpose_product")
                  (("2" (inst -1 "A!1" "inv(n!1)(A!1)")
                    (("2" (swap-rel -1)
                      (("2" (replace -1)
                        (("2" (replace -3)
                          (("2" (apply-extensionality 1)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil)
                             ("3" (apply-extensionality 1)
                              (("3"
                                (hide 2 3)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inverse? const-decl "bool" matrices nil)
    (transpose_product formula-decl nil matrices nil)
    (* const-decl "Matrix" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (iso_inv formula-decl nil matrix_operator nil)
    (Index type-eq-decl nil vectors "vectors/")
    (below type-eq-decl nil nat_types nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (squareMat? const-decl "bool" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (bijective? const-decl "bool" linear_map nil)
    (Mat type-eq-decl nil matrices nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (A!1 skolem-const-decl "Matrix" matrix_operator nil))
   shostak)
  (tran_inv-1 nil 3519888498
   ("" (skosimp)
    (("" (expand "inv")
      (("" (apply-extensionality 1)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   ((inverse? const-decl "bool" matrices nil)
    (transpose_product formula-decl nil matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (iso_inv formula-decl nil matrix_operator nil)
    (Index type-eq-decl nil vectors "vectors/")
    (below type-eq-decl nil nat_types nil)
    (e const-decl "[below[n] -> Vector[n]]" linear_map_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sigma def-decl "real" sigma "reals/")
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (squareMat? const-decl "bool" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (bijective? const-decl "bool" linear_map nil)
    (Mat type-eq-decl nil matrices nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil))
   shostak))
 (bijec_transpose_TCC1 0
  (bijec_transpose_TCC1-1 nil 3519569484 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (bijec_transpose 0
  (thm "thm" 3521298644
   ("" (skosimp)
    (("" (lemma "equa_inv")
      (("" (lemma "iso_inv")
        (("" (inst?)
          (("" (assert)
            (("" (flatten)
              ((""
                (inst -3 "n!1" "T(n!1,n!1)(transpose(A!1))"
                 "T(n!1,n!1)(transpose(inv(n!1)(A!1)))"
                 "T(n!1,n!1)(transpose(inv(n!1)(A!1)))")
                (("1" (assert)
                  (("1" (split)
                    (("1" (lemma "mult_comp")
                      (("1"
                        (inst -1 "n!1" "n!1" "n!1" "transpose(A!1)"
                         "transpose(inv(n!1)(A!1))")
                        (("1" (swap-rel -1)
                          (("1" (replace -1)
                            (("1" (lemma "iso_ide_T")
                              (("1"
                                (inst -1 "n!1")
                                (("1"
                                  (swap-rel -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (lemma "Iso_T")
                                        (("1"
                                          (inst -1 "n!1" "n!1")
                                          (("1"
                                            (expand "bijective?" -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "injective?")
                                                (("1"
                                                  (lemma
                                                   "transpose_product")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "inv(n!1)(A!1)"
                                                     "A!1")
                                                    (("1"
                                                      (swap-rel -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (replace -4)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "transpose(I(n!1))=I(n!1)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     " ident_trans")
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "n!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "mult_comp")
                      (("2"
                        (inst -1 "n!1" "n!1" "n!1"
                         "transpose(inv(n!1)(A!1))" "transpose(A!1)")
                        (("2" (swap-rel -1)
                          (("2" (replace -1)
                            (("2" (lemma "transpose_product")
                              (("2"
                                (inst -1 "A!1" "inv(n!1)(A!1)")
                                (("2"
                                  (swap-rel -1)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (replace -4)
                                      (("2"
                                        (lemma " ident_trans")
                                        (("2"
                                          (inst -1 "I(n!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "iso_ide_T")
                                              (("2"
                                                (inst -1 "n!1")
                                                (("2"
                                                  (swap-rel -1)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (lemma
                                                       "ident_trans")
                                                      (("2"
                                                        (inst -1 "n!1")
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (hide 2)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equa_inv formula-decl nil matrix_operator nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (inverse const-decl "Maping" linear_map nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (mult_comp formula-decl nil matrix_operator nil)
    (O const-decl "Maping" linear_map nil)
    (same? const-decl "bool" linear_map nil)
    (* const-decl "Matrix" matrices nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (iso_ide_T formula-decl nil matrix_operator nil)
    (id const-decl "Maping" linear_map nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (transpose_product formula-decl nil matrices nil)
    (ident_trans formula-decl nil matrices nil)
    (injective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (Iso_T formula-decl nil matrix_operator nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (transpose const-decl "Matrix" matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (bijective? const-decl "bool" linear_map nil)
    (Mat type-eq-decl nil matrices nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (A!1 skolem-const-decl "Matrix" matrix_operator nil)
    (iso_inv formula-decl nil matrix_operator nil))
   shostak)
  (thm "thm" 3521297358
   ("" (skosimp)
    (("" (lemma "equa_inv")
      (("" (lemma "iso_inv")
        (("" (inst?)
          (("" (assert)
            (("" (flatten)
              ((""
                (inst -3 "n!1" "T(n!1,n!1)(transpose(A!1))"
                 "T(n!1,n!1)(transpose(inv(n!1)(A!1)))"
                 "T(n!1,n!1)(transpose(inv(n!1)(A!1)))")
                (("1" (assert)
                  (("1" (split)
                    (("1" (lemma "mult_comp")
                      (("1"
                        (inst -1 "n!1" "n!1" "n!1" "transpose(A!1)"
                         "transpose(inv(n!1)(A!1))")
                        (("1" (swap-rel -1)
                          (("1" (replace -1)
                            (("1" (lemma "iso_ide_T")
                              (("1"
                                (inst -1 "n!1")
                                (("1"
                                  (swap-rel -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (lemma "Iso_T")
                                        (("1"
                                          (inst -1 "n!1" "n!1")
                                          (("1"
                                            (expand "bijective?" -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "injective?")
                                                (("1"
                                                  (lemma
                                                   "transpose_product")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "inv(n!1)(A!1)"
                                                     "A!1")
                                                    (("1"
                                                      (swap-rel -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (replace -4)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "transpose(I(n!1))=I(n!1)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     " ident_trans")
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "n!1")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "mult_comp")
                      (("2"
                        (inst -1 "n!1" "n!1" "n!1"
                         "transpose(inv(n!1)(A!1))" "transpose(A!1)")
                        (("2" (swap-rel -1)
                          (("2" (replace -1)
                            (("2" (lemma "transpose_product")
                              (("2"
                                (inst -1 "A!1" "inv(n!1)(A!1)")
                                (("2"
                                  (swap-rel -1)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (replace -4)
                                      (("2"
                                        (lemma " ident_trans")
                                        (("2"
                                          (inst -1 "I(n!1)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "iso_ide_T")
                                              (("2"
                                                (inst -1 "n!1")
                                                (("2"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (hide 2)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((iso_inv formula-decl nil matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (squareMat? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Iso_T formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (ident_trans formula-decl nil matrices nil)
    (transpose_product formula-decl nil matrices nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (id const-decl "Maping" linear_map nil)
    (iso_ide_T formula-decl nil matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (same? const-decl "bool" linear_map nil)
    (O const-decl "Maping" linear_map nil)
    (mult_comp formula-decl nil matrix_operator nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (equa_inv formula-decl nil matrix_operator nil))
   shostak)
  (bijec_transpose-1 nil 3519909782
   ("" (skosimp)
    (("" (lemma "equa_inv")
      (("" (lemma "iso_inv")
        (("" (inst?)
          (("" (assert)
            (("" (flatten)
              ((""
                (inst -3 "n!1" "T(n!1,n!1)(transpose(A!1))"
                 "T(n!1,n!1)(transpose(inv(n!1)(A!1)))"
                 "T(n!1,n!1)(transpose(inv(n!1)(A!1)))")
                (("1" (assert)
                  (("1" (split)
                    (("1" (lemma "mult_comp")
                      (("1"
                        (inst -1 "n!1" "n!1" "n!1" "transpose(A!1)"
                         "transpose(inv(n!1)(A!1))")
                        (("1" (swap-rel -1)
                          (("1" (replace -1)
                            (("1" (lemma "iso_ide_T")
                              (("1"
                                (inst -1 "n!1")
                                (("1"
                                  (swap-rel -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (lemma "Iso_T")
                                        (("1"
                                          (inst -1 "n!1" "n!1")
                                          (("1"
                                            (expand "bijective?" -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "injective?")
                                                (("1"
                                                  (lemma
                                                   "transpose_product")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "inv(n!1)(A!1)"
                                                     "A!1")
                                                    (("1"
                                                      (swap-rel -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (replace -4)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "transpose(I(n!1))=I(n!1)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (hide 2)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (hide 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((iso_inv formula-decl nil matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (squareMat? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Iso_T formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (ident_trans formula-decl nil matrices nil)
    (transpose_product formula-decl nil matrices nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (id const-decl "Maping" linear_map nil)
    (iso_ide_T formula-decl nil matrix_operator nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (same? const-decl "bool" linear_map nil)
    (O const-decl "Maping" linear_map nil)
    (mult_comp formula-decl nil matrix_operator nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (equa_inv formula-decl nil matrix_operator nil))
   shostak))
 (tran_inv_oper_TCC1 0
  (tcc "tcc" 3520615305
       ("" (skosimp)
        (("" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (lemma "bijec_transpose")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ((transpose const-decl "Matrix" matrices nil)
        (square? const-decl "bool" matrices nil)
        (sigma def-decl "real" sigma "reals/")
        (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
         nil)
        (injective? const-decl "bool" functions nil)
        (surjective? const-decl "bool" functions nil)
        (bijective? const-decl "bool" functions nil)
        (bijective? const-decl "bool" linear_map nil)
        (squareMat? const-decl "bool" matrices nil)
        (real_times_real_is_real application-judgement "real" reals
         nil)
        (int_minus_int_is_int application-judgement "int" integers nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (below type-eq-decl nil naturalnumbers nil)
        (real nonempty-type-from-decl nil reals nil)
        (Matrix type-eq-decl nil matrices nil)
        (number nonempty-type-decl nil numbers nil)
        (boolean nonempty-type-decl nil booleans nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (bijec_transpose formula-decl nil matrix_operator nil))
       shostak)
  (tran_inv_oper_TCC1-1 nil 3519996212 ("" (subtype-tcc) nil nil)
   ((transpose const-decl "Matrix" matrices nil)
    (square? const-decl "bool" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bijec_transpose formula-decl nil matrix_operator nil))
   nil))
 (tran_inv_oper 0
  (tran_inv_oper-1 nil 3519996213
   ("" (skosimp)
    (("" (lemma "tran_inv")
      (("" (inst -1 "A!1" "n!1")
        (("" (assert)
          (("" (lemma "inverse_unique")
            ((""
              (inst -1 "transpose(A!1)" "transpose(inv(n!1)(A!1))"
               "inv(n!1)(transpose(A!1))")
              (("1" (assert) nil nil)
               ("2" (split)
                (("1" (hide 2) (("1" (grind) nil nil)) nil)
                 ("2" (assert)
                  (("2" (lemma "tran_inv")
                    (("2" (inst -1 "A!1" "n!1")
                      (("2" (assert)
                        (("2" (expand "inverse?" 1)
                          (("2" (split)
                            (("1" (lemma "bijec_transpose")
                              (("1"
                                (inst -1 "A!1" "n!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "iso_inv")
                                    (("1"
                                      (inst -1 "transpose(A!1)" "n!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "squareMat?(n!1)(transpose(A!1)) ")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "transpose(A!1)`rows=n!1")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "transpose(A!1)`rows=n!1 ")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 3)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (expand "invertible?")
                  (("3" (inst 1 "transpose(inv(n!1)(A!1))") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tran_inv formula-decl nil matrix_operator nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (invertible? const-decl "bool" matrices nil)
    (transpose const-decl "Matrix" matrices nil)
    (A!1 skolem-const-decl "Matrix" matrix_operator nil)
    (inverse? const-decl "bool" matrices nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (squareMat? const-decl "bool" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijec_transpose formula-decl nil matrix_operator nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (iso_inv formula-decl nil matrix_operator nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (I const-decl "(identity?)" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (sigma def-decl "real" sigma "reals/")
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse_unique formula-decl nil matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (prod_inv_TCC1 0
  (prod_inv_TCC1-1 nil 3519993273 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (square? const-decl "bool" matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (prod_inv_TCC2 0
  (prod_inv_TCC2-1 nil 3519993273 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (prod_inv_TCC3 0
  (prod_inv_TCC3-1 nil 3519993273 ("" (subtype-tcc) nil nil)
   ((T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (prod_inv_TCC4 0
  (prod_inv_TCC4-1 nil 3519993273 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (* const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (prod_inv_TCC5 0
  (prod_inv_TCC5-1 nil 3519993273 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (prod_inv_TCC6 0
  (prod_inv_TCC6-1 nil 3519993273 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (squareMat? const-decl "bool" matrices nil)
    (square? const-decl "bool" matrices nil)
    (* const-decl "Matrix" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (prod_inv 0
  (thm "thm" 3520180655
   ("" (skosimp)
    (("" (expand "inverse?")
      (("" (split)
        (("1" (lemma " mult_assoc")
          (("1" (copy -1)
            (("1" (inst -2 "A!1" "B!1" "inv(n!1)(B!1) * inv(n!1)(A!1)")
              (("1" (swap-rel -2)
                (("1" (replace -2)
                  (("1" (copy -1)
                    (("1"
                      (inst -2 "B!1" "inv(n!1)(B!1)" "inv(n!1)(A!1)")
                      (("1" (replace -2)
                        (("1" (lemma "iso_inv")
                          (("1" (inst -1 "B!1" "n!1")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "left_mult_ident")
                                      (("1"
                                        (inst
                                         -1
                                         "inv(n!1)(A!1)"
                                         "I(n!1)")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lemma "iso_inv")
                                            (("1"
                                              (inst -1 "A!1" "n!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "(A!1 * B!1)`rows=n!1")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (lemma "mult_assoc")
          (("2" (copy -1)
            (("2" (inst -2 "inv(n!1)(B!1)" "inv(n!1)(A!1)" "A!1*B!1")
              (("1" (swap-rel -2)
                (("1" (replace -2)
                  (("1" (inst -1 "inv(n!1)(A!1)" "A!1" "B!1")
                    (("1" (replace -1)
                      (("1" (lemma "iso_inv")
                        (("1" (inst -1 "A!1" "n!1")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma " left_mult_ident")
                                    (("1"
                                      (inst -1 "B!1" "I(n!1)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "iso_inv")
                                            (("1"
                                              (inst -1 "B!1" "n!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case
                                                     "(A!1*B!1)`rows=n!1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inverse? const-decl "bool" matrices nil)
    (mult_assoc formula-decl nil matrices nil)
    (A!1 skolem-const-decl "Matrix" matrix_operator nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (squareMat? const-decl "bool" matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (* const-decl "Matrix" matrices nil)
    (B!1 skolem-const-decl "Matrix" matrix_operator nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (iso_inv formula-decl nil matrix_operator nil)
    (left_mult_ident formula-decl nil matrices nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak)
  (prod_inv-1 nil 3519993304
   ("" (skosimp)
    (("" (expand "inverse?")
      (("" (split) (("1" (postpone) nil nil) ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (inverse const-decl "Maping" linear_map nil)
    (left_mult_ident formula-decl nil matrices nil)
    (iso_inv formula-decl nil matrix_operator nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (squareMat? const-decl "bool" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (bijective? const-decl "bool" linear_map nil)
    (Mat type-eq-decl nil matrices nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (mult_assoc formula-decl nil matrices nil)
    (inverse? const-decl "bool" matrices nil))
   shostak))
 (prod_inv_oper_TCC1 0
  (tcc "tcc" 3520615365
       ("" (skosimp)
        (("" (split)
          (("1" (assert) (("1" (grind) nil nil)) nil)
           ("2" (grind) nil nil)
           ("3" (lemma "bijec_prod")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ((int_minus_int_is_int application-judgement "int" integers nil)
        (real_times_real_is_real application-judgement "real" reals
         nil)
        (squareMat? const-decl "bool" matrices nil)
        (bijective? const-decl "bool" linear_map nil)
        (bijective? const-decl "bool" functions nil)
        (surjective? const-decl "bool" functions nil)
        (injective? const-decl "bool" functions nil)
        (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
         nil)
        (sigma def-decl "real" sigma "reals/")
        (square? const-decl "bool" matrices nil)
        (* const-decl "Matrix" matrices nil)
        (posnat nonempty-type-eq-decl nil integers nil)
        (below type-eq-decl nil naturalnumbers nil)
        (real nonempty-type-from-decl nil reals nil)
        (Matrix type-eq-decl nil matrices nil)
        (boolean nonempty-type-decl nil booleans nil)
        (bool nonempty-type-eq-decl nil booleans nil)
        (Square type-eq-decl nil matrices nil)
        (number nonempty-type-decl nil numbers nil)
        (number_field_pred const-decl "[number -> boolean]"
         number_fields nil)
        (number_field nonempty-type-from-decl nil number_fields nil)
        (real_pred const-decl "[number_field -> boolean]" reals nil)
        (rational_pred const-decl "[real -> boolean]" rationals nil)
        (rational nonempty-type-from-decl nil rationals nil)
        (integer_pred const-decl "[rational -> boolean]" integers nil)
        (int nonempty-type-eq-decl nil integers nil)
        (>= const-decl "bool" reals nil)
        (nonneg_int nonempty-type-eq-decl nil integers nil)
        (> const-decl "bool" reals nil)
        (bijec_prod formula-decl nil matrix_operator nil))
       shostak)
  (prod_inv_oper_TCC1-1 nil 3519993499 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (squareMat? const-decl "bool" matrices nil)
    (bijective? const-decl "bool" linear_map nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (square? const-decl "bool" matrices nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bijec_prod formula-decl nil matrix_operator nil))
   nil))
 (prod_inv_oper 0
  (thm "thm" 3519996087
   ("" (skosimp)
    (("" (lemma "inv")
      (("" (inst -1 "A!1*B!1" "n!1")
        (("" (lemma "bijec_prod")
          (("" (inst -1 "A!1" "B!1" "n!1")
            (("" (assert)
              (("" (case " squareMat?(n!1)(A!1 * B!1)")
                (("1" (assert)
                  (("1" (lemma "inverse_unique")
                    (("1"
                      (inst -1 "A!1*B!1"
                       "inv(n!1)(B!1) * inv(n!1)(A!1)"
                       "inv(n!1)(A!1 * B!1)")
                      (("1" (assert) nil nil)
                       ("2" (split)
                        (("1" (expand "square?" 1)
                          (("1" (grind) nil nil)) nil)
                         ("2" (hide 2) (("2" (grind) nil nil)) nil)
                         ("3" (lemma "prod_inv")
                          (("3" (inst?) (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (expand "invertible?")
                          (("3" (inst 1 "inv(n!1)(A!1 * B!1)") nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "squareMat?") (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inv formula-decl nil matrix_operator nil)
    (bijec_prod formula-decl nil matrix_operator nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (invertible? const-decl "bool" matrices nil)
    (A!1 skolem-const-decl "Matrix" matrix_operator nil)
    (B!1 skolem-const-decl "Matrix" matrix_operator nil)
    (inverse? const-decl "bool" matrices nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (prod_inv formula-decl nil matrix_operator nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse_unique formula-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (* const-decl "Matrix" matrices nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak)
  (prod_inv_oper-1 nil 3519993601
   ("" (skosimp)
    (("" (lemma "prod_inv")
      (("" (inst -1 "A!1" "B!1" "n!1")
        (("" (assert)
          (("" (expand "inverse?")
            (("" (flatten)
              (("" (lemma "iso_inv")
                (("" (inst -1 "A!1*B!1" "n!1")
                  (("" (assert)
                    (("" (expand "inv" 1)
                      (("" (hide -1 -2 -3)
                        (("" (lemma "comp_mult")
                          ((""
                            (inst -1 "n!1" "n!1" "n!1"
                             "inverse(n!1)(T(n!1, n!1)(A!1))"
                             "inverse(n!1)(T(n!1, n!1)(B!1))")
                            (("" (swap-rel -1)
                              ((""
                                (replace -1)
                                ((""
                                  (lemma "mult_comp")
                                  ((""
                                    (inst
                                     -1
                                     "n!1"
                                     "n!1"
                                     "n!1"
                                     "A!1"
                                     "B!1")
                                    ((""
                                      (replace -1)
                                      ((""
                                        (case
                                         "inverse(n!1)(T(n!1, n!1)(A!1) o T(n!1, n!1)(B!1))=inverse(n!1)(T(n!1, n!1)(B!1)) o inverse(n!1)(T(n!1, n!1)(A!1))")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality 1)
                                            (("1"
                                              (hide 2)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (hide 2)
                                              (("3"
                                                (expand "inverse" 1)
                                                (("3"
                                                  (expand "o")
                                                  (("3"
                                                    (lemma
                                                     "inverts_composition2[Vector[n!1],Vector[n!1],Vector[n!1]]")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inv formula-decl nil matrix_operator nil)
    (bijec_prod formula-decl nil matrix_operator nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (invertible? const-decl "bool" matrices nil)
    (inverse? const-decl "bool" matrices nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (prod_inv formula-decl nil matrix_operator nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (inverse const-decl "Maping" linear_map nil)
    (sigma def-decl "real" sigma "reals/")
    (inverse_unique formula-decl nil matrices nil)
    (squareMat? const-decl "bool" matrices nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (equa_sol_TCC1 0
  (equa_sol_TCC1-1 nil 3519535744 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (squareMat? const-decl "bool" matrices nil))
   nil))
 (equa_sol_TCC2 0
  (equa_sol_TCC2-1 nil 3519535744 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (squareMat? const-decl "bool" matrices nil))
   nil))
 (equa_sol_TCC3 0
  (equa_sol_TCC3-1 nil 3519535744 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (squareMat? const-decl "bool" matrices nil))
   nil))
 (equa_sol_TCC4 0
  (equa_sol_TCC4-1 nil 3519535744 ("" (subtype-tcc) nil nil)
   ((squareMat? const-decl "bool" matrices nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (equa_sol_TCC5 0
  (equa_sol_TCC5-1 nil 3519535744 ("" (subtype-tcc) nil nil)
   ((squareMat? const-decl "bool" matrices nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" linear_map nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (equa_sol 0
  (thm "thm" 3520262054
   ("" (skosimp)
    (("" (lemma "mult_assoc_vect")
      (("" (inst -1 "inv(n!1)(M!1)" "M!1" "x!1")
        (("1" (lemma "inv")
          (("1" (inst -1 "M!1" "n!1")
            (("1" (assert)
              (("1" (expand "inverse?")
                (("1" (flatten)
                  (("1" (replace -2)
                    (("1" (lemma "ident_vect")
                      (("1" (inst -1 "I(M!1`rows)" "x!1")
                        (("1" (replace -1)
                          (("1" (move-terms -7 r 2)
                            (("1" (replace -7) (("1" (propax) nil nil))
                              nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((mult_assoc_vect formula-decl nil matrices nil)
    (inv formula-decl nil matrix_operator nil)
    (ident_vect formula-decl nil matrices nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (inverse const-decl "Maping" linear_map nil)
    (inverse const-decl "D" function_inverse nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (sigma def-decl "real" sigma "reals/")
    (* const-decl "Matrix" matrices nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (add_cancel_neg2 formula-decl nil vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (identity? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (inverse? const-decl "bool" matrices nil)
    (Index type-eq-decl nil vectors "vectors/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Matrix type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Square type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (squareMat? const-decl "bool" matrices nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (Maping type-eq-decl nil linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (bijective? const-decl "bool" linear_map nil)
    (Mat type-eq-decl nil matrices nil)
    (linear_map_e? const-decl "bool" linear_map_def nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (n!1 skolem-const-decl "posnat" matrix_operator nil)
    (M!1 skolem-const-decl "Square" matrix_operator nil))
   shostak)
  (thm "thm" 3519992694
   ("" (skosimp)
    (("" (lemma "mult_assoc_vect")
      (("" (inst -1 "inv(n!1)(M!1)" "M!1" "x!1")
        (("1" (lemma "inv")
          (("1" (inst -1 "M!1" "n!1")
            (("1" (assert)
              (("1" (expand "inverse?")
                (("1" (flatten)
                  (("1" (replace -2)
                    (("1" (lemma "ident_vect")
                      (("1" (inst -1 "I(M!1`rows)" "x!1")
                        (("1" (replace -1)
                          (("1" (move-terms -7 r 2)
                            (("1" (replace -7)
                              (("1"
                                (replace -4)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (squareMat? const-decl "bool" matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (inverse? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (+ const-decl "real" vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (add_cancel_neg2 formula-decl nil vectors "vectors/")
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (sigma def-decl "real" sigma "reals/")
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (inverse const-decl "Maping" linear_map nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ident_vect formula-decl nil matrices nil)
    (inv formula-decl nil matrix_operator nil)
    (mult_assoc_vect formula-decl nil matrices nil))
   shostak)
  (equa_sol-1 nil 3519535748
   ("" (skosimp)
    (("" (move-terms -2 r 2)
      (("1" (replace -2)
        (("1" (lemma "mult_assoc_vect")
          (("1" (inst -1 "inv(n!1)(M!1)" "M!1" "x!1")
            (("1" (replace -1)
              (("1" (lemma "inv")
                (("1" (inst -1 "M!1" "n!1")
                  (("1" (assert)
                    (("1" (expand "inverse?")
                      (("1" (flatten)
                        (("1" (replace -2)
                          (("1" (lemma "ident_vect")
                            (("1" (inst -1 "I(M!1`rows)" "x!1")
                              (("1"
                                (replace -1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("2" (grind)
        (("2" (grind)
          (("2" (grind)
            (("2" (swap-rel -1)
              (("1" (replace -1) (("1" (assert) nil nil)) nil)
               ("2" (skosimp)
                (("2" (grind)
                  (("1" (grind)
                    (("1" (grind)
                      (("1" (typepred "M!1")
                        (("1" (expand "square?")
                          (("1" (replace -1)
                            (("1" (assert)
                              (("1"
                                (grind)
                                (("1"
                                  (case "M!1`cols=n!1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (grind)
                                    (("2"
                                      (hide 2 3)
                                      (("2"
                                        (grind)
                                        (("2"
                                          (swap-rel -1)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (grind)
                                              (("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil))
      nil))
    nil)
   ((inv const-decl "[Matrix_inv(n) -> Matrix_inv(n)]" matrix_operator
     nil)
    (Matrix_inv type-eq-decl nil matrix_operator nil)
    (T const-decl "[Mat(m, n) -> Map_linear(n, m)]" matrix_operator
     nil)
    (Map_linear type-eq-decl nil linear_map_def nil)
    (Mat type-eq-decl nil matrices nil)
    (bijective? const-decl "bool" linear_map nil)
    (Map type-eq-decl nil linear_map nil)
    (Maping type-eq-decl nil linear_map nil)
    (Vector type-eq-decl nil vectors "vectors/")
    (squareMat? const-decl "bool" matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Square type-eq-decl nil matrices nil)
    (square? const-decl "bool" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors "vectors/")
    (inverse? const-decl "bool" matrices nil)
    (I const-decl "(identity?)" matrices nil)
    (identity? const-decl "bool" matrices nil)
    (- const-decl "real" vectors "vectors/")
    (* const-decl "Vector[M`rows]" matrices nil)
    (+ const-decl "real" vectors "vectors/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (add_cancel_neg2 formula-decl nil vectors "vectors/")
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (L const-decl "[Map_linear(n, m) -> Mat(m, n)]" matrix_operator
     nil)
    (inverse const-decl "D" function_inverse nil)
    (inverse const-decl "Maping" linear_map nil)
    (sigma def-decl "real" sigma "reals/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ident_vect formula-decl nil matrices nil)
    (inv formula-decl nil matrix_operator nil)
    (mult_assoc_vect formula-decl nil matrices nil))
   shostak)))

