(|sigma_lemmas|
 (|sigma_restrict_dom_TCC1| 0
  (|sigma_restrict_dom_TCC1-1| NIL 3544852161 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|sigma_restrict_dom_TCC2| 0
  (|sigma_restrict_dom_TCC2-1| NIL 3544852161 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|sigma_restrict_dom_TCC3| 0
  (|sigma_restrict_dom_TCC3-1| NIL 3544852161 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_dom_TCC4| 0
  (|sigma_restrict_dom_TCC4-1| NIL 3544852161 ("" (ASSUMING-TCC) NIL NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_dom_TCC5| 0
  (|sigma_restrict_dom_TCC5-1| NIL 3544852161 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|sigma_restrict_dom_TCC6| 0
  (|sigma_restrict_dom_TCC6-1| NIL 3544852663 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_dom_TCC7| 0
  (|sigma_restrict_dom_TCC7-1| NIL 3544852663 ("" (ASSUMING-TCC) NIL NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_dom| 0
  (|sigma_restrict_dom-1| NIL 3544863886
   ("" (INDUCT "j")
    (("1" (CASE "j!1=0")
      (("1" (HIDE 1)
        (("1" (SKOSIMP)
          (("1" (REPLACE -1)
            (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL)
       ("2" (ASSERT) NIL NIL))
      NIL)
     ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3)
            (("1" (REPLACE -1)
              (("1" (ASSERT)
                (("1" (EXPAND "sigma")
                  (("1" (INST -2 "0") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3 1)
                (("1" (EXPAND "sigma" 1)
                  (("1" (COPY -3)
                    (("1" (INST -1 "j!1")
                      (("1" (REPLACE -1 1)
                        (("1" (ASSERT)
                          (("1" (HIDE -1)
                            (("1" (INST -2 "m!1" "F!1" "G!1")
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)
     ("5" (SKOSIMP) (("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_0_neg| FORMULA-DECL NIL |sigma_below| "reals/")
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| "reals/")
    (|T_high| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|T_low| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK))
 (|sigma_restrict_dom2_TCC1| 0
  (|sigma_restrict_dom2_TCC1-1| NIL 3544852161 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_dom2_TCC2| 0
  (|sigma_restrict_dom2_TCC2-1| NIL 3544852161 ("" (SUBTYPE-TCC) NIL NIL)
   ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_dom2_TCC3| 0
  (|sigma_restrict_dom2_TCC3-1| NIL 3544852161 ("" (ASSUMING-TCC) NIL NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_dom2_TCC4| 0
  (|sigma_restrict_dom2_TCC4-1| NIL 3544852161 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|sigma_restrict_dom2_TCC5| 0
  (|sigma_restrict_dom2_TCC5-1| NIL 3544852663 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_dom2_TCC6| 0
  (|sigma_restrict_dom2_TCC6-1| NIL 3544852663 ("" (ASSUMING-TCC) NIL NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_dom2| 0
  (|sigma_restrict_dom2-3| "" 3547704650
   ("" (INDUCT "j")
    (("1" (SKOSIMP)
      (("1" (CASE "j!1=0")
        (("1" (REPLACE -1 2)
          (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL)
     ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "sigma")
              (("1" (EXPAND "sigma") (("1" (INST -4 "1") NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3)
                (("1" (INST -2 "m!1" "F!1" "G!1")
                  (("1" (ASSERT)
                    (("1" (REPLACE -3 -2)
                      (("1" (LEMMA "sigma_last[below[j!1]]")
                        (("1" (EXPAND "sigma" 2)
                          (("1" (HIDE -1)
                            (("1" (INST -3 "1+j!1") (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1 -2 -3 -4 2 3)
                          (("2" (SKOSIMP)
                            (("2" (TYPEPRED "y!1") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)
     ("5" (SKOSIMP) (("5" (SKOSIMP) NIL NIL)) NIL)
     ("6" (ASSERT)
      (("6" (SKOSIMP)
        (("6" (SKOSIMP) (("6" (INST 2 "0") (("6" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|sigma_last| FORMULA-DECL NIL |sigma| "reals/")
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|sigma| DEF-DECL "real" |sigma| "reals/")
    (|T_high| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|T_low| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK)
  (|sigma_restrict_dom2-2| "" 3547494271
   ("" (INDUCT "j")
    (("1" (SKOSIMP)
      (("1" (CASE "j!1=0")
        (("1" (REPLACE -1 2)
          (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL)
     ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "sigma")
              (("1" (EXPAND "sigma") (("1" (INST -4 "1") NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3)
                (("1" (INST -2 "m!1" "F!1" "G!1")
                  (("1" (ASSERT)
                    (("1" (REPLACE -3 -2)
                      (("1" (LEMMA "sigma_last[below[j!1]]")
                        (("1" (EXPAND "sigma" 2)
                          (("1" (HIDE -1)
                            (("1" (INST -3 "1+j!1") (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1 -2 -3 -4 2 3)
                          (("2" (SKOSIMP)
                            (("2" (TYPEPRED "y!1") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP) (("4" (SKOSIMP) NIL NIL)) NIL)
     ("5" (SKOSIMP)
      (("5" (SKOSIMP) (("5" (INST 2 "0") (("5" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL)
   SHOSTAK)
  (|sigma_restrict_dom2-1| NIL 3544864211
   ("" (INDUCT "j")
    (("1" (SKOSIMP)
      (("1" (CASE "j!1=0")
        (("1" (REPLACE -1 2)
          (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
         ("2" (ASSERT) NIL NIL))
        NIL))
      NIL)
     ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (REPLACE -1 1)
            (("1" (EXPAND "sigma")
              (("1" (EXPAND "sigma") (("1" (INST -4 "1") NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3)
                (("1" (INST -2 "m!1" "F!1" "G!1")
                  (("1" (ASSERT)
                    (("1" (REPLACE -3 -2)
                      (("1" (LEMMA "sigma_last[below[j!1]]")
                        (("1" (EXPAND "sigma" 2)
                          (("1" (HIDE -1)
                            (("1" (INST -3 "1+j!1") (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1 -2 -3 -4 2 3)
                          (("2" (SKOSIMP)
                            (("2" (TYPEPRED "y!1") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)
     ("5" (SKOSIMP) (("5" (SKOSIMP) NIL NIL)) NIL)
     ("6" (SKOSIMP) (("6" (SKOSIMP) (("6" (ASSERT) NIL NIL)) NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL)
   SHOSTAK))
 (|sigma_below_shift_TCC1| 0
  (|sigma_below_shift_TCC1-1| NIL 3544852161 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|sigma_below_shift_TCC2| 0
  (|sigma_below_shift_TCC2-1| NIL 3544852161 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|sigma_below_shift_TCC3| 0
  (|sigma_below_shift_TCC3-1| NIL 3544852161 ("" (ASSUMING-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_below_shift_TCC4| 0
  (|sigma_below_shift_TCC4-1| NIL 3544852161 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|sigma_below_shift_TCC5| 0
  (|sigma_below_shift_TCC5-1| NIL 3544852161 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|sigma_below_shift_TCC6| 0
  (|sigma_below_shift_TCC6-1| NIL 3544852663 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|sigma_below_shift_TCC7| 0
  (|sigma_below_shift_TCC7-1| NIL 3544852663 ("" (ASSUMING-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_below_shift| 0
  (|sigma_below_shift-1| NIL 3544864444
   ("" (INDUCT "m")
    (("1" (SKOSIMP) (("1" (TYPEPRED "m!1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
     ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3)
            (("1" (REPLACE -1)
              (("1" (EXPAND "sigma")
                (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (ASSERT)
            (("1" (LEMMA "sigma_last[below[2+j!1]]")
              (("1" (INST -1 " LAMBDA (i: below[2 + j!1]): F!1(i)" "1+j!1" "1")
                (("1" (ASSERT)
                  (("1" (REPLACE -1 2)
                    (("1" (HIDE -1)
                      (("1" (LEMMA "sigma_last[below[1+j!1]]")
                        (("1"
                          (INST -1 " LAMBDA (i: below[1 + j!1]): F!1(1 + i)"
                           "j!1" "0")
                          (("1" (ASSERT)
                            (("1" (REPLACE -1 2)
                              (("1" (ASSERT)
                                (("1" (HIDE -1)
                                  (("1"
                                    (INST -1
                                     " LAMBDA (i: below[1 + j!1]): F!1(i)")
                                    (("1" (LEMMA "sigma_restrict_dom")
                                      (("1"
                                        (INST -1 "j!1" "j!1"
                                         "LAMBDA (i_1: below[j!1]): F!1(1 + i_1)"
                                         "LAMBDA (i: below[1 + j!1]): F!1(1 + i)")
                                        (("1" (ASSERT)
                                          (("1" (SWAP-REL -1)
                                            (("1" (REPLACE -1 2)
                                              (("1" (HIDE -1)
                                                (("1"
                                                  (LEMMA "sigma_restrict_dom2")
                                                  (("1"
                                                    (INST -1 "j!1" "1+j!1"
                                                     " LAMBDA (i_1: below[1 + j!1]): F!1(i_1)"
                                                     "LAMBDA (i: below[2 + j!1]): F!1(i)")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP)
                                              (("2" (TYPEPRED "y!1")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP)
      (("4" (SKOSIMP) (("4" (TYPEPRED "y!1") (("4" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL)
     ("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)
     ("6" (SKOSIMP) (("6" (ASSERT) NIL NIL)) NIL)
     ("7" (SKOSIMP) (("7" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|sigma_last| FORMULA-DECL NIL |sigma| "reals/")
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_restrict_dom| FORMULA-DECL NIL |sigma_lemmas| NIL)
    (|sigma_restrict_dom2| FORMULA-DECL NIL |sigma_lemmas| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sigma| DEF-DECL "real" |sigma| "reals/")
    (|T_high| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|T_low| TYPE-EQ-DECL NIL |sigma| "reals/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK))
 (|sigma_eq_index_TCC1| 0
  (|sigma_eq_index_TCC1-1| NIL 3539495453 ("" (SUBTYPE-TCC) NIL NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_eq_index_TCC2| 0
  (|sigma_eq_index_TCC2-1| NIL 3539495453 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|sigma_eq_index_TCC3| 0
  (|sigma_eq_index_TCC3-1| NIL 3539495453 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|sigma_eq_index| 0
  (|teo| "fin" 3544864996
   ("" (INDUCT "m")
    (("1" (TYPEPRED "m!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (TYPEPRED "j!1")
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3 -4)
            (("1" (SKOSIMP)
              (("1" (REPLACE -1)
                (("1" (EXPAND "sigma")
                  (("1" (EXPAND "sigma")
                    (("1" (ASSERT)
                      (("1" (REPLACE -2 1)
                        (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (HIDE -2 1)
              (("1" (HIDE -3)
                (("1" (ASSERT)
                  (("1" (SKOSIMP)
                    (("1" (SWAP-REL -3)
                      (("1" (REPLACE -3 1)
                        (("1" (ASSERT)
                          (("1" (LEMMA "sigma_last[ Index[1 + j!1]]")
                            (("1"
                              (INST -1 " LAMBDA (i: Index[1 + j!1]): F!1(i)"
                               "j!1" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "sigma_last[Index[n!1]]")
                                      (("1"
                                        (INST -1
                                         " LAMBDA (i: Index[n!1]): G!1(i)"
                                         "j!1" "0")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (HIDE -1)
                                              (("1" (COPY -4)
                                                (("1" (INST -1 "j!1")
                                                  (("1" (REPLACE -1 1)
                                                    (("1" (HIDE -1)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (INST -2 "n!1-1"
                                                           " LAMBDA (i: Index[j!1]): F!1(i)"
                                                           "LAMBDA (i: Index[n!1-1]): G!1(i)")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (CASE
                                                                  " (FORALL (i_1: below[j!1]): F!1(i_1) = G!1(i_1))")
                                                              (("1"
                                                                (REPLACE -1 -3)
                                                                (("1" (HIDE -1)
                                                                  (("1"
                                                                    (CASE
                                                                        " sigma(0, j!1 - 1, LAMBDA (i_1: Index[j!1]): F!1(i_1))= sigma(0, j!1 - 1, LAMBDA (i: Index[1 + j!1]): F!1(i))")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 -3)
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (CASE
                                                                              " sigma(0, n!1 - 2, LAMBDA (i_1: Index[n!1 - 1]): G!1(i_1))= sigma(0, n!1 - 2, LAMBDA (i_1: Index[n!1]): G!1(i_1))")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             -3)
                                                                            (("1"
                                                                              (HIDE
                                                                               -1)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -3
                                                                                 -2)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             -2
                                                                             2)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "sigma_restrict_dom")
                                                                                (("2"
                                                                                  (INST
                                                                                   -1
                                                                                   "n!1-1"
                                                                                   "n!1-1"
                                                                                   " LAMBDA (i_1: Index[n!1 - 1]): G!1(i_1)"
                                                                                   "LAMBDA (i_1: Index[n!1]): G!1(i_1)")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("3"
                                                                            (HIDE
                                                                             -2
                                                                             -4
                                                                             2)
                                                                            (("3"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (HIDE -2
                                                                       2)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "sigma_restrict_dom")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "j!1"
                                                                             "j!1"
                                                                             "LAMBDA (i_1: Index[j!1]): F!1(i_1)"
                                                                             " LAMBDA (i: Index[1 + j!1]): F!1(i)")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (HIDE -2
                                                                       -4 2)
                                                                      (("3"
                                                                        (SKOSIMP)
                                                                        (("3"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (HIDE -2 2)
                                                                (("2" (SKOSIMP)
                                                                  (("2"
                                                                    (INST -3
                                                                     "i!1")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP)
      (("4" (HIDE 2) (("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)
     ("6" (HIDE 2) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)
     ("7" (HIDE 2) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_restrict_dom| FORMULA-DECL NIL |sigma_lemmas| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_last| FORMULA-DECL NIL |sigma| "reals/")
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Index| TYPE-EQ-DECL NIL |vectors| "vectors/")
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|sigma| DEF-DECL "real" |sigma| "reals/")
    (|T_high| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|T_low| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK)
  (|thm| "finished" 3539496088
   ("" (INDUCT "m")
    (("1" (TYPEPRED "m!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (TYPEPRED "j!1")
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3 -4)
            (("1" (SKOSIMP)
              (("1" (REPLACE -1)
                (("1" (EXPAND "sigma")
                  (("1" (EXPAND "sigma")
                    (("1" (ASSERT)
                      (("1" (REPLACE -2 1)
                        (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (HIDE -2 1)
              (("1" (HIDE -3)
                (("1" (ASSERT)
                  (("1" (SKOSIMP)
                    (("1" (SWAP-REL -3)
                      (("1" (REPLACE -3 1)
                        (("1" (ASSERT)
                          (("1" (LEMMA "sigma_last[ Index[1 + j!1]]")
                            (("1"
                              (INST -1 " LAMBDA (i: Index[1 + j!1]): F!1(i)"
                               "j!1" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "sigma_last[Index[n!1]]")
                                      (("1"
                                        (INST -1
                                         " LAMBDA (i: Index[n!1]): G!1(i)"
                                         "j!1" "0")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (HIDE -1)
                                              (("1" (COPY -4)
                                                (("1" (INST -1 "j!1")
                                                  (("1" (REPLACE -1 1)
                                                    (("1" (HIDE -1)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (INST -2 "n!1-1"
                                                           " LAMBDA (i: Index[j!1]): F!1(i)"
                                                           "LAMBDA (i: Index[n!1-1]): G!1(i)")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (CASE
                                                                  " (FORALL (i_1: below[j!1]): F!1(i_1) = G!1(i_1))")
                                                              (("1"
                                                                (REPLACE -1 -3)
                                                                (("1" (HIDE -1)
                                                                  (("1"
                                                                    (CASE
                                                                        " sigma(0, j!1 - 1, LAMBDA (i_1: Index[j!1]): F!1(i_1))= sigma(0, j!1 - 1, LAMBDA (i: Index[1 + j!1]): F!1(i))")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 -3)
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (CASE
                                                                              " sigma(0, n!1 - 2, LAMBDA (i_1: Index[n!1 - 1]): G!1(i_1))= sigma(0, n!1 - 2, LAMBDA (i_1: Index[n!1]): G!1(i_1))")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             -3)
                                                                            (("1"
                                                                              (HIDE
                                                                               -1)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -3
                                                                                 -2)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             -2
                                                                             2)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "sigma_restrict_dom[1]")
                                                                              (("2"
                                                                                (INST
                                                                                 -1
                                                                                 "n!1-1"
                                                                                 "n!1-1"
                                                                                 " LAMBDA (i_1: Index[n!1 - 1]): G!1(i_1)"
                                                                                 "LAMBDA (i_1: Index[n!1]): G!1(i_1)")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("3"
                                                                            (HIDE
                                                                             -2
                                                                             -4
                                                                             2)
                                                                            (("3"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (HIDE -2
                                                                       2)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "sigma_restrict_dom[1]")
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "j!1"
                                                                           "j!1"
                                                                           "LAMBDA (i_1: Index[j!1]): F!1(i_1)"
                                                                           " LAMBDA (i: Index[1 + j!1]): F!1(i)")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("3"
                                                                      (HIDE -2
                                                                       -4 2)
                                                                      (("3"
                                                                        (SKOSIMP)
                                                                        (("3"
                                                                          (GRIND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (HIDE -2 2)
                                                                (("2" (SKOSIMP)
                                                                  (("2"
                                                                    (INST -3
                                                                     "i!1")
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (HIDE -2 -4 2)
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE -2 -4 2) (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP)
      (("4" (HIDE 2) (("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)
     ("6" (HIDE 2) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)
     ("7" (HIDE 2) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL)
     ("8" (HIDE 2) (("8" (SKOSIMP) (("8" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK)
  (|sigma_eq_index-1| NIL 3539495453
   ("" (INDUCT "m")
    (("1" (TYPEPRED "m!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (TYPEPRED "j!1")
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3 -4)
            (("1" (SKOSIMP)
              (("1" (REPLACE -1)
                (("1" (EXPAND "sigma")
                  (("1" (EXPAND "sigma")
                    (("1" (ASSERT)
                      (("1" (REPLACE -2 1)
                        (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (HIDE -2 1)
              (("1" (HIDE -3)
                (("1" (ASSERT)
                  (("1" (SKOSIMP)
                    (("1" (SWAP-REL -3)
                      (("1" (REPLACE -3 1)
                        (("1" (ASSERT)
                          (("1" (LEMMA "sigma_last[ Index[1 + j!1]]")
                            (("1"
                              (INST -1 " LAMBDA (i: Index[1 + j!1]): F!1(i)"
                               "j!1" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "sigma_last[Index[n!1]]")
                                      (("1"
                                        (INST -1
                                         " LAMBDA (i: Index[n!1]): G!1(i)"
                                         "j!1" "0")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (HIDE -1)
                                              (("1" (COPY -4)
                                                (("1" (INST -1 "j!1")
                                                  (("1" (REPLACE -1 1)
                                                    (("1" (HIDE -1)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (INST -2 "n!1-1"
                                                           " LAMBDA (i: Index[j!1]): F!1(i)"
                                                           "LAMBDA (i: Index[n!1-1]): G!1(i)")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (CASE
                                                                  " (FORALL (i_1: below[j!1]): F!1(i_1) = G!1(i_1))")
                                                              (("1"
                                                                (REPLACE -1 -3)
                                                                (("1" (HIDE -1)
                                                                  (("1"
                                                                    (CASE
                                                                        " sigma(0, j!1 - 1, LAMBDA (i_1: Index[j!1]): F!1(i_1))= sigma(0, j!1 - 1, LAMBDA (i: Index[1 + j!1]): F!1(i))")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 -3)
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (CASE
                                                                              " sigma(0, n!1 - 2, LAMBDA (i_1: Index[n!1 - 1]): G!1(i_1))= sigma(0, n!1 - 2, LAMBDA (i_1: Index[n!1]): G!1(i_1))")
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             -3)
                                                                            (("1"
                                                                              (HIDE
                                                                               -1)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -3
                                                                                 -2)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (HIDE
                                                                             -2
                                                                             2)
                                                                            (("2"
                                                                              (POSTPONE)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("3"
                                                                            (POSTPONE)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (POSTPONE)
                                                                      NIL NIL)
                                                                     ("3"
                                                                      (POSTPONE)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (POSTPONE)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (POSTPONE) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (POSTPONE) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (POSTPONE) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL)
     ("7" (POSTPONE) NIL NIL) ("8" (POSTPONE) NIL NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK))
 (|aux_sigma_TCC1| 0
  (|aux_sigma_TCC1-1| NIL 3539499370 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|aux_sigma_TCC2| 0
  (|aux_sigma_TCC2-1| NIL 3539499370 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|aux_sigma_TCC3| 0
  (|aux_sigma_TCC3-1| NIL 3539499370 ("" (SUBTYPE-TCC) NIL NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL))
 (|aux_sigma| 0
  (|teo| "fin" 3544865338
   ("" (INDUCT "m")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (CASE "j!1=0")
        (("1" (HIDE -2 -3)
          (("1" (SKOSIMP)
            (("1" (REPLACE -1)
              (("1" (EXPAND "sigma")
                (("1" (EXPAND "sigma")
                  (("1" (ASSERT)
                    (("1" (REPLACE -2) (("1" (INST -3 "0") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "j!1>0")
          (("1" (ASSERT)
            (("1" (HIDE -3 1)
              (("1" (SKOSIMP)
                (("1"
                  (INST -2 "n!1" "Lambda(i: below[j!1]): F!1(i)"
                   " LAMBDA (i: below[j!1 + n!1]): G!1(i)")
                  (("1" (ASSERT)
                    (("1"
                      (CASE
                          " (FORALL (i_1: below[j!1]): F!1(i_1) = G!1(i_1)) ")
                      (("1" (REPLACE -1 -3)
                        (("1" (HIDE -1)
                          (("1" (LEMMA "sigma_last[below[1+j!1]]")
                            (("1"
                              (INST -1 "LAMBDA (i: below[1 + j!1]): F!1(i)"
                               "j!1" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1"
                                      (LEMMA
                                       "sigma_last[ below[1 + j!1 + n!1]]")
                                      (("1"
                                        (INST -1
                                         " LAMBDA (i: below[1 + j!1 + n!1]): G!1(i)"
                                         "j!1+n!1" "0")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (HIDE -1)
                                              (("1" (COPY -4)
                                                (("1" (INST -1 "j!1")
                                                  (("1"
                                                    (CASE
                                                        "F!1(j!1)=G!1(j!1+n!1)")
                                                    (("1" (REPLACE -1 1)
                                                      (("1" (ASSERT)
                                                        (("1" (HIDE -1 -2)
                                                          (("1"
                                                            (CASE
                                                                " sigma(0, j!1 - 1, LAMBDA (i_1: below[j!1]): F!1(i_1)) =sigma(0, j!1 - 1, LAMBDA (i: below[1 + j!1]): F!1(i))")
                                                            (("1"
                                                              (REPLACE -1 -3)
                                                              (("1" (HIDE -1)
                                                                (("1"
                                                                  (CASE
                                                                      " sigma(0, j!1 - 1 + n!1, LAMBDA (i_1: below[j!1 + n!1]): G!1(i_1))= sigma(0, j!1 - 1 + n!1, LAMBDA (i: below[1 + j!1 + n!1]): G!1(i))")
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             -3)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE 2)
                                                                    (("2"
                                                                      (HIDE -2)
                                                                      (("2"
                                                                        (ASSERT)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "sigma_restrict_dom")
                                                                          (("2"
                                                                            (INST
                                                                             -1
                                                                             "j!1+n!1"
                                                                             "j!1+n!1"
                                                                             " LAMBDA (i_1: below[j!1 + n!1]): G!1(i_1)"
                                                                             " LAMBDA (i: below[1 + j!1 + n!1]): G!1(i)")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("3"
                                                                    (SKOSIMP)
                                                                    (("3"
                                                                      (HIDE -4
                                                                       -6 2)
                                                                      (("3"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE -2 2)
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (LEMMA
                                                                   "sigma_restrict_dom")
                                                                  (("2"
                                                                    (INST -1
                                                                     "j!1"
                                                                     "j!1"
                                                                     " LAMBDA (i_1: below[j!1]): F!1(i_1)"
                                                                     " LAMBDA (i: below[1 + j!1]): F!1(i)")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3"
                                                              (HIDE -2 -4 2)
                                                              (("3" (SKOSIMP)
                                                                (("3" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (REPLACE -4)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOSIMP) (("2" (INST -4 "i!1") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)
     ("6" (HIDE 2) (("6" (GRIND) NIL NIL)) NIL)
     ("7" (HIDE 2) (("7" (GRIND) NIL NIL)) NIL)
     ("8" (HIDE 2) (("8" (GRIND) NIL NIL)) NIL)
     ("9" (HIDE 2) (("9" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|sigma_restrict_dom| FORMULA-DECL NIL |sigma_lemmas| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_last| FORMULA-DECL NIL |sigma| "reals/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (|sigma| DEF-DECL "real" |sigma| "reals/")
    (|T_high| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|T_low| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL))
   SHOSTAK)
  (|thm| "finished" 3539510712
   ("" (INDUCT "m")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (CASE "j!1=0")
        (("1" (HIDE -2 -3)
          (("1" (SKOSIMP)
            (("1" (REPLACE -1)
              (("1" (EXPAND "sigma")
                (("1" (EXPAND "sigma")
                  (("1" (ASSERT)
                    (("1" (REPLACE -2) (("1" (INST -3 "0") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "j!1>0")
          (("1" (ASSERT)
            (("1" (HIDE -3 1)
              (("1" (SKOSIMP)
                (("1"
                  (INST -2 "n!1" "Lambda(i: below[j!1]): F!1(i)"
                   " LAMBDA (i: below[j!1 + n!1]): G!1(i)")
                  (("1" (ASSERT)
                    (("1"
                      (CASE
                          " (FORALL (i_1: below[j!1]): F!1(i_1) = G!1(i_1)) ")
                      (("1" (REPLACE -1 -3)
                        (("1" (HIDE -1)
                          (("1" (LEMMA "sigma_last[below[1+j!1]]")
                            (("1"
                              (INST -1 "LAMBDA (i: below[1 + j!1]): F!1(i)"
                               "j!1" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1"
                                      (LEMMA
                                       "sigma_last[ below[1 + j!1 + n!1]]")
                                      (("1"
                                        (INST -1
                                         " LAMBDA (i: below[1 + j!1 + n!1]): G!1(i)"
                                         "j!1+n!1" "0")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (HIDE -1)
                                              (("1" (COPY -4)
                                                (("1" (INST -1 "j!1")
                                                  (("1"
                                                    (CASE
                                                        "F!1(j!1)=G!1(j!1+n!1)")
                                                    (("1" (REPLACE -1 1)
                                                      (("1" (ASSERT)
                                                        (("1" (HIDE -1 -2)
                                                          (("1"
                                                            (CASE
                                                                " sigma(0, j!1 - 1, LAMBDA (i_1: below[j!1]): F!1(i_1)) =sigma(0, j!1 - 1, LAMBDA (i: below[1 + j!1]): F!1(i))")
                                                            (("1"
                                                              (REPLACE -1 -3)
                                                              (("1" (HIDE -1)
                                                                (("1"
                                                                  (CASE
                                                                      " sigma(0, j!1 - 1 + n!1, LAMBDA (i_1: below[j!1 + n!1]): G!1(i_1))= sigma(0, j!1 - 1 + n!1, LAMBDA (i: below[1 + j!1 + n!1]): G!1(i))")
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             -3)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE 2)
                                                                    (("2"
                                                                      (HIDE -2)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "sigma_restrict_dom[1]")
                                                                        (("2"
                                                                          (INST
                                                                           -1
                                                                           "j!1+n!1"
                                                                           "j!1+n!1"
                                                                           " LAMBDA (i_1: below[j!1 + n!1]): G!1(i_1)"
                                                                           " LAMBDA (i: below[1 + j!1 + n!1]): G!1(i)")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("3"
                                                                    (SKOSIMP)
                                                                    (("3"
                                                                      (HIDE -4
                                                                       -6 2)
                                                                      (("3"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE -2 2)
                                                              (("2"
                                                                (LEMMA
                                                                 "sigma_restrict_dom[1]")
                                                                (("2"
                                                                  (INST -1
                                                                   "j!1" "j!1"
                                                                   " LAMBDA (i_1: below[j!1]): F!1(i_1)"
                                                                   " LAMBDA (i: below[1 + j!1]): F!1(i)")
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("3"
                                                              (HIDE -2 -4 2)
                                                              (("3" (SKOSIMP)
                                                                (("3" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (REPLACE -4)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP)
                                        (("2" (HIDE -4 -6 2)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP)
                              (("2" (HIDE -4 -6 2) (("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOSIMP) (("2" (INST -4 "i!1") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)
     ("6" (HIDE 2) (("6" (GRIND) NIL NIL)) NIL)
     ("7" (HIDE 2) (("7" (GRIND) NIL NIL)) NIL)
     ("8" (HIDE 2) (("8" (GRIND) NIL NIL)) NIL)
     ("9" (HIDE 2) (("9" (GRIND) NIL NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK)
  (|casi| "casi" 3539510573
   ("" (INDUCT "m")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (CASE "j!1=0")
        (("1" (HIDE -2 -3)
          (("1" (SKOSIMP)
            (("1" (REPLACE -1)
              (("1" (EXPAND "sigma")
                (("1" (EXPAND "sigma")
                  (("1" (ASSERT)
                    (("1" (REPLACE -2) (("1" (INST -3 "0") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "j!1>0")
          (("1" (ASSERT)
            (("1" (HIDE -3 1)
              (("1" (SKOSIMP)
                (("1"
                  (INST -2 "n!1" "Lambda(i: below[j!1]): F!1(i)"
                   " LAMBDA (i: below[j!1 + n!1]): G!1(i)")
                  (("1" (ASSERT)
                    (("1"
                      (CASE
                          " (FORALL (i_1: below[j!1]): F!1(i_1) = G!1(i_1)) ")
                      (("1" (REPLACE -1 -3)
                        (("1" (HIDE -1)
                          (("1" (LEMMA "sigma_last[below[1+j!1]]")
                            (("1"
                              (INST -1 "LAMBDA (i: below[1 + j!1]): F!1(i)"
                               "j!1" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1"
                                      (LEMMA
                                       "sigma_last[ below[1 + j!1 + n!1]]")
                                      (("1"
                                        (INST -1
                                         " LAMBDA (i: below[1 + j!1 + n!1]): G!1(i)"
                                         "j!1+n!1" "0")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (HIDE -1)
                                              (("1" (COPY -4)
                                                (("1" (INST -1 "j!1")
                                                  (("1"
                                                    (CASE
                                                        "F!1(j!1)=G!1(j!1+n!1)")
                                                    (("1" (REPLACE -1 1)
                                                      (("1" (ASSERT)
                                                        (("1" (HIDE -1 -2)
                                                          (("1"
                                                            (CASE
                                                                " sigma(0, j!1 - 1, LAMBDA (i_1: below[j!1]): F!1(i_1)) =sigma(0, j!1 - 1, LAMBDA (i: below[1 + j!1]): F!1(i))")
                                                            (("1"
                                                              (REPLACE -1 -3)
                                                              (("1" (HIDE -1)
                                                                (("1"
                                                                  (CASE
                                                                      " sigma(0, j!1 - 1 + n!1, LAMBDA (i_1: below[j!1 + n!1]): G!1(i_1))= sigma(0, j!1 - 1 + n!1, LAMBDA (i: below[1 + j!1 + n!1]): G!1(i))")
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             -3)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE 2)
                                                                    (("2"
                                                                      (HIDE -2)
                                                                      (("2"
                                                                        (POSTPONE)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("3"
                                                                    (SKOSIMP)
                                                                    (("3"
                                                                      (HIDE -4
                                                                       -6 2)
                                                                      (("3"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2" (HIDE -2 2)
                                                              (("2" (POSTPONE)
                                                                NIL NIL))
                                                              NIL)
                                                             ("3"
                                                              (HIDE -2 -4 2)
                                                              (("3" (SKOSIMP)
                                                                (("3" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (REPLACE -4)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP)
                                        (("2" (HIDE -4 -6 2)
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP)
                              (("2" (HIDE -4 -6 2) (("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOSIMP) (("2" (INST -4 "i!1") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)
     ("6" (HIDE 2) (("6" (GRIND) NIL NIL)) NIL)
     ("7" (HIDE 2) (("7" (GRIND) NIL NIL)) NIL)
     ("8" (HIDE 2) (("8" (GRIND) NIL NIL)) NIL)
     ("9" (HIDE 2) (("9" (GRIND) NIL NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK)
  (|aux_sigma-1| NIL 3539499430
   ("" (INDUCT "m")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (CASE "j!1=0")
        (("1" (HIDE -2 -3)
          (("1" (SKOSIMP)
            (("1" (REPLACE -1)
              (("1" (EXPAND "sigma")
                (("1" (EXPAND "sigma")
                  (("1" (ASSERT)
                    (("1" (REPLACE -2) (("1" (INST -3 "0") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "j!1>0")
          (("1" (ASSERT)
            (("1" (HIDE -3 1)
              (("1" (SKOSIMP)
                (("1"
                  (INST -2 "n!1" "Lambda(i: below[j!1]): F!1(i)"
                   " LAMBDA (i: below[j!1 + n!1]): G!1(i)")
                  (("1" (ASSERT)
                    (("1"
                      (CASE
                          " (FORALL (i_1: below[j!1]): F!1(i_1) = G!1(i_1)) ")
                      (("1" (REPLACE -1 -3)
                        (("1" (HIDE -1) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)
                       ("2" (SKOSIMP) (("2" (INST -4 "i!1") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)
     ("6" (HIDE 2) (("6" (GRIND) NIL NIL)) NIL)
     ("7" (HIDE 2) (("7" (GRIND) NIL NIL)) NIL)
     ("8" (HIDE 2) (("8" (GRIND) NIL NIL)) NIL)
     ("9" (HIDE 2) (("9" (GRIND) NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|aux_sigma2_TCC1| 0
  (|aux_sigma2_TCC1-1| NIL 3539673824 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|aux_sigma2_TCC2| 0
  (|aux_sigma2_TCC2-1| NIL 3539673824 ("" (SUBTYPE-TCC) NIL NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|aux_sigma2| 0
  (|thm| "finished" 3539675903
   ("" (INDUCT "j")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (CASE "j!1=0")
        (("1" (SKOSIMP)
          (("1" (HIDE -2)
            (("1" (REPLACE -1)
              (("1" (ASSERT)
                (("1" (REPLACE -3)
                  (("1" (EXPAND "sigma")
                    (("1" (EXPAND "sigma") (("1" (INST -5 "0") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "j!1>0")
          (("1" (ASSERT)
            (("1" (HIDE -3 1)
              (("1" (SKOSIMP)
                (("1" (LEMMA "sigma_last[below[m!1]]")
                  (("1" (INST -1 " LAMBDA (i: below[m!1]): F!1(i)" "j!1" "0")
                    (("1" (ASSERT)
                      (("1" (REPLACE -1 1)
                        (("1" (HIDE -1)
                          (("1" (LEMMA "sigma_last[below[m!1+n!1]]")
                            (("1"
                              (INST -1 " LAMBDA (i: below[m!1 + n!1]): G!1(i)"
                               "j!1+n!1" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1" (COPY -5)
                                      (("1" (INST -1 "j!1")
                                        (("1" (REPLACE -1 1)
                                          (("1" (HIDE -1)
                                            (("1"
                                              (CASE "G!1(j!1)=G!1(j!1+n!1)")
                                              (("1" (REPLACE -1 1)
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (INST -2 "m!1" "n!1"
                                                       " LAMBDA (i: below[m!1]): F!1(i)"
                                                       " LAMBDA (i: below[m!1 + n!1]): G!1(i)")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (REPLACE -3 1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE -2 2)
                              (("2" (SKOSIMP)
                                (("2" (HIDE -6) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE -2 -5 2)
                    (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKOSIMP)
        (("4" (SKOSIMP)
          (("4" (SKOSIMP) (("4" (HIDE -4) (("4" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKOSIMP)
        (("5" (SKOSIMP) (("5" (HIDE -4) (("5" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("6" (HIDE 2)
      (("6" (SKOSIMP)
        (("6" (SKOSIMP)
          (("6" (SKOSIMP) (("6" (HIDE -4) (("6" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("7" (HIDE 2)
      (("7" (SKOSIMP)
        (("7" (SKOSIMP) (("7" (HIDE -4) (("7" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|sigma_last| FORMULA-DECL NIL |sigma| "reals/")
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|sigma_0_neg| FORMULA-DECL NIL |sigma_below| "reals/")
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| "reals/")
    (|T_high| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|T_low| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK)
  (|encamino| "encamino" 3539675829
   ("" (INDUCT "j")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (CASE "j!1=0")
        (("1" (SKOSIMP)
          (("1" (HIDE -2)
            (("1" (REPLACE -1)
              (("1" (ASSERT)
                (("1" (REPLACE -3)
                  (("1" (EXPAND "sigma")
                    (("1" (EXPAND "sigma") (("1" (INST -5 "0") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "j!1>0")
          (("1" (ASSERT)
            (("1" (HIDE -3 1)
              (("1" (SKOSIMP)
                (("1" (LEMMA "sigma_last[below[m!1]]")
                  (("1" (INST -1 " LAMBDA (i: below[m!1]): F!1(i)" "j!1" "0")
                    (("1" (ASSERT)
                      (("1" (REPLACE -1 1)
                        (("1" (HIDE -1)
                          (("1" (LEMMA "sigma_last[below[m!1+n!1]]")
                            (("1"
                              (INST -1 " LAMBDA (i: below[m!1 + n!1]): G!1(i)"
                               "j!1+n!1" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1" (COPY -5)
                                      (("1" (INST -1 "j!1")
                                        (("1" (REPLACE -1 1)
                                          (("1" (HIDE -1)
                                            (("1"
                                              (CASE "G!1(j!1)=G!1(j!1+n!1)")
                                              (("1" (REPLACE -1 1)
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT)
                                                    (("1" (POSTPONE) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (REPLACE -3 1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE -2 2)
                              (("2" (SKOSIMP)
                                (("2" (HIDE -6) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE -2 -5 2)
                    (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKOSIMP)
        (("4" (SKOSIMP)
          (("4" (SKOSIMP) (("4" (HIDE -4) (("4" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKOSIMP)
        (("5" (SKOSIMP) (("5" (HIDE -4) (("5" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("6" (HIDE 2)
      (("6" (SKOSIMP)
        (("6" (SKOSIMP)
          (("6" (SKOSIMP) (("6" (HIDE -4) (("6" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("7" (HIDE 2)
      (("7" (SKOSIMP)
        (("7" (SKOSIMP) (("7" (HIDE -4) (("7" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK)
  (|aux_sigma2-1| NIL 3539675235
   ("" (INDUCT "j")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (CASE "j!1=0")
        (("1" (SKOSIMP)
          (("1" (HIDE -2)
            (("1" (REPLACE -1)
              (("1" (ASSERT)
                (("1" (REPLACE -3)
                  (("1" (EXPAND "sigma")
                    (("1" (EXPAND "sigma") (("1" (INST -5 "0") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "j!1>0")
          (("1" (ASSERT) (("1" (HIDE -3 1) (("1" (POSTPONE) NIL NIL)) NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKOSIMP)
        (("4" (SKOSIMP)
          (("4" (SKOSIMP) (("4" (HIDE -4) (("4" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKOSIMP)
        (("5" (SKOSIMP) (("5" (HIDE -4) (("5" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("6" (HIDE 2)
      (("6" (SKOSIMP)
        (("6" (SKOSIMP)
          (("6" (SKOSIMP) (("6" (HIDE -4) (("6" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("7" (HIDE 2)
      (("7" (SKOSIMP)
        (("7" (SKOSIMP) (("7" (HIDE -4) (("7" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|sigma_restrict_gen_TCC1| 0
  (|sigma_restrict_gen_TCC1-1| NIL 3539497928 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|sigma_restrict_gen_TCC2| 0
  (|sigma_restrict_gen_TCC2-1| NIL 3539497928 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_gen_TCC3| 0
  (|sigma_restrict_gen_TCC3-1| NIL 3539497928 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL))
 (|sigma_restrict_gen_TCC4| 0
  (|sigma_restrict_gen_TCC4-1| NIL 3539497928 ("" (ASSUMING-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_gen| 0
  (|teo| "fin" 3544866218
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (TYPEPRED "j!1")
          (("3" (CASE "j!1=0")
            (("1" (REPLACE -1)
              (("1" (HIDE -3 -4)
                (("1" (ASSERT)
                  (("1" (CASE " (FORALL (i: below[m!1]): F!1(i) = G!1(i))")
                    (("1" (HIDE -1)
                      (("1" (HIDE -3 -4)
                        (("1" (HIDE -1)
                          (("1" (LEMMA "sigma_eq[below[1+j!1+m!1]]")
                            (("1"
                              (INST -1 "G!1"
                               "lambda(i:below[1+j!1+m!1]):G!1(i)" "j!2-1" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "sigma_eq[below[1+m!1]]")
                                      (("1"
                                        (INST -1 "G!1"
                                         " LAMBDA (i: below[1 +m!1]): G!1(i)"
                                         "j!2-1" "0")
                                        (("1" (ASSERT)
                                          (("1" (HIDE -1)
                                            (("1" (LEMMA "aux_sigma2")
                                              (("1"
                                                (INST -1 "m!1+1" "j!2" "j!1"
                                                 "LAMBDA (i: below[1 + m!1]): G!1(i)"
                                                 "LAMBDA (i: below[1 + j!1 + m!1]): G!1(i)")
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (LEMMA
                                                     "sigma_restrict_dom")
                                                    (("1"
                                                      (INST -1 "j!2" "m!1"
                                                       "F!1" "G!1")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (HIDE -1 2)
                                                        (("2" (SKOSIMP)
                                                          (("2" (GRIND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKOSIMP)
                                          (("2" (HIDE 2)
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "j!1>0")
              (("1" (ASSERT)
                (("1" (HIDE -2 1 -4)
                  (("1" (INST -2 "j!2" "_" "_" "_")
                    (("1" (INST -2 "m!1" "_" "_")
                      (("1" (INST -2 "F!1" "_")
                        (("1" (INST -2 "Lambda(i: below[j!1+m!1]): G!1(i)")
                          (("1"
                            (CASE
                                " (FORALL (i_1: below[m!1]): F!1(i_1) = G!1(i_1))")
                            (("1" (REPLACE -1 -3)
                              (("1" (HIDE -1)
                                (("1" (ASSERT)
                                  (("1" (REPLACE -2 1)
                                    (("1" (HIDE -2)
                                      (("1" (ASSERT)
                                        (("1" (HIDE -1)
                                          (("1"
                                            (LEMMA
                                             "sigma_eq[below[1 + j!1 + m!1]]")
                                            (("1"
                                              (INST -1
                                               "LAMBDA (i: below[j!1 + m!1 + 1]): G!1(i)"
                                               "G!1" "j!2-1" "0")
                                              (("1" (ASSERT)
                                                (("1"
                                                  (LEMMA "sigma_restrict_dom")
                                                  (("1"
                                                    (INST -1 "j!2" "j!1+m!1"
                                                     "LAMBDA (i: below[j!1 + m!1]): G!1(i)"
                                                     "LAMBDA (i: below[j!1 + m!1+1]): G!1(i)")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|aux_sigma2| FORMULA-DECL NIL |sigma_lemmas| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|sigma_restrict_dom| FORMULA-DECL NIL |sigma_lemmas| NIL)
    (|m!1| SKOLEM-CONST-DECL "posnat" |sigma_lemmas| NIL)
    (|j!1| SKOLEM-CONST-DECL "nat" |sigma_lemmas| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sigma_eq| FORMULA-DECL NIL |sigma| "reals/")
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| "reals/")
    (|T_high| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|T_low| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK)
  (|poc| "poc" 3544866143
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (TYPEPRED "j!1")
          (("3" (CASE "j!1=0")
            (("1" (REPLACE -1)
              (("1" (HIDE -3 -4)
                (("1" (ASSERT)
                  (("1" (CASE " (FORALL (i: below[m!1]): F!1(i) = G!1(i))")
                    (("1" (HIDE -1)
                      (("1" (HIDE -3 -4)
                        (("1" (HIDE -1)
                          (("1" (LEMMA "sigma_eq[below[1+j!1+m!1]]")
                            (("1"
                              (INST -1 "G!1"
                               "lambda(i:below[1+j!1+m!1]):G!1(i)" "j!2-1" "0")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "sigma_eq[below[1+m!1]]")
                                      (("1"
                                        (INST -1 "G!1"
                                         " LAMBDA (i: below[1 +m!1]): G!1(i)"
                                         "j!2-1" "0")
                                        (("1" (ASSERT)
                                          (("1" (HIDE -1)
                                            (("1" (LEMMA "aux_sigma2")
                                              (("1"
                                                (INST -1 "m!1+1" "j!2" "j!1"
                                                 "LAMBDA (i: below[1 + m!1]): G!1(i)"
                                                 "LAMBDA (i: below[1 + j!1 + m!1]): G!1(i)")
                                                (("1" (ASSERT)
                                                  (("1" (POSTPONE) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKOSIMP)
                                          (("2" (HIDE 2)
                                            (("2" (GRIND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "j!1>0")
              (("1" (ASSERT)
                (("1" (HIDE -2 1 -4)
                  (("1" (INST -2 "j!2" "_" "_" "_")
                    (("1" (INST -2 "m!1" "_" "_")
                      (("1" (INST -2 "F!1" "_")
                        (("1" (INST -2 "Lambda(i: below[j!1+m!1]): G!1(i)")
                          (("1"
                            (CASE
                                " (FORALL (i_1: below[m!1]): F!1(i_1) = G!1(i_1))")
                            (("1" (REPLACE -1 -3)
                              (("1" (HIDE -1)
                                (("1" (ASSERT)
                                  (("1" (REPLACE -2 1)
                                    (("1" (HIDE -2)
                                      (("1" (ASSERT)
                                        (("1" (HIDE -1)
                                          (("1"
                                            (LEMMA
                                             "sigma_eq[below[1 + j!1 + m!1]]")
                                            (("1"
                                              (INST -1
                                               "LAMBDA (i: below[j!1 + m!1 + 1]): G!1(i)"
                                               "G!1" "j!2-1" "0")
                                              (("1" (ASSERT)
                                                (("1"
                                                  (LEMMA "sigma_restrict_dom")
                                                  (("1"
                                                    (INST -1 "j!2" "j!1+m!1"
                                                     "LAMBDA (i: below[j!1 + m!1]): G!1(i)"
                                                     "LAMBDA (i: below[j!1 + m!1+1]): G!1(i)")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK)
  (|thm| "finished" 3539675926
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (TYPEPRED "j!1")
          (("3" (CASE "j!1=0")
            (("1" (REPLACE -1)
              (("1" (HIDE -3 -4)
                (("1" (ASSERT)
                  (("1" (LEMMA "sigma_restrict_dom[1]")
                    (("1" (INST -1 "j!2" "m!1" "F!1" "G!1")
                      (("1" (CASE " (FORALL (i: below[m!1]): F!1(i) = G!1(i))")
                        (("1" (REPLACE -1 -2)
                          (("1" (HIDE -1)
                            (("1" (ASSERT)
                              (("1" (HIDE -3 -4)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "sigma_eq[below[1+j!1+m!1]]")
                                      (("1"
                                        (INST -1 "G!1"
                                         "lambda(i:below[1+j!1+m!1]):G!1(i)"
                                         "j!2-1" "0")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (HIDE -1)
                                              (("1"
                                                (LEMMA
                                                 "sigma_eq[below[1+m!1]]")
                                                (("1"
                                                  (INST -1 "G!1"
                                                   " LAMBDA (i: below[1 +m!1]): G!1(i)"
                                                   "j!2-1" "0")
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -1 1)
                                                      (("1" (HIDE -1)
                                                        (("1"
                                                          (LEMMA "aux_sigma2")
                                                          (("1"
                                                            (INST -1 "m!1+1"
                                                             "j!2" "j!1"
                                                             "LAMBDA (i: below[1 + m!1]): G!1(i)"
                                                             "LAMBDA (i: below[1 + j!1 + m!1]): G!1(i)")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE 2)
                                                  (("2" (SKOSIMP)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP)
                                        (("2" (HIDE 2) (("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (SKOSIMP)
                        (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "j!1>0")
              (("1" (ASSERT)
                (("1" (HIDE -2 1 -4)
                  (("1" (INST -2 "j!2" "_" "_" "_")
                    (("1" (INST -2 "m!1" "_" "_")
                      (("1" (INST -2 "F!1" "_")
                        (("1" (INST -2 "Lambda(i: below[j!1+m!1]): G!1(i)")
                          (("1"
                            (CASE
                                " (FORALL (i_1: below[m!1]): F!1(i_1) = G!1(i_1))")
                            (("1" (REPLACE -1 -3)
                              (("1" (HIDE -1)
                                (("1" (ASSERT)
                                  (("1" (REPLACE -2 1)
                                    (("1" (HIDE -2)
                                      (("1" (LEMMA "sigma_restrict_dom[1]")
                                        (("1"
                                          (INST -1 "j!2" "j!1+m!1"
                                           "LAMBDA (i: below[j!1 + m!1]): G!1(i)"
                                           "LAMBDA (i: below[j!1 + m!1+1]): G!1(i)")
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -1 1)
                                              (("1" (HIDE -1)
                                                (("1"
                                                  (LEMMA
                                                   "sigma_eq[below[1 + j!1 + m!1]]")
                                                  (("1"
                                                    (INST -1
                                                     "LAMBDA (i: below[j!1 + m!1 + 1]): G!1(i)"
                                                     "G!1" "j!2-1" "0")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (HIDE -2 2)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)
     ("6" (HIDE 2) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)
     ("7" (HIDE 2) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL)
   SHOSTAK)
  (|apunto| "apunto" 3539675228
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (TYPEPRED "j!1")
          (("3" (CASE "j!1=0")
            (("1" (REPLACE -1)
              (("1" (HIDE -3 -4)
                (("1" (ASSERT)
                  (("1" (LEMMA "sigma_restrict_dom[1]")
                    (("1" (INST -1 "j!2" "m!1" "F!1" "G!1")
                      (("1" (CASE " (FORALL (i: below[m!1]): F!1(i) = G!1(i))")
                        (("1" (REPLACE -1 -2)
                          (("1" (HIDE -1)
                            (("1" (ASSERT)
                              (("1" (HIDE -3 -4)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "sigma_eq[below[1+j!1+m!1]]")
                                      (("1"
                                        (INST -1 "G!1"
                                         "lambda(i:below[1+j!1+m!1]):G!1(i)"
                                         "j!2-1" "0")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (HIDE -1)
                                              (("1"
                                                (LEMMA
                                                 "sigma_eq[below[1+m!1]]")
                                                (("1"
                                                  (INST -1 "G!1"
                                                   " LAMBDA (i: below[1 +m!1]): G!1(i)"
                                                   "j!2-1" "0")
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -1 1)
                                                      (("1" (HIDE -1)
                                                        (("1"
                                                          (LEMMA "aux_sigma2")
                                                          (("1"
                                                            (INST -1 "m!1+1"
                                                             "j!2" "j!1"
                                                             "LAMBDA (i: below[1 + m!1]): G!1(i)"
                                                             "LAMBDA (i: below[1 + j!1 + m!1]): G!1(i)")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE 2)
                                                  (("2" (POSTPONE) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP)
                                        (("2" (HIDE 2) (("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (SKOSIMP)
                        (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "j!1>0")
              (("1" (ASSERT)
                (("1" (HIDE -2 1 -4)
                  (("1" (INST -2 "j!2" "_" "_" "_")
                    (("1" (INST -2 "m!1" "_" "_")
                      (("1" (INST -2 "F!1" "_")
                        (("1" (INST -2 "Lambda(i: below[j!1+m!1]): G!1(i)")
                          (("1"
                            (CASE
                                " (FORALL (i_1: below[m!1]): F!1(i_1) = G!1(i_1))")
                            (("1" (REPLACE -1 -3)
                              (("1" (HIDE -1)
                                (("1" (ASSERT)
                                  (("1" (REPLACE -2 1)
                                    (("1" (HIDE -2)
                                      (("1" (LEMMA "sigma_restrict_dom[1]")
                                        (("1"
                                          (INST -1 "j!2" "j!1+m!1"
                                           "LAMBDA (i: below[j!1 + m!1]): G!1(i)"
                                           "LAMBDA (i: below[j!1 + m!1+1]): G!1(i)")
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -1 1)
                                              (("1" (HIDE -1)
                                                (("1"
                                                  (LEMMA
                                                   "sigma_eq[below[1 + j!1 + m!1]]")
                                                  (("1"
                                                    (INST -1
                                                     "LAMBDA (i: below[j!1 + m!1 + 1]): G!1(i)"
                                                     "G!1" "j!2-1" "0")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (HIDE -2 2)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)
     ("6" (HIDE 2) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)
     ("7" (HIDE 2) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK)
  (|faltauna| "faltauna" 3539499031
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (TYPEPRED "j!1")
          (("3" (CASE "j!1=0")
            (("1" (REPLACE -1)
              (("1" (HIDE -3 -4)
                (("1" (ASSERT)
                  (("1" (LEMMA "sigma_restrict_dom[1]")
                    (("1" (INST -1 "j!2" "m!1" "F!1" "G!1")
                      (("1" (CASE " (FORALL (i: below[m!1]): F!1(i) = G!1(i))")
                        (("1" (REPLACE -1 -2)
                          (("1" (HIDE -1)
                            (("1" (ASSERT)
                              (("1" (HIDE -3 -4)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1) (("1" (POSTPONE) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (SKOSIMP)
                        (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "j!1>0")
              (("1" (ASSERT)
                (("1" (HIDE -2 1 -4)
                  (("1" (INST -2 "j!2" "_" "_" "_")
                    (("1" (INST -2 "m!1" "_" "_")
                      (("1" (INST -2 "F!1" "_")
                        (("1" (INST -2 "Lambda(i: below[j!1+m!1]): G!1(i)")
                          (("1"
                            (CASE
                                " (FORALL (i_1: below[m!1]): F!1(i_1) = G!1(i_1))")
                            (("1" (REPLACE -1 -3)
                              (("1" (HIDE -1)
                                (("1" (ASSERT)
                                  (("1" (REPLACE -2 1)
                                    (("1" (HIDE -2)
                                      (("1" (LEMMA "sigma_restrict_dom[1]")
                                        (("1"
                                          (INST -1 "j!2" "j!1+m!1"
                                           "LAMBDA (i: below[j!1 + m!1]): G!1(i)"
                                           "LAMBDA (i: below[j!1 + m!1+1]): G!1(i)")
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -1 1)
                                              (("1" (HIDE -1)
                                                (("1"
                                                  (LEMMA
                                                   "sigma_eq[below[1 + j!1 + m!1]]")
                                                  (("1"
                                                    (INST -1
                                                     "LAMBDA (i: below[j!1 + m!1 + 1]): G!1(i)"
                                                     "G!1" "j!2-1" "0")
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (HIDE -2 2)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)
     ("6" (HIDE 2) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)
     ("7" (HIDE 2) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK)
  (|faltapoco| "faltapoco" 3539498812
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (TYPEPRED "j!1")
          (("3" (CASE "j!1=0")
            (("1" (REPLACE -1)
              (("1" (HIDE -3 -4)
                (("1" (ASSERT)
                  (("1" (LEMMA "sigma_restrict_dom[1]")
                    (("1" (INST -1 "j!2" "m!1" "F!1" "G!1")
                      (("1" (CASE " (FORALL (i: below[m!1]): F!1(i) = G!1(i))")
                        (("1" (REPLACE -1 -2)
                          (("1" (HIDE -1)
                            (("1" (ASSERT)
                              (("1" (HIDE -3 -4)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1) (("1" (POSTPONE) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (SKOSIMP)
                        (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "j!1>0")
              (("1" (ASSERT)
                (("1" (HIDE -2 1 -4)
                  (("1" (INST -2 "j!2" "_" "_" "_")
                    (("1" (INST -2 "m!1" "_" "_")
                      (("1" (INST -2 "F!1" "_")
                        (("1" (INST -2 "Lambda(i: below[j!1+m!1]): G!1(i)")
                          (("1"
                            (CASE
                                " (FORALL (i_1: below[m!1]): F!1(i_1) = G!1(i_1))")
                            (("1" (REPLACE -1 -3)
                              (("1" (HIDE -1)
                                (("1" (ASSERT)
                                  (("1" (REPLACE -2 1)
                                    (("1" (HIDE -2) (("1" (POSTPONE) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)
     ("6" (HIDE 2) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)
     ("7" (HIDE 2) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK)
  (|dos| "dos" 3539498484
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (TYPEPRED "j!1")
          (("3" (CASE "j!1=0")
            (("1" (REPLACE -1)
              (("1" (HIDE -3 -4)
                (("1" (ASSERT)
                  (("1" (LEMMA "sigma_restrict_dom[1]")
                    (("1" (INST -1 "j!2" "m!1" "F!1" "G!1")
                      (("1" (CASE " (FORALL (i: below[m!1]): F!1(i) = G!1(i))")
                        (("1" (REPLACE -1 -2)
                          (("1" (HIDE -1)
                            (("1" (ASSERT)
                              (("1" (HIDE -3 -4)
                                (("1" (REPLACE -1 1)
                                  (("1" (HIDE -1) (("1" (POSTPONE) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (SKOSIMP)
                        (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (CASE "j!1>0")
              (("1" (ASSERT)
                (("1" (HIDE -2 1 -4) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)
     ("6" (HIDE 2) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)
     ("7" (HIDE 2) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK)
  (|sigma_restrict_gen-1| NIL 3539497951
   ("" (INDUCT "n")
    (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (POSTPONE) NIL NIL)
     ("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)
     ("6" (HIDE 2) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)
     ("7" (HIDE 2) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|sigma_eq_index2_TCC1| 0
  (|sigma_eq_index2_TCC1-1| NIL 3540046271 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_eq_index2_TCC2| 0
  (|sigma_eq_index2_TCC2-1| NIL 3540046271 ("" (SUBTYPE-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_eq_index2| 0
  (|thm| "finished" 3540050426
   ("" (INDUCT "j")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (CASE "j!1=0")
        (("1" (HIDE -2)
          (("1" (HIDE -2)
            (("1" (SKOSIMP)
              (("1" (REPLACE -1)
                (("1" (EXPAND "sigma")
                  (("1" (EXPAND "sigma") (("1" (INST -4 "0") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "j!1>0")
          (("1" (HIDE 1)
            (("1" (ASSERT)
              (("1" (HIDE -3)
                (("1" (SKOSIMP)
                  (("1" (INST -2 "m!1+1" "n!1+1" "_" "_")
                    (("1" (ASSERT)
                      (("1"
                        (INST -2
                         " LAMBDA (i: Index[m!1+1]): IF i<m!1 THEN F!1(i) ELSE 0 ENDIF"
                         "_")
                        (("1"
                          (INST -2
                           " LAMBDA (i: Index[n!1+1]): IF i<n!1 THEN G!1(i) ELSE 0 ENDIF")
                          (("1"
                            (CASE " (FORALL (i_1: below[1 + m!1]):
         IF i_1 < m!1 THEN F!1(i_1) ELSE 0 ENDIF =
          IF i_1 < n!1 THEN G!1(i_1) ELSE 0 ENDIF)")
                            (("1" (REPLACE -1 -3)
                              (("1" (HIDE -1)
                                (("1" (LEMMA "sigma_last[below[m!1]]")
                                  (("1"
                                    (INST -1 "LAMBDA (i: Index[m!1]): F!1(i)"
                                     "j!1" "0")
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -1 1)
                                        (("1" (HIDE -1)
                                          (("1"
                                            (LEMMA "sigma_last[below[n!1]]")
                                            (("1"
                                              (INST -1
                                               " LAMBDA (i: Index[n!1]): G!1(i)"
                                               "j!1" "0")
                                              (("1" (ASSERT)
                                                (("1" (REPLACE -1 1)
                                                  (("1" (HIDE -1)
                                                    (("1" (COPY -5)
                                                      (("1" (INST -1 "j!1")
                                                        (("1" (REPLACE -1 1)
                                                          (("1" (HIDE -1)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (LEMMA
                                                                 "sigma_restrict_gen")
                                                                (("1"
                                                                  (INST -1
                                                                   "j!1" "m!1"
                                                                   "1"
                                                                   " LAMBDA (i: Index[m!1]): F!1(i)"
                                                                   " LAMBDA (i_1: Index[1 + m!1]):
              IF i_1 < m!1 THEN F!1(i_1) ELSE 0 ENDIF")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (SWAP-REL
                                                                       -1)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -1 -3)
                                                                        (("1"
                                                                          (HIDE
                                                                           -1)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "sigma_restrict_gen")
                                                                            (("1"
                                                                              (INST
                                                                               -1
                                                                               "j!1"
                                                                               "n!1"
                                                                               "1"
                                                                               " LAMBDA (i: Index[n!1]): G!1(i)"
                                                                               " LAMBDA (i_1: Index[1 + n!1]):
               IF i_1 < n!1 THEN G!1(i_1) ELSE 0 ENDIF")
                                                                              (("1"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (SKOSIMP)
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE -2 2)
                              (("2" (SKOSIMP)
                                (("2" (LIFT-IF)
                                  (("2" (CASE "i!1<m!1")
                                    (("1" (ASSERT)
                                      (("1" (INST -5 "i!1") NIL NIL)) NIL)
                                     ("2" (CASE "i!1>=m!1")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP)
      (("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
     ("5" (SKOSIMP) (("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)
     ("6" (SKOSIMP)
      (("6" (SKOSIMP) (("6" (SKOSIMP) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
     ("7" (SKOSIMP) (("7" (SKOSIMP) (("7" (ASSERT) NIL NIL)) NIL)) NIL)
     ("8" (SKOSIMP)
      (("8" (SKOSIMP) (("8" (SKOSIMP) (("8" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_last| FORMULA-DECL NIL |sigma| "reals/")
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sigma_restrict_gen| FORMULA-DECL NIL |sigma_lemmas| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sigma_0_neg| FORMULA-DECL NIL |sigma_below| "reals/")
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Index| TYPE-EQ-DECL NIL |vectors| "vectors/")
    (|sigma| DEF-DECL "real" |sigma| "reals/")
    (|T_high| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|T_low| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK)
  (|problema| "problema" 3540048708
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3)
            (("1" (REPLACE -1)
              (("1" (ASSERT)
                (("1" (EXPAND "sigma")
                  (("1" (EXPAND "sigma") (("1" (INST -4 "j!2-1") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3 1)
                (("1" (INST -2 "j!1" "_" "_" "_")
                  (("1" (CASE "j!2=1")
                    (("1" (REPLACE -1)
                      (("1" (EXPAND "sigma")
                        (("1" (EXPAND "sigma") (("1" (INST -6 "0") NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "j!2>1")
                      (("1" (INST -3 "j!2-1" "_" "_")
                        (("1" (HIDE 1)
                          (("1"
                            (INST -3 " LAMBDA (i: Index[j!1]): F!1(i)"
                             " LAMBDA (i: Index[j!1]): G!1(i)")
                            (("1" (ASSERT)
                              (("1"
                                (CASE
                                    " (FORALL (i_1: below[j!1]): F!1(i_1) = G!1(i_1))")
                                (("1" (REPLACE -1 -4)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "sigma_last[below[1+j!1]]")
                                      (("1"
                                        (INST -1
                                         " LAMBDA (i: Index[1 + j!1]): F!1(i)"
                                         "j!2-1" "0")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (HIDE -1)
                                              (("1"
                                                (LEMMA
                                                 "sigma_last[below[n!1]]")
                                                (("1"
                                                  (INST -1
                                                   "LAMBDA (i: Index[n!1]): G!1(i)"
                                                   "j!2-1" "0")
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -1 1)
                                                      (("1" (HIDE -1)
                                                        (("1" (COPY -6)
                                                          (("1"
                                                            (INST -1 "j!2-1")
                                                            (("1"
                                                              (REPLACE -1 1)
                                                              (("1" (HIDE -1)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "sigma_restrict_gen")
                                                                    (("1"
                                                                      (INST -1
                                                                       "j!2-1"
                                                                       "j!1"
                                                                       "1"
                                                                       " LAMBDA (i: Index[j!1]): F!1(i)"
                                                                       " LAMBDA (i: Index[1 + j!1]): F!1(i)")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           -4)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -4
                                                                             1)
                                                                            (("1"
                                                                              (HIDE
                                                                               -1)
                                                                              (("1"
                                                                                (HIDE
                                                                                 -3)
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "sigma_restrict_gen")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -1
                                                                                     "j!2-1"
                                                                                     "j!1"
                                                                                     "1"
                                                                                     "LAMBDA (i_1: Index[j!1]): G!1(i_1)"
                                                                                     "LAMBDA (i_1: Index[n!1]): G!1(i_1)")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (POSTPONE)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (POSTPONE)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKOSIMP) (("2" (INST -6 "i!1") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP)
      (("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
     ("5" (SKOSIMP) (("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)
     ("6" (SKOSIMP)
      (("6" (SKOSIMP) (("6" (SKOSIMP) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
     ("7" (SKOSIMP) (("7" (SKOSIMP) (("7" (ASSERT) NIL NIL)) NIL)) NIL)
     ("8" (SKOSIMP) (("8" (SKOSIMP) (("8" (ASSERT) NIL NIL)) NIL)) NIL)
     ("9" (SKOSIMP)
      (("9" (SKOSIMP) (("9" (SKOSIMP) (("9" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL)
   SHOSTAK)
  (|casi| "casi" 3540047548
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3)
            (("1" (REPLACE -1)
              (("1" (ASSERT)
                (("1" (EXPAND "sigma")
                  (("1" (EXPAND "sigma") (("1" (INST -4 "j!2-1") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3 1)
                (("1" (INST -2 "j!1" "_" "_" "_")
                  (("1" (CASE "j!2=1")
                    (("1" (REPLACE -1)
                      (("1" (EXPAND "sigma")
                        (("1" (EXPAND "sigma") (("1" (INST -6 "0") NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "j!2>1")
                      (("1" (INST -3 "j!2-1" "_" "_")
                        (("1" (HIDE 1)
                          (("1"
                            (INST -3 " LAMBDA (i: Index[j!1]): F!1(i)"
                             " LAMBDA (i: Index[j!1]): G!1(i)")
                            (("1" (ASSERT)
                              (("1"
                                (CASE
                                    " (FORALL (i_1: below[j!1]): F!1(i_1) = G!1(i_1))")
                                (("1" (REPLACE -1 -4)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "sigma_last[below[1+j!1]]")
                                      (("1"
                                        (INST -1
                                         " LAMBDA (i: Index[1 + j!1]): F!1(i)"
                                         "j!2-1" "0")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (HIDE -1)
                                              (("1"
                                                (LEMMA
                                                 "sigma_last[below[n!1]]")
                                                (("1"
                                                  (INST -1
                                                   "LAMBDA (i: Index[n!1]): G!1(i)"
                                                   "j!2-1" "0")
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -1 1)
                                                      (("1" (HIDE -1)
                                                        (("1" (COPY -6)
                                                          (("1"
                                                            (INST -1 "j!2-1")
                                                            (("1"
                                                              (REPLACE -1 1)
                                                              (("1" (HIDE -1)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (LEMMA
                                                                     "sigma_restrict_gen")
                                                                    (("1"
                                                                      (INST -1
                                                                       "j!2-1"
                                                                       "j!1"
                                                                       "1"
                                                                       " LAMBDA (i: Index[j!1]): F!1(i)"
                                                                       " LAMBDA (i: Index[1 + j!1]): F!1(i)")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           -4)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -4
                                                                             1)
                                                                            (("1"
                                                                              (HIDE
                                                                               -1)
                                                                              (("1"
                                                                                (HIDE
                                                                                 -3)
                                                                                (("1"
                                                                                  (POSTPONE)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKOSIMP) (("2" (INST -6 "i!1") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP)
      (("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
     ("5" (SKOSIMP) (("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)
     ("6" (SKOSIMP)
      (("6" (SKOSIMP) (("6" (SKOSIMP) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
     ("7" (SKOSIMP) (("7" (SKOSIMP) (("7" (ASSERT) NIL NIL)) NIL)) NIL)
     ("8" (SKOSIMP) (("8" (SKOSIMP) (("8" (ASSERT) NIL NIL)) NIL)) NIL)
     ("9" (SKOSIMP)
      (("9" (SKOSIMP) (("9" (SKOSIMP) (("9" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sigma_eq_index2-1| NIL 3540046594
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3)
            (("1" (REPLACE -1)
              (("1" (ASSERT)
                (("1" (EXPAND "sigma")
                  (("1" (EXPAND "sigma") (("1" (INST -4 "j!2-1") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3 1)
                (("1" (INST -2 "j!1" "_" "_" "_")
                  (("1" (CASE "j!2=1")
                    (("1" (REPLACE -1)
                      (("1" (EXPAND "sigma")
                        (("1" (EXPAND "sigma") (("1" (INST -6 "0") NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "j!2>1")
                      (("1" (INST -3 "j!2-1" "_" "_")
                        (("1" (HIDE 1)
                          (("1"
                            (INST -3 " LAMBDA (i: Index[j!1]): F!1(i)"
                             " LAMBDA (i: Index[j!1]): G!1(i)")
                            (("1" (ASSERT)
                              (("1"
                                (CASE
                                    " (FORALL (i_1: below[j!1]): F!1(i_1) = G!1(i_1))")
                                (("1" (REPLACE -1 -4)
                                  (("1" (HIDE -1)
                                    (("1" (LEMMA "sigma_last[below[1+j!1]]")
                                      (("1"
                                        (INST -1
                                         " LAMBDA (i: Index[1 + j!1]): F!1(i)"
                                         "j!2-1" "0")
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 1)
                                            (("1" (HIDE -1)
                                              (("1"
                                                (LEMMA
                                                 "sigma_last[below[n!1]]")
                                                (("1"
                                                  (INST -1
                                                   "LAMBDA (i: Index[n!1]): G!1(i)"
                                                   "j!2-1" "0")
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -1 1)
                                                      (("1" (HIDE -1)
                                                        (("1" (COPY -6)
                                                          (("1"
                                                            (INST -1 "j!2-1")
                                                            (("1"
                                                              (REPLACE -1 1)
                                                              (("1" (HIDE -1)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (POSTPONE)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (SKOSIMP) (("2" (INST -6 "i!1") NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (SKOSIMP)
      (("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
     ("5" (SKOSIMP) (("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)
     ("6" (SKOSIMP)
      (("6" (SKOSIMP) (("6" (SKOSIMP) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)
     ("7" (SKOSIMP) (("7" (SKOSIMP) (("7" (ASSERT) NIL NIL)) NIL)) NIL)
     ("8" (SKOSIMP) (("8" (SKOSIMP) (("8" (ASSERT) NIL NIL)) NIL)) NIL)
     ("9" (SKOSIMP)
      (("9" (SKOSIMP) (("9" (SKOSIMP) (("9" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|sigma_restrict_gen2_TCC1| 0
  (|sigma_restrict_gen2_TCC1-1| NIL 3539929747 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_gen2_TCC2| 0
  (|sigma_restrict_gen2_TCC2-1| NIL 3539929747 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_restrict_gen2| 0
  (|sigma_restrict_gen2-1| NIL 3539929747
   ("" (SKOSIMP)
    (("" (LEMMA "sigma_split[below[m!1]]")
      (("1" (INST -1 "F!1" "j!1-1" "0" "k!1-1")
        (("1" (ASSERT)
          (("1" (LEMMA "sigma_split[below[m!1+n!1]]")
            (("1" (INST -1 "G!1" "j!1-1" "0" "k!1-1")
              (("1" (ASSERT)
                (("1" (LEMMA "both_sides_plus2")
                  (("1" (LEMMA "sigma_restrict_gen")
                    (("1" (INST -1 "j!1" "m!1" "n!1" "F!1" "G!1")
                      (("1" (REPLACE -5 -1)
                        (("1" (ASSERT)
                          (("1" (REPLACE -1 -4)
                            (("1" (HIDE -1)
                              (("1" (LEMMA "sigma_restrict_gen")
                                (("1" (INST -1 "k!1" "m!1" "n!1" "F!1" "G!1")
                                  (("1" (REPLACE -5 -1)
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP) (("2" (HIDE -3 2) (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP) (("2" (HIDE -3 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|sigma_split| FORMULA-DECL NIL |sigma| "reals/")
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|both_sides_plus2| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_restrict_gen| FORMULA-DECL NIL |sigma_lemmas| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| "reals/")
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| "reals/")
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   SHOSTAK))
 (|sigma_eq_index3_TCC1| 0
  (|sigma_eq_index3_TCC1-1| NIL 3540063060 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_eq_index3_TCC2| 0
  (|sigma_eq_index3_TCC2-1| NIL 3540063060 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_eq_index3| 0
  (|sigma_eq_index3-1| NIL 3540063060
   ("" (SKOSIMP)
    (("" (LEMMA "sigma_eq_index2")
      ((""
        (INST -1 "m!1" "n!1" "j!1" " LAMBDA (i: Index[m!1]): F!1(i)"
         "LAMBDA (i: Index[n!1]): G!1(i)")
        (("" (ASSERT)
          (("" (CASE " (FORALL (i_1: below[m!1]): F!1(i_1) = G!1(i_1))")
            (("1" (REPLACE -1 -2)
              (("1" (HIDE -1)
                (("1" (LEMMA "sigma_split[below[m!1]]")
                  (("1"
                    (INST -1 " LAMBDA (i_1: Index[m!1]): F!1(i_1)" "j!1-1" "0"
                     "k!1-1")
                    (("1" (ASSERT)
                      (("1" (REPLACE -1 -2)
                        (("1" (HIDE -1)
                          (("1" (LEMMA "sigma_split[below[n!1]]")
                            (("1"
                              (INST -1 " LAMBDA (i_1: Index[n!1]): G!1(i_1)"
                               "j!1-1" "0" "k!1-1")
                              (("1" (ASSERT)
                                (("1" (REPLACE -1 -2)
                                  (("1" (HIDE -1)
                                    (("1"
                                      (CASE
                                          " sigma(0, k!1 - 1, LAMBDA (i_1: Index[m!1]): F!1(i_1))= sigma(0, k!1 - 1, LAMBDA (i_1: Index[n!1]): G!1(i_1))")
                                      (("1" (ASSERT) NIL NIL)
                                       ("2" (HIDE -1 2)
                                        (("2" (LEMMA "sigma_eq_index2")
                                          (("2"
                                            (INST -1 "m!1" "n!1" "k!1"
                                             " LAMBDA (i_1: Index[m!1]): F!1(i_1)"
                                             "LAMBDA (i_1: Index[n!1]): G!1(i_1)")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sigma_eq_index2| FORMULA-DECL NIL |sigma_lemmas| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|sigma_split| FORMULA-DECL NIL |sigma| "reals/")
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|sigma| DEF-DECL "real" |sigma| "reals/")
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| "reals/")
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|T_high| TYPE-EQ-DECL NIL |sigma| "reals/")
    (<= CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Index| TYPE-EQ-DECL NIL |vectors| "vectors/")
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK))
 (|sigma_shift_gen_TCC1| 0
  (|sigma_shift_gen_TCC1-1| NIL 3539921332 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_shift_gen_TCC2| 0
  (|sigma_shift_gen_TCC2-1| NIL 3539921332 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|sigma_shift_gen_TCC3| 0
  (|sigma_shift_gen_TCC3-1| NIL 3539921332 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL))
 (|sigma_shift_gen_TCC4| 0
  (|sigma_shift_gen_TCC4-1| NIL 3539921332 ("" (ASSUMING-TCC) NIL NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL))
 (|sigma_shift_gen| 0
  (|thm| "finished" 3539930173
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3)
            (("1" (TYPEPRED "j!2")
              (("1" (CASE "j!2=1")
                (("1" (HIDE -2)
                  (("1" (REPLACE -1)
                    (("1" (ASSERT)
                      (("1" (EXPAND "sigma")
                        (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3 1)
                (("1" (TYPEPRED "j!2")
                  (("1" (CASE "j!2=1")
                    (("1" (REPLACE -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "sigma")
                          (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "j!2>1")
                      (("1" (HIDE 1)
                        (("1" (HIDE -2)
                          (("1"
                            (INST -3 "j!2-1" "n!1"
                             "LAMBDA (i: below[j!1 + n!1]): F!1(i)")
                            (("1" (ASSERT)
                              (("1" (LEMMA "sigma_last[below[1+j!1]]")
                                (("1"
                                  (INST -1
                                   " LAMBDA (i: below[1 + j!1]): F!1(i + n!1)"
                                   "j!2-1" "0")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -1 1)
                                      (("1" (HIDE -1)
                                        (("1"
                                          (LEMMA
                                           "sigma_last[below[1+j!1+n!1]]")
                                          (("1"
                                            (INST -1
                                             " LAMBDA (i: below[1 + j!1 + n!1]): F!1(i)"
                                             "j!2-1+n!1" "n!1")
                                            (("1" (ASSERT)
                                              (("1" (REPLACE -1 1)
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA
                                                       "sigma_restrict_gen")
                                                      (("1"
                                                        (INST -1 "j!2-1" "j!1"
                                                         "1"
                                                         "LAMBDA (i_1: below[j!1]): F!1(i_1 + n!1)"
                                                         " LAMBDA (i: below[1 + j!1]): F!1(i + n!1)")
                                                        (("1" (ASSERT)
                                                          (("1" (REPLACE -1 -4)
                                                            (("1" (HIDE -1)
                                                              (("1"
                                                                (CASE
                                                                    " sigma[below[j!1 + n!1]]
           (n!1, j!2 - 2 + n!1, LAMBDA (i_1: below[j!1 + n!1]): F!1(i_1))= sigma(n!1, j!2 - 2 + n!1, LAMBDA (i: below[1 + j!1 + n!1]): F!1(i))")
                                                                (("1"
                                                                  (REPLACE -1
                                                                           -4)
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE -3 2)
                                                                  (("2"
                                                                    (LEMMA
                                                                     "sigma_restrict_gen2")
                                                                    (("2"
                                                                      (INST -1
                                                                       "j!2-1+n!1"
                                                                       "n!1"
                                                                       "j!1+n!1"
                                                                       "1"
                                                                       " LAMBDA (i_1: below[j!1 + n!1]): F!1(i_1)"
                                                                       " LAMBDA (i: below[1 + j!1 + n!1]): F!1(i)")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("3" (SKOSIMP)
                                                                  (("3"
                                                                    (HIDE -3 2)
                                                                    (("3"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP)
                                            (("2" (HIDE -5 2)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -3 2)
                                  (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKOSIMP)
        (("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKOSIMP) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("6" (HIDE 2)
      (("6" (SKOSIMP) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("7" (HIDE 2)
      (("7" (SKOSIMP)
        (("7" (SKOSIMP) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("8" (HIDE 2)
      (("8" (SKOSIMP) (("8" (SKOSIMP) (("8" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("9" (HIDE 2)
      (("9" (SKOSIMP) (("9" (SKOSIMP) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sigma_restrict_gen| FORMULA-DECL NIL |sigma_lemmas| NIL)
    (|sigma_restrict_gen2| FORMULA-DECL NIL |sigma_lemmas| NIL)
    (|sigma_last| FORMULA-DECL NIL |sigma| "reals/")
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|j!2| SKOLEM-CONST-DECL "posnat" |sigma_lemmas| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|sigma| DEF-DECL "real" |sigma| "reals/")
    (|T_high| TYPE-EQ-DECL NIL |sigma| "reals/")
    (|T_low| TYPE-EQ-DECL NIL |sigma| "reals/")
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL))
   SHOSTAK)
  (|ultima| "ultima" 3539929319
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3)
            (("1" (TYPEPRED "j!2")
              (("1" (CASE "j!2=1")
                (("1" (HIDE -2)
                  (("1" (REPLACE -1)
                    (("1" (ASSERT)
                      (("1" (EXPAND "sigma")
                        (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3 1)
                (("1" (TYPEPRED "j!2")
                  (("1" (CASE "j!2=1")
                    (("1" (REPLACE -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "sigma")
                          (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "j!2>1")
                      (("1" (HIDE 1)
                        (("1" (HIDE -2)
                          (("1"
                            (INST -3 "j!2-1" "n!1"
                             "LAMBDA (i: below[j!1 + n!1]): F!1(i)")
                            (("1" (ASSERT)
                              (("1" (LEMMA "sigma_last[below[1+j!1]]")
                                (("1"
                                  (INST -1
                                   " LAMBDA (i: below[1 + j!1]): F!1(i + n!1)"
                                   "j!2-1" "0")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -1 1)
                                      (("1" (HIDE -1)
                                        (("1"
                                          (LEMMA
                                           "sigma_last[below[1+j!1+n!1]]")
                                          (("1"
                                            (INST -1
                                             " LAMBDA (i: below[1 + j!1 + n!1]): F!1(i)"
                                             "j!2-1+n!1" "n!1")
                                            (("1" (ASSERT)
                                              (("1" (REPLACE -1 1)
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (LEMMA
                                                       "sigma_restrict_gen")
                                                      (("1"
                                                        (INST -1 "j!2-1" "j!1"
                                                         "1"
                                                         "LAMBDA (i_1: below[j!1]): F!1(i_1 + n!1)"
                                                         " LAMBDA (i: below[1 + j!1]): F!1(i + n!1)")
                                                        (("1" (ASSERT)
                                                          (("1" (REPLACE -1 -4)
                                                            (("1" (HIDE -1)
                                                              (("1"
                                                                (CASE
                                                                    " sigma[below[j!1 + n!1]]
           (n!1, j!2 - 2 + n!1, LAMBDA (i_1: below[j!1 + n!1]): F!1(i_1))= sigma(n!1, j!2 - 2 + n!1, LAMBDA (i: below[1 + j!1 + n!1]): F!1(i))")
                                                                (("1"
                                                                  (REPLACE -1
                                                                           -4)
                                                                  (("1"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2"
                                                                  (HIDE -3 2)
                                                                  (("2"
                                                                    (POSTPONE)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("3" (SKOSIMP)
                                                                  (("3"
                                                                    (HIDE -3 2)
                                                                    (("3"
                                                                      (GRIND)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP)
                                            (("2" (HIDE -5 2)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -3 2)
                                  (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKOSIMP)
        (("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKOSIMP) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("6" (HIDE 2)
      (("6" (SKOSIMP) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("7" (HIDE 2)
      (("7" (SKOSIMP)
        (("7" (SKOSIMP) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("8" (HIDE 2)
      (("8" (SKOSIMP) (("8" (SKOSIMP) (("8" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("9" (HIDE 2)
      (("9" (SKOSIMP) (("9" (SKOSIMP) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
    NIL NIL NIL NIL NIL NIL)
   SHOSTAK)
  (|unaaa| "unaa" 3539924104
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3)
            (("1" (TYPEPRED "j!2")
              (("1" (CASE "j!2=1")
                (("1" (HIDE -2)
                  (("1" (REPLACE -1)
                    (("1" (ASSERT)
                      (("1" (EXPAND "sigma")
                        (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3 1)
                (("1" (TYPEPRED "j!2")
                  (("1" (CASE "j!2=1")
                    (("1" (REPLACE -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "sigma")
                          (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "j!2>1")
                      (("1" (HIDE 1)
                        (("1" (HIDE -2)
                          (("1"
                            (INST -3 "j!2-1" "n!1"
                             "LAMBDA (i: below[j!1 + n!1]): F!1(i)")
                            (("1" (ASSERT)
                              (("1" (LEMMA "sigma_last[below[1+j!1]]")
                                (("1"
                                  (INST -1
                                   " LAMBDA (i: below[1 + j!1]): F!1(i + n!1)"
                                   "j!2-1" "0")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -1 1)
                                      (("1" (HIDE -1)
                                        (("1"
                                          (LEMMA
                                           "sigma_last[below[1+j!1+n!1]]")
                                          (("1"
                                            (INST -1
                                             " LAMBDA (i: below[1 + j!1 + n!1]): F!1(i)"
                                             "j!2-1+n!1" "n!1")
                                            (("1" (ASSERT)
                                              (("1" (REPLACE -1 1)
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT)
                                                    (("1" (POSTPONE) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP)
                                            (("2" (HIDE -5 2)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -3 2)
                                  (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKOSIMP)
        (("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKOSIMP) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("6" (HIDE 2)
      (("6" (SKOSIMP) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("7" (HIDE 2)
      (("7" (SKOSIMP)
        (("7" (SKOSIMP) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("8" (HIDE 2)
      (("8" (SKOSIMP) (("8" (SKOSIMP) (("8" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("9" (HIDE 2)
      (("9" (SKOSIMP) (("9" (SKOSIMP) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK)
  (|dos| "dos" 3539923655
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3) (("1" (POSTPONE) NIL NIL)) NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3 1)
                (("1" (TYPEPRED "j!2")
                  (("1" (CASE "j!2=1")
                    (("1" (REPLACE -1)
                      (("1" (ASSERT)
                        (("1" (EXPAND "sigma")
                          (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (CASE "j!2>1")
                      (("1" (HIDE 1)
                        (("1" (HIDE -2)
                          (("1"
                            (INST -3 "j!2-1" "n!1"
                             "LAMBDA (i: below[j!1 + n!1]): F!1(i)")
                            (("1" (ASSERT)
                              (("1" (LEMMA "sigma_last[below[1+j!1]]")
                                (("1"
                                  (INST -1
                                   " LAMBDA (i: below[1 + j!1]): F!1(i + n!1)"
                                   "j!2-1" "0")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -1 1)
                                      (("1" (HIDE -1)
                                        (("1"
                                          (LEMMA
                                           "sigma_last[below[1+j!1+n!1]]")
                                          (("1"
                                            (INST -1
                                             " LAMBDA (i: below[1 + j!1 + n!1]): F!1(i)"
                                             "j!2-1+n!1" "n!1")
                                            (("1" (ASSERT)
                                              (("1" (REPLACE -1 1)
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT)
                                                    (("1" (POSTPONE) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP)
                                            (("2" (HIDE -5 2)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -3 2)
                                  (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKOSIMP)
        (("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKOSIMP) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("6" (HIDE 2)
      (("6" (SKOSIMP) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("7" (HIDE 2)
      (("7" (SKOSIMP)
        (("7" (SKOSIMP) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("8" (HIDE 2)
      (("8" (SKOSIMP) (("8" (SKOSIMP) (("8" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("9" (HIDE 2)
      (("9" (SKOSIMP) (("9" (SKOSIMP) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK)
  (|tres| "tres" 3539923478
   ("" (INDUCT "m")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (SKOSIMP)
        (("3" (CASE "j!1=0")
          (("1" (HIDE -2 -3) (("1" (POSTPONE) NIL NIL)) NIL)
           ("2" (CASE "j!1>0")
            (("1" (ASSERT)
              (("1" (HIDE -3 1)
                (("1" (TYPEPRED "j!2")
                  (("1" (CASE "j!2=1")
                    (("1" (POSTPONE) NIL NIL)
                     ("2" (CASE "j!2>1")
                      (("1" (HIDE 1)
                        (("1" (HIDE -2)
                          (("1"
                            (INST -3 "j!2-1" "n!1"
                             "LAMBDA (i: below[j!1 + n!1]): F!1(i)")
                            (("1" (ASSERT)
                              (("1" (LEMMA "sigma_last[below[1+j!1]]")
                                (("1"
                                  (INST -1
                                   " LAMBDA (i: below[1 + j!1]): F!1(i + n!1)"
                                   "j!2-1" "0")
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -1 1)
                                      (("1" (HIDE -1)
                                        (("1"
                                          (LEMMA
                                           "sigma_last[below[1+j!1+n!1]]")
                                          (("1"
                                            (INST -1
                                             " LAMBDA (i: below[1 + j!1 + n!1]): F!1(i)"
                                             "j!2-1+n!1" "n!1")
                                            (("1" (ASSERT)
                                              (("1" (REPLACE -1 1)
                                                (("1" (HIDE -1)
                                                  (("1" (ASSERT)
                                                    (("1" (POSTPONE) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (SKOSIMP)
                                            (("2" (HIDE -5 2)
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -3 2)
                                  (("2" (SKOSIMP) (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKOSIMP)
        (("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKOSIMP) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("6" (HIDE 2)
      (("6" (SKOSIMP) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("7" (HIDE 2)
      (("7" (SKOSIMP)
        (("7" (SKOSIMP) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("8" (HIDE 2)
      (("8" (SKOSIMP) (("8" (SKOSIMP) (("8" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("9" (HIDE 2)
      (("9" (SKOSIMP) (("9" (SKOSIMP) (("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK)
  (|problema| "problema" 3539922566
   ("" (INDUCT "n")
    (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (CASE "j!1=0")
        (("1" (POSTPONE) NIL NIL)
         ("2" (CASE "j!1>0")
          (("1" (ASSERT)
            (("1" (HIDE -3 1)
              (("1" (SKOSIMP)
                (("1"
                  (INST -2 "j!2" "m!1" " LAMBDA (i: below[j!1 + m!1]): F!1(i)")
                  (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (POSTPONE) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL)
     ("7" (POSTPONE) NIL NIL))
    NIL)
   NIL SHOSTAK)
  (|sigma_shift_gen-1| NIL 3539921507
   ("" (INDUCT "n")
    (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
     ("3" (SKOSIMP)
      (("3" (CASE "j!1=0")
        (("1" (SKOSIMP)
          (("1" (HIDE -2 -3)
            (("1" (REPLACE -1) (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL)
         ("2" (CASE "j!1>0")
          (("1" (ASSERT)
            (("1" (HIDE -3 1)
              (("1" (SKOSIMP)
                (("1"
                  (INST -2 "j!1" "m!1" " LAMBDA (i: below[j!1 + m!1]): F!1(i)")
                  (("1" (TYPEPRED "j!1") (("1" (POSTPONE) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (ASSERT) NIL NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKOSIMP)
        (("4" (SKOSIMP) (("4" (SKOSIMP) (("4" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKOSIMP) (("5" (SKOSIMP) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)
     ("6" (HIDE 2)
      (("6" (SKOSIMP)
        (("6" (SKOSIMP) (("6" (SKOSIMP) (("6" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("7" (HIDE 2)
      (("7" (SKOSIMP) (("7" (SKOSIMP) (("7" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   NIL SHOSTAK)))

